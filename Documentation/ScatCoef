                    Scattering Coefficients                    ScatCoef is a function used to calculate the                    scattering coefficients required by Mie calculations                    (e.g. scattering intensity or crosssection)                    This function requires the Ricatti-Bessel functions.                    [a,b]=ScatCoef(m,x,nmax) calculates the scattering   [ScatCoef]       coefficients from order 1 to nmax for refractive                    index and particle size parameter(s) m and x. The                    returns a and b are complex nmax-by-nx matrices,                    where nx is the dimension of the m and/or x, with                    each column representing one particle parameter                    (pair). m, x or both can be scalar. If both are                    vectors, they must be of the same dimension to form                    particle parameter pairs.                                                       [Return to Index]   ScatCoef.m   % ScatCoef Scattering coefficients   %       [a,b]=ScatCoef(m,x,nmax)   %       returns the two column vectors a and b containing   %       the scattering coefficients for particles of size x   %       and refractive index relative to medium m, from n=1   %       to n=nmax.   % Written by and copyright   %       Dave Barnett   %       Optical Engineering Group   %       Dept. of Electrical and Electronic Engineering   %       Loughborough University   %       20th November 1996   %       Corrected 4th September 1997   %               m missing from calculation of dphim   %       5th September 1997   %               computation method optimised by use of vector methods   %       Modified 13th December 1998   %               Generalised to receive vectors of rho and return matrices.   %               Corrected for complex m.   %       30th December 1998   %               Changed to allow vector m and scalar x.   function [a,b] = ScatCoef(m,x,nmax)   m = m(:).';   x = x(:).';   if length(x)==1           x = x*ones(size(m));   end   if length(m)>1 & length(x)~=length(m)           error('Dimensions of x & m must be the same or scalar')   end   N = ((1:nmax).')*ones(1,length(x));   % Ricatti-Bessel functions   phi = RB1(x, nmax);   phim = RB1(m.*x, nmax);   zeta = RB2(x, nmax);   xi = phi - i * zeta;   phin_1 = [sin(x);phi(1:(nmax-1),:)];   phimn_1 = [sin(m.*x);phim(1:(nmax-1),:)];   zetan_1 = [-cos(x);zeta(1:(nmax-1),:)];   if length(m)>1           m = ones(nmax,1)*m;   end   if length(x)>1           x = ones(nmax,1)*x;   end   dphi = phin_1-N.*phi./x;   dphim = phimn_1-N.*phim./(m.*x);   dzeta = zetan_1-N.*zeta./x;   dxi = dphi - i * dzeta;   a = (m.*phim.*dphi - phi.*dphim) ./ (m.*phim.*dxi - xi.*dphim);   b = (phim.*dphi - m.*phi.*dphim) ./ (phim.*dxi - m.*xi.*dphim);This page designed by the author of the m-files, David Barnett