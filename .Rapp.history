gamma
y
1/dt
hr
t
res
t+hr/dt
hr
hr <- 0
y[t+hr/dt]
t.nodiv <- 0 # no division during the first X hours after dawn#
		dt <- resol/60#
		j <- findInterval(2 * volbins[1], volbins)#
		m <- length(volbins) ## dimensions of the squared matrix#
#
		#####################
		## GAMMA FUNCTION ## fraction of cells that grow into next size class between t and t + dt#
		#####################
		# y <- (1-exp(-Einterp/E_star)) * gmax # original 2003 model#
		y <- (gmax/E_star) * Einterp # NEW VERSION#
		y[which(Einterp >= E_star)] <- gmax#
#
		###########################
		## Respiration FUNCTION ## fraction of cells that shrink between t and t + dt#
		###########################
				# Assumptions:#
				# 1) rate of respiration is a function of growth rate#
				# 2) rate of respiration constant (h-1) constant over the nighttime period (polysaccharide is drawn down linearly over the nighttime period)#
#
				# From Szul et al., 2019 mSystems. At Pro growth rate of 0.44 d-1 (or 0.0183 h-1), proportion of carbon storage to total carbon ~ 30%#
				# From Zavrel et al. 2019 eLife. At Synechocystis growth rate of 44 d-1, proportion of carbon storage to total carbon ~ 7.4 % [100*(1.35 * 0.44/24 + 0.05018)]#
						# Simplification: reg <- lm(seq(0.084, 0.199, length.out=10) ~ seq(0.025, 0.11, length.out=10))##
				# converson Synechocystis to Prochlorococcus ~ 4 [0.3 / (1.35 * 0.44/24 + 0.05018)]#
		conv <- 0.3 / (1.35 * 0.44/24 + 0.05018)#
 		# c <- 0#
		resp <-  conv * (1.35294 * mean(y) + 0.05018) * mean(y) # proportion of carbon storage to total carbon#
		resp <- c * (resp - y) # transform to probability to decrease size over time period#
		resp[which(resp < y)] <- 0 # probablity to decrease size class is 0 when growth rate > respiration rate#
#
			# plot(y); points(resp,col=2); abline(h=c(mean(y), mean(resp)),col=c(1,2))#
			# print(mean(resp)/mean(y))#
#
		#####################
		## DELTA FUNCTION ## fraction of cells that divide between t and t + dt#
		#####################
		a <- 4 	# NOTE: most values of volbins need to be < 1 for compatibility issue with the Delta function # based on HYNES et al. 2015#
		del <- dmax * (a*volbins/max(volbins))^b / (1 + (a*volbins/max(volbins))^b)#
#
		# del[1:(j-1)] <- 0#
				if(hr <= t.nodiv){delta <- matrix(data=0, 1, m)#
					}else{delta <- matrix(del, 1, m)}#
#
		## PLOT GAMMA AND DELTA#
		# par(mfrow=c(3,1))#
		# plot(y, type='p', col='red', xlab="Radiations", ylab=paste("Gamma (per",60*dt,"min)")); points(resp,col='lightblue')#
		# plot(Einterp, y, type='p', col='red', xlab="Radiations", ylab=paste("Gamma (per",60*dt,"min)")); points(Einterp, resp,col='lightblue')#
		# plot(volbins, del, type='p', col='red', xlab="Cell volume", ylab=paste("Delta (per",60*dt,"min)"))#
#
		#################################
		## CONSTRUCTION SPARSE MATRIX ###
		#################################
		stasis_ind <- seq(1,m^2,by=m+1) # Diagonal stasis (0)#
		growth_ind <- seq(2,m^2,by=m+1) # Subdiagonal growth (-1)#
		resp_ind <- seq(m+1, m^2, by=m+1) # superdiagonal (+1)#
		div_ind <- seq((((j-1)*m)+1), m^2, by=m+1) # Superdiagonal division (j-1)#
		n <- length(volbins)
for(t in 1:(1/dt)){#
			#t <- 1#
			A <- matrix(data=0,nrow=m, ncol=m)#
			#allo <- d * (volbins^-1.3) # allometric relationship of carbon metabolism#
			#allo <- log(allo/ min(allo))#
			#allo[which(allo > 5)]<- 5 # to limit difference in rate between smallest and largest size#
 			allo <- rep(1,n) # no allometric relationship#
			gamma <- y[t+hr/dt]*allo#
			respiration <- resp[t+hr/dt]*allo#
#
			# plot(volbins, gamma); abline(h=c(y[t+hr/dt] , mean(gamma)), col=c(1,2));points(volbins, respiration,col=3)#
#
			# Stasis (main diagonal)#
			A[stasis_ind] <- (1-delta)*(1-gamma)*(1-respiration) # the hr/dt part in the indexing is because each hour is broken up into dt segments for the irradiance spline#
			A[m,m] <- (1-delta[m])*(1-respiration[m])#
#
			# Cell growth (subdiagonal)#
			A[growth_ind] <- gamma[1:(m-1)]*(1-delta[1:(m-1)])*(1-respiration[1:(m-1)])#
#
			# Division (first row and superdiagonal j-1)#
			A[1,1:(j-1)] <- 2 * delta[1:(j-1)] # Top row; Small phytoplanktoin (i=1,..., j-1) are less than twice as big as the smallest size class, and so newly divided are put in the smallest size class.#
			A[div_ind] <- 2 * delta[j:m] # The cell division terms for large (i > = j) phytoplankton#
#
			# Respiration (superdiagonal)#
			A[1,2] <- A[1,2]  + respiration[1]#
			A[resp_ind] <- respiration[-1]*(1-delta[-1])*(1-gamma[-1])#
#
					if(t == 1){B <- A}else{B <- A %*% B}#
			}
A <- matrix(data=0,nrow=m, ncol=m)#
			allo <- d * (volbins^-1.3) # allometric relationship of carbon metabolism#
			allo <- log(allo/ min(allo))
d <0 6
d <- 6
allo <- d * (volbins^-1.3) # allometric relationship of carbon metabolism#
		allo <- log(allo/ min(allo))
plot(allo)
allo
allo <- d * (volbins^-1.3) # allometric relationship of carbon metabolism
plot(allo)
d <- 0.1
allo <- d * (volbins^-1.3) # allometric relationship of carbon metabolism
plot(allo)
d <- 0.01#
        allo <- d * (volbins^-1.3) # allometric relationship of carbon metabolism
plot(allo)
d <- 0.01#
        allo <- d * (volbins^-1.3) # allometric relationship of carbon metabolism#
		allo <- allo/ min(allo)
plot(allo)
plot(log(allo/ min(allo)))
allo <- d * (volbins/max(volbins)^-1.3) # allometric relationship of carbon metabolism
plot(allo)
plot((volbins/max(volbins))^-1.3 )
plot((volbins/min(volbins))^-1.3)
1 + (volbins/min(volbins))^-1.3
d <- 5
allo <- d*(1 + (volbins/min(volbins))^-1.3)
plot(allo)
allo <- (1 + (volbins/min(volbins))^-1.3)
plot(allo)
allo <- (1 + (volbins/min(volbins))^-1.3) # allometric relationship of carbon metabolism#
		sum(allo)
allo <- (1 + (volbins/min(volbins))^-1.3) # allometric relationship of carbon metabolism#
		allo <- all / sum(allo)
allo <- (1 + (volbins/min(volbins))^-1.3) # allometric relationship of carbon metabolism#
		allo <- allo / sum(allo)
plot(allo)
allo <- (1 + (volbins/min(volbins))^-1.3) # allometric relationship of carbon metabolism#
		allo <- allo / mean(allo)
plot(allo)
range(allo)
allo <- (1 + (volbins^-1.3) # allometric relationship of carbon metabolism#
		allo <- allo / mean(allo)
allo <- (1 + volbins^-1.3) # allometric relationship of carbon metabolism#
		allo <- allo / mean(allo)
range(allo)
allo <- (1 + volbins^-1.3)
plot(allo)
allo <- allo / mean(allo)
plot(allo)
sum(allo)
mean(allo)
allo[which(allo > 5)]<- 5 # to limit difference in rate between smallest and largest size
plot(allo)
d <- 9
# Based on Casey et al. 2019#
        allo <- (1 + volbins^-1.3) # allometric relationship of carbon metabolism#
		allo <- allo / mean(allo)#
        allo[which(allo > 5)]<- 5 # to limit difference in rate between smallest and largest size#
		allo <- d * allo
plot(allo)
allo <- (1 + volbins^-1.3) # allometric relationship of carbon metabolism#
		allo <- allo / mean(allo)#
        allo[which(allo > 5)]<- 5 # to limit difference in rate between smallest and largest size#
		allo <- 0.1 * allo
plot(allo)
allo <- (1 + volbins/min(volbins)^-1.3) # allometric relationship of carbon metabolism
plot(allo)
plot( allo <- 1 + (volbins/min(volbins))^-1.3 )
allo <- 1 + (volbins/min(volbins))^-1.3 # allometric relationship of carbon metabolism#
		allo <- allo / mean(allo)
plot(allo)
t.nodiv <- 0 # no division during the first X hours after dawn#
		dt <- resol/60#
		j <- findInterval(2 * volbins[1], volbins)#
		m <- length(volbins) ## dimensions of the squared matrix#
#
		#####################
		## GAMMA FUNCTION ## fraction of cells that grow into next size class between t and t + dt#
		#####################
		# y <- (1-exp(-Einterp/E_star)) * gmax # original 2003 model#
		y <- (gmax/E_star) * Einterp # NEW VERSION#
		y[which(Einterp >= E_star)] <- gmax#
#
		###########################
		## Respiration FUNCTION ## fraction of cells that shrink between t and t + dt#
		###########################
				# Assumptions:#
				# 1) rate of respiration is a function of growth rate#
				# 2) rate of respiration constant (h-1) constant over the nighttime period (polysaccharide is drawn down linearly over the nighttime period)#
#
				# From Szul et al., 2019 mSystems. At Pro growth rate of 0.44 d-1 (or 0.0183 h-1), proportion of carbon storage to total carbon ~ 30%#
				# From Zavrel et al. 2019 eLife. At Synechocystis growth rate of 44 d-1, proportion of carbon storage to total carbon ~ 7.4 % [100*(1.35 * 0.44/24 + 0.05018)]#
						# Simplification: reg <- lm(seq(0.084, 0.199, length.out=10) ~ seq(0.025, 0.11, length.out=10))##
				# converson Synechocystis to Prochlorococcus ~ 4 [0.3 / (1.35 * 0.44/24 + 0.05018)]#
		conv <- 0.3 / (1.35 * 0.44/24 + 0.05018)#
		resp <-  conv*(1.35294 * mean(y) + 0.05018) * mean(y) # proportion of carbon storage to total carbon#
		resp <- c * (resp - y) # transform to probability to decrease size over time period#
		resp[which(resp < y)] <- 0 # probablity to decrease size class is 0 when growth rate > respiration rate
?resp
plot(resp)
allo <- 1 + (volbins/min(volbins))^-1.3 # allometric relationship of carbon metabolism#
		allo <- allo / mean(allo)
plot(allo)
library(plotrix)#
library(zoo)#
#library(xlsx)#
#
setwd("~/Documents/DATA/SeaFlow/SF_SCOPE/SCOPE_6/Paige_paper/")#
#
xls <- read.csv("ConnellDielData013017.csv")#
xls$Time <- format(xls$Time, format="%T")#
xls$time <- as.POSIXct(paste(xls$Date, xls$Time), format="%m/%d/%y %H:%M", tz='HST')#
xlim <- range(xls$time, na.rm=T)#
#
phyto <- read.csv("seaflow_biomassDIELv3.csv")#
#
phyto$time <- as.POSIXct(phyto$time, format="%Y-%m-%d %T", tz='GMT')#
phyto$time <- as.POSIXct(format(phyto$time, tz='HST'), tz='HST') # convert GMT to local time#
phyto <- subset(phyto, time >= xlim[1] & time <= xlim[2])#
#
pro <- subset(phyto, pop == 'prochloro')#
  pro <- pro[-which(pro$abundance > 300),] # remove outliers#
syn <- subset(phyto, pop == 'synecho')#
  syn <- syn[-which(syn$abundance > 1.8),] # remove outliers#
#
plot(pro$time, pro$Qc_pg.cell*1000,ylim=c(0.01,0.08)*1000)#
lines(pro$time, pro$Qc_pg.cell_2.5*1000,col=2)#
lines(pro$time, pro$Qc_pg.cell_97.5*1000,col=2)#
#
plot(pro$time, pro$Cbiomass_ug.L)#
#
seq <- seq(min(pro$time, na.rm=T), max(pro$time, na.rm=T), by=60*60)#
time <- cut(pro$time,seq)#
s.time <-  as.POSIXct(tapply(pro$time, time, function(x) mean(x, na.rm=T)), origin="1970-01-01", tz='HST')#
abundance.pro <-  tapply(pro$abundance, time, function(x) mean(x, na.rm=T))#
biomass.pro <-  tapply(pro$Cbiomass_ug.L, time, function(x) mean(x, na.rm=T))#
abundance.syn <-  tapply(syn$abundance, time, function(x) mean(x, na.rm=T))#
biomass.syn <-  tapply(syn$Cbiomass_ug.L, time, function(x) mean(x, na.rm=T))#
  abundance.pro.sd <-  tapply(pro$abundance, time, function(x) sd(x, na.rm=T))#
  biomass.pro.sd <-  tapply(pro$Cbiomass_ug.L, time, function(x) sd(x, na.rm=T))#
  abundance.syn.sd <-  tapply(syn$abundance, time, function(x) sd(x, na.rm=T))#
  biomass.syn.sd <-  tapply(syn$Cbiomass_ug.L, time, function(x) sd(x, na.rm=T))#
#
  biomass.pro.2.5 <-  tapply(pro$Cbiomass_ug.L_2.5, time, function(x) mean(x, na.rm=T))#
  biomass.syn.2.5 <-  tapply(syn$Cbiomass_ug.L_2.5, time, function(x) mean(x, na.rm=T))#
  biomass.pro.97.5 <-  tapply(pro$Cbiomass_ug.L_97.5, time, function(x) mean(x, na.rm=T))#
  biomass.syn.97.5 <-  tapply(syn$Cbiomass_ug.L_97.5, time, function(x) mean(x, na.rm=T))#
night <- as.POSIXct(c(rep(as.POSIXct("2015-07-25 18:00:00",tz='HST'),2), rep(as.POSIXct("2015-07-26 6:00:00",tz='HST'),2),as.POSIXct("2015-07-25 18:00:00",tz='HST')),tz='HST')#
nights <- c(night, night+24*60*60, night+2*24*60*60, night+3*24*60*60,night+4*24*60*60)#
#
mean(tapply(pro$Qc_pg.cell_97.5, time, function(x) mean(x, na.rm=T))*1000)#
range(tapply(syn$Qc_pg.cell, time, function(x) mean(x, na.rm=T))*1000)#
#
range(biomass.pro.97.5)#
range(biomass.syn)#
#
## FIG. 2#
#
png("Fig2.png",width=6, height=6*1.5, unit='in', res=400)#
#
par(mfrow=c(3,1), cex=1, mar=c(0.5,4,1,1),pty='m', oma=c(4,1,1,1))#
# plot(s.time, abundance.pro, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(100,220))#
# axis(2)#
# axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
# polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
# plotCI(s.time, abundance.pro, abundance.pro.sd, sfrac=0, col='grey', lwd=2, pch=NA, add=T)#
# points(s.time, abundance.pro, lwd=2, col='green4',type='l')#
# # lines(s.time, abundance.pro+abundance.pro.sd , lwd=2, col='grey')#
# # lines(s.time, abundance.pro-abundance.pro.sd, lwd=2, col='grey')#
# box(col='black')#
# mtext(expression(paste("PRO Abundance (cells x 10"^{-3}," mL"^{-1},")")),2,3)#
##
# plot(s.time, abundance.syn, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(0.5,1.3))#
# axis(2)#
# axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
# polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
# plotCI(s.time, abundance.syn, abundance.syn.sd, sfrac=0, col='grey', lwd=2, pch=NA, add=T)#
# points(s.time, abundance.syn, lwd=2, col='red3',type='l')#
# # lines(s.time, abundance.syn+abundance.syn.sd , lwd=2, col='grey')#
# # lines(s.time, abundance.syn-abundance.syn.sd, lwd=2, col='grey')#
# box(col='black')#
# mtext(expression(paste("SYN Abundance (cells x 10"^{-3}," mL"^{-1},")")),2,3)#
plot(xls$time, xls[,'P.Mnan.Abundance']+xls[,'Hnan.Abundance'], pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(0,500))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
plotCI(xls$time, xls[,'P.Mnan.Abundance']+xls[,'Hnan.Abundance'], xls[,'SEM.P.Mnan.Abundance']+ xls[,'SEM.Hnan.Abundance'], sfrac=0, col='grey', lwd=2, pch=NA, add=T)#
points(xls$time, xls[,'P.Mnan.Abundance']+xls[,'Hnan.Abundance'],col='orchid', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("TNAN Abundance (cells mL"^{-1},")")),2,3)#
text(xlim[1],450,"a", cex=2, bty='n')#
#
plot(xls$time, xls[,'Hnan.Abundance'], pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(0,500))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
plotCI(xls$time, xls[,'Hnan.Abundance'], xls[,'SEM.Hnan.Abundance'], sfrac=0, col='grey', lwd=2, pch=NA, add=T)#
points(xls$time, xls[,'Hnan.Abundance'],col='purple', pch=16,type='o')#
# lines(xls$time, xls[,'Hnan.Abundance']+xls[,'SEM.Hnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'Hnan.Abundance']-xls[,'SEM.Hnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("HNAN Abundance (cells mL"^{-1},")")),2,3)#
text(xlim[1],450,"b", cex=2, bty='n')#
#
plot(xls$time, xls[,'P.Mnan.Abundance'], pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(0,500))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=format(seq(xlim[1],xlim[2],by=60*60*4),"%H:%M"), las=2)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
plotCI(xls$time, xls[,'P.Mnan.Abundance'], xls[,'SEM.P.Mnan.Abundance'], sfrac=0, col='grey', lwd=2, pch=NA, add=T)#
points(xls$time, xls[,'P.Mnan.Abundance'],col='darkblue', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("P/MNAN Abundance (cells mL"^{-1},")")),2,3)#
text(xlim[1],450,"c", cex=2, bty='n')#
#
dev.off()#
## FIG. 3#
png("Fig3.png",width=6, height=6*1.5, unit='in', res=400)#
#
par(mfrow=c(3,1), cex=1, mar=c(0.5,4,1,1),pty='m', oma=c(4,1,1,1))#
#
plot(xls$time, xls[,'Total.Nano.Uptake'], pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(0,30))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
polygon(x=nights, y=rep(c(-10,100,100,-10,-10),5), col='grey90',border=NA)#
plotCI(xls$time, xls[,'Total.Nano.Uptake'],xls[,'SEM.Total.Nano.Uptake'],sfrac=0, col='grey',lwd=2,add=T)#
points(xls$time, xls[,'Total.Nano.Uptake'],col='magenta3', pch=16,type='o')#
# lines(xls$time, xls[,'Total.Nano.Uptake']+xls[,'SEM.Total.Nano.Uptake'],col='grey',lwd=2)#
# lines(xls$time, xls[,'Total.Nano.Uptake']-xls[,'SEM.Total.Nano.Uptake'],col='grey',lwd=2)#
mtext("Percent of TNAN \n with ingested FLB (%)",2,3)#
box(col='black')#
text(xlim[1],27,"a", cex=2, bty='n')#
#
plot(xls$time, xls[,'Hnan.Uptake'], pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(0,30))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
polygon(x=nights, y=rep(c(-10,100,100,-10,-10),5), col='grey90',border=NA)#
plotCI(xls$time, xls[,'Hnan.Uptake'],xls[,'SEM.Hnan.Uptake'],sfrac=0, col='grey',lwd=2,add=T)#
points(xls$time, xls[,'Hnan.Uptake'],col='purple', pch=16,type='o')#
# lines(xls$time, xls[,'Hnan.Uptake']+xls[,'SEM.Hnan.Uptake'],col='grey',lwd=2)#
# lines(xls$time, xls[,'Hnan.Uptake']-xls[,'SEM.Hnan.Uptake'],col='grey',lwd=2)#
mtext("Percent of HNAN \n with ingested FLB (%)",2,3)#
box(col='black')#
text(xlim[1],27,"b", cex=2, bty='n')#
#
plot(xls$time, xls[,'P.Mnan.Uptake'], pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(0,30))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=format(seq(xlim[1],xlim[2],by=60*60*4),"%H:%M"), las=2)#
polygon(x=nights, y=rep(c(-10,100,100,-10,-10),5), col='grey90',border=NA)#
plotCI(xls$time, xls[,'P.Mnan.Uptake'],xls[,'SEM.P.Mnan.Uptake'],sfrac=0, col='grey',lwd=2,add=T)#
points(xls$time, xls[,'P.Mnan.Uptake'],col='darkblue', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Uptake']+xls[,'SEM.P.Mnan.Uptake'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Uptake']-xls[,'SEM.P.Mnan.Uptake'],col='grey',lwd=2)#
mtext("Percent of P/MNAN \n with ingested FLB (%)",2,3)#
box(col='black')#
text(xlim[1],27,"c", cex=2, bty='n')#
dev.off()#
# ## FIG. 3#
# png("Fig3old.png",width=6, height=6, unit='in', res=100)#
##
# par(mfrow=c(2,1), cex=1, mar=c(2,4,1,4),pty='m', oma=c(1,1,1,1))#
# plot(s.time, biomass.pro, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(0,12))#
# axis(2)#
# axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
# polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
# arrows(s.time, biomass.pro.2.5, s.time, biomass.pro.97.5,  code = 3, length=0, col='grey', lwd=2)#
# points(s.time, biomass.pro, lwd=2, col='green4',type='l')#
# # lines(s.time, biomass.pro.97.5 , lwd=2, col='grey')#
# # lines(s.time, biomass.pro.2.5, lwd=2, col='grey')#
# box(col='black')#
# mtext(expression(paste("PRO biomass (µgC L"^{-1},")")),2,3)#
##
# plot(s.time, biomass.syn, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(0,0.8))#
# axis(2)#
# axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=format(seq(xlim[1],xlim[2],by=60*60*4),"%H:%M"))#
# polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
# arrows(s.time, biomass.syn.2.5, s.time, biomass.syn.97.5,  code = 3, length=0, col='grey', lwd=2)#
# points(s.time, biomass.syn, lwd=2, col='red3',type='l')#
# # lines(s.time, biomass.syn.97.5 , lwd=2, col='grey')#
# # lines(s.time, biomass.syn.2.5, lwd=2, col='grey')#
# box(col='black')#
# mtext(expression(paste("SYN biomass (µgC L"^{-1},")")),2,3)#
##
# dev.off()#
## FIG. 4#
png("Fig4.png",width=6, height=6, unit='in', res=400)#
#
par(mfrow=c(2,1), cex=1, mar=c(0.5,4,1,4),pty='m', oma=c(4,1,1,1))#
#
plot(xls$time, xls[,'Hnan.Uptake'], pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(0,30))#
axis(4,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
polygon(x=nights, y=rep(c(-10,100,100,-10,-10),5), col='grey90',border=NA)#
plotCI(xls$time, xls[,'Hnan.Uptake'],xls[,'SEM.Hnan.Uptake'],sfrac=0, col='grey',lwd=2,add=T)#
points(xls$time, xls[,'Hnan.Uptake'],col='purple', pch=16,type='o')#
par(new=T)#
plotCI(s.time, biomass.pro.97.5 ,biomass.pro.sd*1.96, xlim=xlim , xaxt='n',col='grey', lwd=2, sfrac=0, pch=NA,ylab=NA, xlab=NA, ylim=c(3,10), las=1)#
points(s.time, biomass.pro.97.5, pch=16, type='o', col='green4',lwd=2)#
text(xlim[1],9.2,"a", cex=2, bty='n')#
mtext("Percent of HNAN \n with ingested FLB (%)",4,3)#
mtext(expression(paste("PRO biomass (µgC L"^{-1},")")),2,3)#
box(col='black')#
#
plot(xls$time, xls[,'Hnan.Uptake'], pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(0,30))#
axis(4,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=format(seq(xlim[1],xlim[2],by=60*60*4),"%H:%M"),las=2)#
polygon(x=nights, y=rep(c(-10,100,100,-10,-10),5), col='grey90',border=NA)#
plotCI(xls$time, xls[,'Hnan.Uptake'],xls[,'SEM.Hnan.Uptake'],sfrac=0, col='grey',lwd=2,add=T)#
points(xls$time, xls[,'Hnan.Uptake'],col='purple', pch=16,type='o')#
par(new=T)#
plotCI(s.time, biomass.syn ,biomass.syn.sd, xlim=xlim , xaxt='n',col='grey', lwd=2, sfrac=0, pch=NA,ylab=NA, xlab=NA, ylim=c(0.1,0.35),las=1)#
points(s.time, biomass.syn, pch=16, type='o', col='red3',lwd=2)#
mtext("Percent of HNAN \n with ingested FLB (%)",4,3)#
mtext(expression(paste("SYN biomass (µgC L"^{-1},")")),2,3)#
text(xlim[1],0.32,"b", cex=2, bty='n')#
box(col='black')#
#
dev.off()#
## FIG. S1#
png("FigS1.png",width=6, height=6, unit='in', res=400)#
#
par(mfrow=c(2,1), cex=1, mar=c(0.5,4,1,4),pty='m', oma=c(4,1,1,1))#
#
plotCI(s.time, biomass.pro.97.5 ,biomass.pro.sd*1.96, xlim=xlim , xaxt='n',col='grey', lwd=2, sfrac=0, pch=NA,ylab=NA, xlab=NA, ylim=c(3,10), las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=format(seq(xlim[1],xlim[2],by=60*60*4),"%H:%M"),las=2)#
polygon(x=nights, y=rep(c(-10,100,100,-10,-10),5), col='grey90',border=NA)#
points(s.time, biomass.pro.97.5, pch=16, type='o', col='green4',lwd=2)#
box(col='black')#
mtext(expression(paste("PRO biomass (µgC L"^{-1},")")),2,3)#
#
points(s.time[c(14,25,37,49,62,71,84,95)], biomass.pro.97.5[c(14,25,37,49,62,71,84,95)],col=c('red',"blue"),pch=16,cex=1.5)#
#
dev.off()
xls <- read.csv("ConnellDielData013017.csv")
head(xls)
plot(xls$time, xls$Temperature, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(26,28))
xls <- read.csv("ConnellDielData013017.csv")#
xls$Time <- format(xls$Time, format="%T")#
xls$time <- as.POSIXct(paste(xls$Date, xls$Time), format="%m/%d/%y %H:%M", tz='HST')#
xlim <- range(xls$time, na.rm=T)
plot(xls$time, xls$Temperature, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(26,28))
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)
par(mfrow=c(2,2))#
plot(xls$time, xls$Temperature, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(26,28))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)
par(mfrow=c(2,2))#
plot(xls$time, xls$Temperature, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(26,28))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Temperature,col='cyan2', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Temperature (C)")),2,3)#
text(xlim[1],28,"a", cex=2, bty='n')
points(xls$time, xls$Temperature,col='darkcyan', pch=16,type='o')
par(mfrow=c(2,2))#
plot(xls$time, xls$Temperature, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(26,28))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Temperature,col='darkcyan', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Temperature (C)")),2,3)#
text(xlim[1],28,"a", cex=2, bty='n')
plot(xls$time, xls$Temperature, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(26,28))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Temperature,col='cyan3', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Temperature (C)")),2,3)#
text(xlim[1],28,"a", cex=2, bty='n')
par(mfrow=c(2,2))#
plot(xls$time, xls$Temperature, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(26,28))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Temperature,col='deepskyblue', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Temperature (C)")),2,3)#
text(xlim[1],28,"a", cex=2, bty='n')
points(xls$time, xls$Temperature,col='deepskyblue3', pch=16,type='o')
plot(xls$time, xls$Salinity, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(26,28))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Salinity,col='darkorchid4', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Salinity (psu)")),2,3)#
text(xlim[1],28,"b", cex=2, bty='n')
par(mfrow=c(2,2))#
plot(xls$time, xls$Temperature, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(26,28))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Temperature,col='deepskyblue3', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Temperature (C)")),2,3)#
text(xlim[1],28,"a", cex=2, bty='n')#
#
plot(xls$time, xls$Salinity, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(35,35.5))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Salinity,col='darkorchid4', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Salinity (psu)")),2,3)#
text(xlim[1],35.5,"b", cex=2, bty='n')
par(mfrow=c(2,2))#
plot(xls$time, xls$Temperature, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(26,28))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Temperature,col='deepskyblue3', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Temperature (C)")),2,3)#
text(xlim[1],28,"a", cex=2, bty='n')#
#
plot(xls$time, xls$Salinity, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(35,35.5))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Salinity,col='darkorchid4', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Salinity (psu)")),2,3)#
text(xlim[1],35.5,"b", cex=2, bty='n')#
#
plot(xls$time, xls$Dissolved.Oxygen, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(208,215))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Dissolved.Oxygen,col='orange', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Dissolved Oxygen (mg L"^{-1},")")),2,3)#
text(xlim[1],215,"c", cex=2, bty='n')#
#
plot(xls$time, xls$Chlorophyll.a, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(0,0.3))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Chlorophyll.a,col='darkgreen', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Chlorophyll a (µgC L"^{-1},")")),2,3)#
text(xlim[1],0.3,"d", cex=2, bty='n')
par(mfrow=c(2,2))#
plot(xls$time, xls$Temperature, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(26,28))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Temperature,col='deepskyblue3', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Temperature (C)")),2,3)#
text(xlim[1],28,"a", cex=2, bty='n')#
#
plot(xls$time, xls$Salinity, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(35,35.5))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Salinity,col='darkorchid4', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Salinity (psu)")),2,3)#
text(xlim[1],35.5,"b", cex=2, bty='n')#
#
plot(xls$time, xls$Dissolved.Oxygen, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(208,215))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=format(seq(xlim[1],xlim[2],by=60*60*4),"%H:%M"),las=2)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Dissolved.Oxygen,col='orange', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Dissolved Oxygen (mg L"^{-1},")")),2,3)#
text(xlim[1],215,"c", cex=2, bty='n')#
#
plot(xls$time, xls$Chlorophyll.a, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(0,0.3))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=format(seq(xlim[1],xlim[2],by=60*60*4),"%H:%M"),las=2)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Chlorophyll.a,col='darkgreen', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Chlorophyll a (µgC L"^{-1},")")),2,3)#
text(xlim[1],0.3,"d", cex=2, bty='n')
par(mfrow=c(2,2))#
plot(xls$time, xls$Temperature, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(26,28))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Temperature,col='deepskyblue3', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Temperature (C)")),2,3)#
text(xlim[1],28,"a", cex=2, bty='n')#
#
plot(xls$time, xls$Salinity, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(35,35.5))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Salinity,col='darkorchid4', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Salinity (psu)")),2,3)#
text(xlim[1],35.5,"b", cex=2, bty='n')#
#
plot(xls$time, xls$Dissolved.Oxygen, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(208,215))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=format(seq(xlim[1],xlim[2],by=60*60*4),"%H:%M"),las=2)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Dissolved.Oxygen,col='darkorange', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Dissolved Oxygen (mg L"^{-1},")")),2,3)#
text(xlim[1],215,"c", cex=2, bty='n')#
#
plot(xls$time, xls$Chlorophyll.a, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(0,0.3))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=format(seq(xlim[1],xlim[2],by=60*60*4),"%H:%M"),las=2)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Chlorophyll.a,col='darkgreen', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Chlorophyll a (µgC L"^{-1},")")),2,3)#
text(xlim[1],0.3,"d", cex=2, bty='n')
par(mfrow=c(2,2), mar=c(1,3,0,1))#
plot(xls$time, xls$Temperature, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(26,28))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Temperature,col='deepskyblue3', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Temperature (C)")),2,3)#
text(xlim[1],28,"a", cex=2, bty='n')#
#
plot(xls$time, xls$Salinity, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(35,35.5))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Salinity,col='darkorchid4', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Salinity (psu)")),2,3)#
text(xlim[1],35.5,"b", cex=2, bty='n')#
#
plot(xls$time, xls$Dissolved.Oxygen, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(208,215))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=format(seq(xlim[1],xlim[2],by=60*60*4),"%H:%M"),las=2)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Dissolved.Oxygen,col='darkorange', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Dissolved Oxygen (mg L"^{-1},")")),2,3)#
text(xlim[1],215,"c", cex=2, bty='n')#
#
plot(xls$time, xls$Chlorophyll.a, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(0,0.3))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=format(seq(xlim[1],xlim[2],by=60*60*4),"%H:%M"),las=2)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Chlorophyll.a,col='darkgreen', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Chlorophyll a (µgC L"^{-1},")")),2,3)#
text(xlim[1],0.3,"d", cex=2, bty='n')
par(mfrow=c(2,2), cex=1, mar=c(0.5,4,1,4),pty='m', oma=c(4,1,1,1))#
#
plot(xls$time, xls$Temperature, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(26,28))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Temperature,col='deepskyblue3', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Temperature (C)")),2,3)#
text(xlim[1],28,"a", cex=2, bty='n')#
#
plot(xls$time, xls$Salinity, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(35,35.5))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Salinity,col='darkorchid4', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Salinity (psu)")),2,3)#
text(xlim[1],35.5,"b", cex=2, bty='n')#
#
plot(xls$time, xls$Dissolved.Oxygen, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(208,215))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=format(seq(xlim[1],xlim[2],by=60*60*4),"%H:%M"),las=2)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Dissolved.Oxygen,col='darkorange', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Dissolved Oxygen (mg L"^{-1},")")),2,3)#
text(xlim[1],215,"c", cex=2, bty='n')#
#
plot(xls$time, xls$Chlorophyll.a, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(0,0.3))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=format(seq(xlim[1],xlim[2],by=60*60*4),"%H:%M"),las=2)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Chlorophyll.a,col='darkgreen', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Chlorophyll a (µgC L"^{-1},")")),2,3)#
text(xlim[1],0.3,"d", cex=2, bty='n')
## FIG. S1#
png("FigS1.png",width=6, height=6, unit='in', res=400)#
#
par(mfrow=c(2,2), cex=1, mar=c(0.5,4,1,4),pty='m', oma=c(4,1,1,1))#
#
plot(xls$time, xls$Temperature, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(26,28))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Temperature,col='deepskyblue3', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Temperature (C)")),2,3)#
text(xlim[1],28,"a", cex=2, bty='n')#
#
plot(xls$time, xls$Salinity, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(35,35.5))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Salinity,col='darkorchid4', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Salinity (psu)")),2,3)#
text(xlim[1],35.5,"b", cex=2, bty='n')#
#
plot(xls$time, xls$Dissolved.Oxygen, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(208,215))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=format(seq(xlim[1],xlim[2],by=60*60*4),"%H:%M"),las=2)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Dissolved.Oxygen,col='darkorange', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Dissolved Oxygen (mg L"^{-1},")")),2,3)#
text(xlim[1],215,"c", cex=2, bty='n')#
#
plot(xls$time, xls$Chlorophyll.a, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(0,0.3))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=format(seq(xlim[1],xlim[2],by=60*60*4),"%H:%M"),las=2)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Chlorophyll.a,col='darkgreen', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Chlorophyll a (µgC L"^{-1},")")),2,3)#
text(xlim[1],0.3,"d", cex=2, bty='n')#
#
dev.off()#
## FIG. S2#
png("FigS2.png",width=6, height=6, unit='in', res=400)#
#
par(mfrow=c(2,1), cex=1, mar=c(0.5,4,1,4),pty='m', oma=c(4,1,1,1))#
#
plotCI(s.time, biomass.pro.97.5 ,biomass.pro.sd*1.96, xlim=xlim , xaxt='n',col='grey', lwd=2, sfrac=0, pch=NA,ylab=NA, xlab=NA, ylim=c(3,10), las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=format(seq(xlim[1],xlim[2],by=60*60*4),"%H:%M"),las=2)#
polygon(x=nights, y=rep(c(-10,100,100,-10,-10),5), col='grey90',border=NA)#
points(s.time, biomass.pro.97.5, pch=16, type='o', col='green4',lwd=2)#
box(col='black')#
mtext(expression(paste("PRO biomass (µgC L"^{-1},")")),2,3)#
#
points(s.time[c(14,25,37,49,62,71,84,95)], biomass.pro.97.5[c(14,25,37,49,62,71,84,95)],col=c('red',"blue"),pch=16,cex=1.5)#
#
dev.off()
## FIG. S1#
png("FigS1.png",width=6*2, height=6, unit='in', res=400)#
#
par(mfrow=c(2,2), cex=1, mar=c(0.5,4,1,4),pty='m', oma=c(4,1,1,1))#
#
plot(xls$time, xls$Temperature, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(26,28))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Temperature,col='deepskyblue3', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Temperature (C)")),2,3)#
text(xlim[1],28,"a", cex=2, bty='n')#
#
plot(xls$time, xls$Salinity, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(35,35.5))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Salinity,col='darkorchid4', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Salinity (psu)")),2,3)#
text(xlim[1],35.5,"b", cex=2, bty='n')#
#
plot(xls$time, xls$Dissolved.Oxygen, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(208,215))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=format(seq(xlim[1],xlim[2],by=60*60*4),"%H:%M"),las=2)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Dissolved.Oxygen,col='darkorange', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Dissolved Oxygen (mg L"^{-1},")")),2,3)#
text(xlim[1],215,"c", cex=2, bty='n')#
#
plot(xls$time, xls$Chlorophyll.a, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(0,0.3))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=format(seq(xlim[1],xlim[2],by=60*60*4),"%H:%M"),las=2)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Chlorophyll.a,col='darkgreen', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Chlorophyll a (µgC L"^{-1},")")),2,3)#
text(xlim[1],0.3,"d", cex=2, bty='n')#
#
dev.off()
## FIG. S1#
png("FigS1.png",width=6*1.5, height=6, unit='in', res=400)#
#
par(mfrow=c(2,2), cex=1, mar=c(0.5,4,1,4),pty='m', oma=c(4,1,1,1))#
#
plot(xls$time, xls$Temperature, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(26,28))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Temperature,col='deepskyblue3', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Temperature (C)")),2,3)#
text(xlim[1],28,"a", cex=2, bty='n')#
#
plot(xls$time, xls$Salinity, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(35,35.5))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Salinity,col='darkorchid4', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Salinity (psu)")),2,3)#
text(xlim[1],35.5,"b", cex=2, bty='n')#
#
plot(xls$time, xls$Dissolved.Oxygen, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(208,215))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=format(seq(xlim[1],xlim[2],by=60*60*4),"%H:%M"),las=2)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Dissolved.Oxygen,col='darkorange', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Dissolved Oxygen (mg L"^{-1},")")),2,3)#
text(xlim[1],215,"c", cex=2, bty='n')#
#
plot(xls$time, xls$Chlorophyll.a, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(0,0.3))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=format(seq(xlim[1],xlim[2],by=60*60*4),"%H:%M"),las=2)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Chlorophyll.a,col='darkgreen', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Chlorophyll a (µgC L"^{-1},")")),2,3)#
text(xlim[1],0.3,"d", cex=2, bty='n')#
#
dev.off()
## FIG. S1#
png("FigS1.png",width=6*2, height=6, unit='in', res=400)#
#
par(mfrow=c(2,2), cex=1, mar=c(0.5,4,1,4),pty='m', oma=c(4,1,1,1))#
#
plot(xls$time, xls$Temperature, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(26,28))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Temperature,col='deepskyblue3', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Temperature (C)")),2,3)#
text(xlim[1],28,"a", cex=2, bty='n')#
#
plot(xls$time, xls$Salinity, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(35,35.5))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Salinity,col='darkorchid4', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Salinity (psu)")),2,3)#
text(xlim[1],35.5,"b", cex=2, bty='n')#
#
plot(xls$time, xls$Dissolved.Oxygen, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(208,215))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=format(seq(xlim[1],xlim[2],by=60*60*4),"%H:%M"),las=2)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Dissolved.Oxygen,col='darkorange', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Dissolved Oxygen (mg L"^{-1},")")),2,3)#
text(xlim[1],215,"c", cex=2, bty='n')#
#
plot(xls$time, xls$Chlorophyll.a, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(0,0.3))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=format(seq(xlim[1],xlim[2],by=60*60*4),"%H:%M"),las=2)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Chlorophyll.a,col='darkgreen', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Chlorophyll a (µgC L"^{-1},")")),2,3)#
text(xlim[1],0.3,"d", cex=2, bty='n')#
#
dev.off()
## FIG. S1#
png("FigS1.png",width=6*2, height=6, unit='in', res=400)#
#
par(mfrow=c(2,2), cex=1, mar=c(0.5,4,1,4),pty='m', oma=c(4,1,1,1))#
#
plot(xls$time, xls$Temperature, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(26,28))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Temperature,col='deepskyblue3', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Temperature (C)")),2,3)#
text(xlim[1],27.5,"a", cex=2, bty='n')#
#
plot(xls$time, xls$Salinity, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(35,35.5))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Salinity,col='darkorchid4', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Salinity (psu)")),2,3)#
text(xlim[1],35.4,"b", cex=2, bty='n')#
#
plot(xls$time, xls$Dissolved.Oxygen, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(208,215))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=format(seq(xlim[1],xlim[2],by=60*60*4),"%H:%M"),las=2)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Dissolved.Oxygen,col='darkorange', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Dissolved Oxygen (mg L"^{-1},")")),2,3)#
text(xlim[1],212,"c", cex=2, bty='n')#
#
plot(xls$time, xls$Chlorophyll.a, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(0,0.3))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=format(seq(xlim[1],xlim[2],by=60*60*4),"%H:%M"),las=2)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Chlorophyll.a,col='darkgreen', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Chlorophyll a (µgC L"^{-1},")")),2,3)#
text(xlim[1],0.28,"d", cex=2, bty='n')#
#
dev.off()
## FIG. S1#
png("FigS1.png",width=6*2, height=6, unit='in', res=400)#
#
par(mfrow=c(2,2), cex=1, mar=c(0.5,4,1,4),pty='m', oma=c(4,1,1,1))#
#
plot(xls$time, xls$Temperature, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(26,28))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Temperature,col='deepskyblue3', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Temperature (C)")),2,3)#
text(xlim[1],27.75,"a", cex=2, bty='n')#
#
plot(xls$time, xls$Salinity, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(35,35.5))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Salinity,col='darkorchid4', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Salinity (psu)")),2,3)#
text(xlim[1],35.45,"b", cex=2, bty='n')#
#
plot(xls$time, xls$Dissolved.Oxygen, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(208,215))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=format(seq(xlim[1],xlim[2],by=60*60*4),"%H:%M"),las=2)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Dissolved.Oxygen,col='darkorange', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Dissolved Oxygen (mg L"^{-1},")")),2,3)#
text(xlim[1],214,"c", cex=2, bty='n')#
#
plot(xls$time, xls$Chlorophyll.a, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(0,0.3))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=format(seq(xlim[1],xlim[2],by=60*60*4),"%H:%M"),las=2)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Chlorophyll.a,col='darkgreen', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Chlorophyll a (µgC L"^{-1},")")),2,3)#
text(xlim[1],0.28,"d", cex=2, bty='n')#
#
dev.off()
## FIG. S1#
png("FigS1.png",width=6*2, height=6, unit='in', res=400)#
#
par(mfrow=c(2,2), cex=1, mar=c(0.5,4,1,4),pty='m', oma=c(4,1,1,1))#
#
plot(xls$time, xls$Temperature, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(26,28))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Temperature,col='deepskyblue3', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Temperature (C)")),2,3)#
text(xlim[1],27.8,"a", cex=2, bty='n')#
#
plot(xls$time, xls$Salinity, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(35,35.5))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Salinity,col='darkorchid4', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Salinity (psu)")),2,3)#
text(xlim[1],35.45,"b", cex=2, bty='n')#
#
plot(xls$time, xls$Dissolved.Oxygen, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(208,215))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=format(seq(xlim[1],xlim[2],by=60*60*4),"%H:%M"),las=2)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Dissolved.Oxygen,col='darkorange', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Dissolved Oxygen (mg L"^{-1},")")),2,3)#
text(xlim[1],214.3,"c", cex=2, bty='n')#
#
plot(xls$time, xls$Chlorophyll.a, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(0,0.3))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=format(seq(xlim[1],xlim[2],by=60*60*4),"%H:%M"),las=2)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Chlorophyll.a,col='darkgreen', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Chlorophyll a (µgC L"^{-1},")")),2,3)#
text(xlim[1],0.28,"d", cex=2, bty='n')#
#
dev.off()
## FIG. S1#
png("FigS1.png",width=6*2, height=6, unit='in', res=400)#
#
par(mfrow=c(2,2), cex=1, mar=c(0.5,4,1,4),pty='m', oma=c(4,1,1,1))#
#
plot(xls$time, xls$Temperature, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(26,28))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Temperature,col='deepskyblue3', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Temperature (C)")),2,3)#
text(xlim[1],27.8,"a", cex=2, bty='n')#
#
plot(xls$time, xls$Salinity, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(35,35.5))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=NA)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Salinity,col='darkorchid4', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Salinity (psu)")),2,3)#
text(xlim[1],35.45,"b", cex=2, bty='n')#
#
plot(xls$time, xls$Dissolved.Oxygen, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(208,215))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=format(seq(xlim[1],xlim[2],by=60*60*4),"%H:%M"),las=2)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Dissolved.Oxygen,col='darkorange', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Dissolved Oxygen (mg L"^{-1},")")),2,3)#
text(xlim[1],214.3,"c", cex=2, bty='n')#
#
plot(xls$time, xls$Chlorophyll.a, pch=NA, xlim=xlim,yaxt='n',xaxt='n', ylab=NA, xlab=NA, ylim=c(0,0.3))#
axis(2,las=1)#
axis(1, seq(xlim[1],xlim[2],by=60*60*4), labels=format(seq(xlim[1],xlim[2],by=60*60*4),"%H:%M"),las=2)#
polygon(x=nights, y=rep(c(-10,1000,1000,-10,-10),5), col='grey90',border=NA)#
points(xls$time, xls$Chlorophyll.a,col='darkgreen', pch=16,type='o')#
# lines(xls$time, xls[,'P.Mnan.Abundance']+xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
# lines(xls$time, xls[,'P.Mnan.Abundance']-xls[,'SEM.P.Mnan.Abundance'],col='grey',lwd=2)#
box(col='black')#
mtext(expression(paste("Chlorophyll a (µg L"^{-1},")")),2,3)#
text(xlim[1],0.28,"d", cex=2, bty='n')#
#
dev.off()
library(scales)#
library(viridis)#
path.to.git.repository <- "~/Documents/DATA/Codes/mie-theory"#
setwd(path.to.git.repository)#
#
##############################
### scatter normalization ####
##############################
#
beads740 <- read.csv("740-summary.csv")#
beads740$fsc <- 10^((beads740$fsc.corr.high/2^16)*3.5)#
id.740 <- which(beads740$size == 1) # find 1 micron beads#
beads740$normalized.fsc <- beads740$fsc/mean(beads740[id.740,'fsc'])#
beads740 <- beads740[order(beads740$size),]#
#
beads989<- read.csv("989-summary.csv")#
beads989$fsc <- 10^((beads989$fsc.corr.high/2^16)*3.5)#
id.989 <- which(beads989$size == 1) # find 1 micron beads#
beads989$normalized.fsc <- beads989$fsc/mean(beads989[id.989,'fsc'])#
beads989 <- beads989[order(beads989$size),]#
#
beads751 <- read.csv("751-summary.csv")#
beads751$fsc <- 10^((beads751$fsc.corr.high/2^16)*3.5)#
id.751<- which(beads751$size == 1) # find 1 micron beads#
beads751$normalized.fsc <- beads751 $fsc/mean(beads751 [id.751,'fsc'])#
beads751 <- beads751[order(beads751$size),]#
#####################
### OPTIMIZATION ####
#####################
library(DEoptim)#
#
# Mie theory fitting#
# n <- c(1.35/1.3371, 1.41/1.3371) # range given in Lehmuskero et al. Progr Oceanogr 2018#
mie2 <- t(read.csv("meidata-1017.csv" ,header=F)) # low#
mie1 <- t(read.csv("meidata-1031.csv" ,header=F)) # fit#
mie3 <- t(read.csv("meidata-1045.csv" ,header=F)) # high#
mie4 <- t(read.csv("meidata-beads.csv" ,header=F)) # particle of 1 µm, index of refraction of 1.6033#
#
# optimization routine#
sigma.lsq <- function(mie, beads, params){#
#
     c <- params[1]#
     b <- params[2]#
     id <- findInterval(beads$size, mie[,1])#
     scatt <- (mie[id,2]/c)^b#
#
           df <- data.frame(obs=beads$normalized.fsc, pred=scatt)#
      sigma <- mean(((df$obs - df$pred)/df$obs)^2,na.rm=T)#
      return(sigma)#
  }
summary(mie1)
inst <- 740#
#
### Optiomization#
#
if(inst == 740) beads <- beads740#
if(inst == 751) beads <- beads751#
if(inst == 989) beads <- beads989#
#
beads1 <- subset(beads,  size > 0.3) # run to test optimzation across range of particle size, except 0.3 microns beads not properly analyzed.#
#
f <- function(params) sigma.lsq(mie=mie4, beads=beads1, params)#
res <- DEoptim(f, lower=c(0,0), upper=c(10000,2), control=DEoptim.control(itermax=1000, reltol=1e-8,trace=100, steptol=100, strategy=2, parallelType=0))#
print(res$optim$bestval)#
params <- res$optim$bestmem # optimized 'c' and 'b' values#
print(params)#
### CREATE LOOKUP TABLE#
#d <- 0.220; e <- 1 # LINEAR Shalapyonok et al. 2001; 0.220 (Li et al. 1992, Veldhuis et al. 2004, and more studies agreed with 220 fg C um-3)#
#d <- 0.54; e <- 0.85 # EXPO Roy, S., Sathyendranath, S. & Platt, T. Size-partitioned phytoplankton carbon and carbon-to-chlorophyll ratio from ocean colour by an absorption-based bio-optical algorithm. Remote Sens. Environ. 194, 177–189 (2017).#
d <- 0.216; e <- 0.939 # EXPO Roy, 1. Menden-Deuer, S. & Lessard, E. J. Carbon to volume relationships for dinoflagellates, diatoms, and other protist plankton. Limnol. Oceanogr. 45, 569–579 (2000).#
#
max.scatter <- 20#
min.scatter <- 0.00001#
#
b <- params[2]#
c <- params[1]#
scatter <- 10^(seq(log10(min(mie1[,2]/c)), log10(max(mie3[,2]/c)),length.out=10000))
s1 <- approx((mie1[,2]/c)^b, mie1[,1], xout=scatter)
summary(s1)
s1
max.scatter <- 100#
min.scatter <- 0.00001#
#
b <- params[2]#
c <- params[1]#
scatter <- 10^(seq(log10(min(mie1[,2]/c)), log10(max(mie3[,2]/c)),length.out=10000))#
#
s1 <- approx((mie1[,2]/c)^b, mie1[,1], xout=scatter)
summary(s1)
s1
par(mfrow=c(1,3), pty='s', cex=1.2)#
#
for(inst in c(740,751,989)){#
#
# inst <- 740#
#
### Optiomization#
#
if(inst == 740) beads <- beads740#
if(inst == 751) beads <- beads751#
if(inst == 989) beads <- beads989#
#
beads1 <- subset(beads,  size > 0.3) # run to test optimzation across range of particle size, except 0.3 microns beads not properly analyzed.#
#
f <- function(params) sigma.lsq(mie=mie4, beads=beads1, params)#
res <- DEoptim(f, lower=c(0,0), upper=c(10000,2), control=DEoptim.control(itermax=1000, reltol=1e-8,trace=100, steptol=100, strategy=2, parallelType=0))#
print(res$optim$bestval)#
params <- res$optim$bestmem # optimized 'c' and 'b' values#
print(params)#
### CREATE LOOKUP TABLE#
#d <- 0.220; e <- 1 # LINEAR Shalapyonok et al. 2001; 0.220 (Li et al. 1992, Veldhuis et al. 2004, and more studies agreed with 220 fg C um-3)#
#d <- 0.54; e <- 0.85 # EXPO Roy, S., Sathyendranath, S. & Platt, T. Size-partitioned phytoplankton carbon and carbon-to-chlorophyll ratio from ocean colour by an absorption-based bio-optical algorithm. Remote Sens. Environ. 194, 177–189 (2017).#
d <- 0.216; e <- 0.939 # EXPO Roy, 1. Menden-Deuer, S. & Lessard, E. J. Carbon to volume relationships for dinoflagellates, diatoms, and other protist plankton. Limnol. Oceanogr. 45, 569–579 (2000).#
#
max.scatter <- 100#
min.scatter <- 0.00001#
#
b <- params[2]#
c <- params[1]#
scatter <- 10^(seq(log10(min(mie1[,2]/c)), log10(max(mie3[,2]/c)),length.out=10000))#
#
s1 <- approx((mie1[,2]/c)^b, mie1[,1], xout=scatter)#
s2 <- approx((mie2[,2]/c)^b, mie2[,1], xout=scatter)#
s3 <- approx((mie3[,2]/c)^b, mie3[,1], xout=scatter)#
s4 <- approx((mie1[,2]/c)^b, d*(4/3*pi*(0.5*mie1[,1])^3)^e, xout=scatter)#
s5 <- approx((mie2[,2]/c)^b, d*(4/3*pi*(0.5*mie2[,1])^3)^e, xout=scatter)#
s6 <- approx((mie3[,2]/c)^b, d*(4/3*pi*(0.5*mie3[,1])^3)^e, xout=scatter)#
#
		if(inst == 740){mie_740 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_740_mid=s1$y,diam_740_upr=s2$y,diam_740_lwr = s3$y,#
                                                  Qc_740_mid=s4$y, Qc_740_upr=s5$y, Qc_740_lwr=s6$y))#
                      	mie_740 <- subset(mie_740, scatter >= min.scatter & scatter <= max.scatter)#
                     	}#
#
        if(inst == 751){mie_751 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_751_mid=s1$y,diam_751_upr=s2$y,diam_751_lwr = s3$y,#
                                                  Qc_751_mid=s4$y, Qc_751_upr=s5$y, Qc_751_lwr=s6$y))#
                      	mie_751 <- subset(mie_751, scatter >= min.scatter & scatter <= max.scatter)#
                      	}#
	    if(inst == 989){mie_989 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_989_mid=s1$y,diam_989_upr=s2$y,diam_989_lwr = s3$y,#
                                                  Qc_989_mid=s4$y, Qc_989_upr=s5$y, Qc_989_lwr=s6$y))#
                      	mie_989 <- subset(mie_989, scatter >= min.scatter & scatter <= max.scatter)#
						}#
#
plot(beads$normalized.fsc, beads$size,log='xy', xaxt='n',xlim=c(0.002,10), ylim=c(0.2,20), bg=alpha(viridis(nrow(beads)),0.5),cex=2, pch=21, xlab="Normalized scatter (dimensionless)", ylab="Cell diameter (µm)", las=1, main=paste(inst))#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5))#
axis(2, at=c(0.1,0.2,0.5,1,2,5,10,20),las=1)#
lines((mie4[,2]/c)^b, mie4[,1], col='red3')#
legend("topleft",cex=0.5, legend=c(paste(unique(beads$size), 'µm-beads'), "Mie-based model (n = 1.6003)"), bty='n', pch=c(rep(21,nrow(beads)/2), NA), lwd=c(rep(NA,nrow(beads)/2), 2),col=c(rep(1,nrow(beads)/2),'red3'), pt.bg=alpha(c(viridis(nrow(beads)/2), 'red3'),0.5))#
#
}
mie <- data.frame(cbind(mie_740[,], mie_751[,-1], mie_989[,-1]))
mie_740[,]
par(mfrow=c(1,3), pty='s', cex=1.2)#
#
for(inst in c(740,751,989)){#
#
# inst <- 740#
#
### Optiomization#
#
if(inst == 740) beads <- beads740#
if(inst == 751) beads <- beads751#
if(inst == 989) beads <- beads989#
#
beads1 <- subset(beads,  size > 0.3) # run to test optimzation across range of particle size, except 0.3 microns beads not properly analyzed.#
#
f <- function(params) sigma.lsq(mie=mie4, beads=beads1, params)#
res <- DEoptim(f, lower=c(0,0), upper=c(10000,2), control=DEoptim.control(itermax=1000, reltol=1e-8,trace=100, steptol=100, strategy=2, parallelType=0))#
print(res$optim$bestval)#
params <- res$optim$bestmem # optimized 'c' and 'b' values#
print(params)#
### CREATE LOOKUP TABLE#
#d <- 0.220; e <- 1 # LINEAR Shalapyonok et al. 2001; 0.220 (Li et al. 1992, Veldhuis et al. 2004, and more studies agreed with 220 fg C um-3)#
#d <- 0.54; e <- 0.85 # EXPO Roy, S., Sathyendranath, S. & Platt, T. Size-partitioned phytoplankton carbon and carbon-to-chlorophyll ratio from ocean colour by an absorption-based bio-optical algorithm. Remote Sens. Environ. 194, 177–189 (2017).#
d <- 0.216; e <- 0.939 # EXPO Roy, 1. Menden-Deuer, S. & Lessard, E. J. Carbon to volume relationships for dinoflagellates, diatoms, and other protist plankton. Limnol. Oceanogr. 45, 569–579 (2000).#
#
max.scatter <- 50#
min.scatter <- 0.00001#
#
b <- params[2]#
c <- params[1]#
scatter <- 10^(seq(log10(min(mie1[,2]/c)), log10(max(mie3[,2]/c)),length.out=10000))#
#
s1 <- approx((mie1[,2]/c)^b, mie1[,1], xout=scatter)#
s2 <- approx((mie2[,2]/c)^b, mie2[,1], xout=scatter)#
s3 <- approx((mie3[,2]/c)^b, mie3[,1], xout=scatter)#
s4 <- approx((mie1[,2]/c)^b, d*(4/3*pi*(0.5*mie1[,1])^3)^e, xout=scatter)#
s5 <- approx((mie2[,2]/c)^b, d*(4/3*pi*(0.5*mie2[,1])^3)^e, xout=scatter)#
s6 <- approx((mie3[,2]/c)^b, d*(4/3*pi*(0.5*mie3[,1])^3)^e, xout=scatter)#
#
		if(inst == 740){mie_740 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_740_mid=s1$y,diam_740_upr=s2$y,diam_740_lwr = s3$y,#
                                                  Qc_740_mid=s4$y, Qc_740_upr=s5$y, Qc_740_lwr=s6$y))#
                      	mie_740 <- subset(mie_740, scatter >= min.scatter & scatter <= max.scatter)#
                     	}#
#
        if(inst == 751){mie_751 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_751_mid=s1$y,diam_751_upr=s2$y,diam_751_lwr = s3$y,#
                                                  Qc_751_mid=s4$y, Qc_751_upr=s5$y, Qc_751_lwr=s6$y))#
                      	mie_751 <- subset(mie_751, scatter >= min.scatter & scatter <= max.scatter)#
                      	}#
	    if(inst == 989){mie_989 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_989_mid=s1$y,diam_989_upr=s2$y,diam_989_lwr = s3$y,#
                                                  Qc_989_mid=s4$y, Qc_989_upr=s5$y, Qc_989_lwr=s6$y))#
                      	mie_989 <- subset(mie_989, scatter >= min.scatter & scatter <= max.scatter)#
						}#
#
plot(beads$normalized.fsc, beads$size,log='xy', xaxt='n',xlim=c(0.002,10), ylim=c(0.2,20), bg=alpha(viridis(nrow(beads)),0.5),cex=2, pch=21, xlab="Normalized scatter (dimensionless)", ylab="Cell diameter (µm)", las=1, main=paste(inst))#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5))#
axis(2, at=c(0.1,0.2,0.5,1,2,5,10,20),las=1)#
lines((mie4[,2]/c)^b, mie4[,1], col='red3')#
legend("topleft",cex=0.5, legend=c(paste(unique(beads$size), 'µm-beads'), "Mie-based model (n = 1.6003)"), bty='n', pch=c(rep(21,nrow(beads)/2), NA), lwd=c(rep(NA,nrow(beads)/2), 2),col=c(rep(1,nrow(beads)/2),'red3'), pt.bg=alpha(c(viridis(nrow(beads)/2), 'red3'),0.5))#
#
}
mie <- data.frame(cbind(mie_740[,], mie_751[,-1], mie_989[,-1]))
mie <- data.frame(cbind(mie_740[,], mie_751[,], mie_989[,-1]))
mie <- data.frame(cbind(mie_740[,], mie_751[-1,-1], mie_989[,-1]))
mie <- data.frame(cbind(mie_740[,], mie_751[,-1], mie_989[-1,-1]))
mie <- data.frame(cbind(mie_740[,], mie_751[-1,-1], mie_989[-1,-1]))
mie
mie[c(8154, 8152, 8154, 8155, 8155, 8152, 8156), c('scatter', 'diam_989_lwr', 'diam_989_mid', 'diam_989_upr')]
s3
1.6/1.3371
1.6003/1.3371
1.35/1.3371
1.41/1.3371
1.35/1.3371
1.38/1.3371
1.41/1.3371
library(scales)#
library(viridis)#
path.to.git.repository <- "~/Documents/DATA/Codes/mie-theory"#
setwd(path.to.git.repository)#
#
##############################
### scatter normalization ####
##############################
#
beads740 <- read.csv("740-summary.csv")#
beads740$fsc <- 10^((beads740$fsc.corr.high/2^16)*3.5)#
id.740 <- which(beads740$size == 1) # find 1 micron beads#
beads740$normalized.fsc <- beads740$fsc/mean(beads740[id.740,'fsc'])#
beads740 <- beads740[order(beads740$size),]#
#
beads989<- read.csv("989-summary.csv")#
beads989$fsc <- 10^((beads989$fsc.corr.high/2^16)*3.5)#
id.989 <- which(beads989$size == 1) # find 1 micron beads#
beads989$normalized.fsc <- beads989$fsc/mean(beads989[id.989,'fsc'])#
beads989 <- beads989[order(beads989$size),]#
#
beads751 <- read.csv("751-summary.csv")#
beads751$fsc <- 10^((beads751$fsc.corr.high/2^16)*3.5)#
id.751<- which(beads751$size == 1) # find 1 micron beads#
beads751$normalized.fsc <- beads751 $fsc/mean(beads751 [id.751,'fsc'])#
beads751 <- beads751[order(beads751$size),]#
#####################
### OPTIMIZATION ####
#####################
library(DEoptim)#
#
# Mie theory fitting#
# n for phyto = 1.35- 1.41 # see Lehmuskero et al. Progr Oceanogr 2018#
mie2 <- t(read.csv("meidata-1010.csv" ,header=F)) # low#
mie1 <- t(read.csv("meidata-1032.csv" ,header=F)) # fit#
mie3 <- t(read.csv("meidata-1055.csv" ,header=F)) # high#
mie4 <- t(read.csv("meidata-beads.csv" ,header=F)) # particle of 1 µm, index of refraction of 1.6033#
#
# optimization routine#
sigma.lsq <- function(mie, beads, params){#
#
     c <- params[1]#
     b <- params[2]#
     id <- findInterval(beads$size, mie[,1])#
     scatt <- (mie[id,2]/c)^b#
#
           df <- data.frame(obs=beads$normalized.fsc, pred=scatt)#
      sigma <- mean(((df$obs - df$pred)/df$obs)^2,na.rm=T)#
      return(sigma)#
  }#
#######################################################
#### compare MIE prediction with calibration beads ####
#######################################################
png("Mie-beads-scatter.png",width=12, height=6, unit='in', res=400)#
#
par(mfrow=c(1,3), pty='s', cex=1.2)#
#
for(inst in c(740,751,989)){#
#
# inst <- 740#
#
### Optiomization#
#
if(inst == 740) beads <- beads740#
if(inst == 751) beads <- beads751#
if(inst == 989) beads <- beads989#
#
beads1 <- subset(beads,  size > 0.3) # run to test optimzation across range of particle size, except 0.3 microns beads not properly analyzed.#
#
f <- function(params) sigma.lsq(mie=mie4, beads=beads1, params)#
res <- DEoptim(f, lower=c(0,0), upper=c(10000,2), control=DEoptim.control(itermax=1000, reltol=1e-8,trace=100, steptol=100, strategy=2, parallelType=0))#
print(res$optim$bestval)#
params <- res$optim$bestmem # optimized 'c' and 'b' values#
print(params)#
### CREATE LOOKUP TABLE#
#d <- 0.220; e <- 1 # LINEAR Shalapyonok et al. 2001; 0.220 (Li et al. 1992, Veldhuis et al. 2004, and more studies agreed with 220 fg C um-3)#
#d <- 0.54; e <- 0.85 # EXPO Roy, S., Sathyendranath, S. & Platt, T. Size-partitioned phytoplankton carbon and carbon-to-chlorophyll ratio from ocean colour by an absorption-based bio-optical algorithm. Remote Sens. Environ. 194, 177–189 (2017).#
d <- 0.216; e <- 0.939 # EXPO Roy, 1. Menden-Deuer, S. & Lessard, E. J. Carbon to volume relationships for dinoflagellates, diatoms, and other protist plankton. Limnol. Oceanogr. 45, 569–579 (2000).#
#
max.scatter <- 50#
min.scatter <- 0.00001#
#
b <- params[2]#
c <- params[1]#
scatter <- 10^(seq(log10(min(mie1[,2]/c)), log10(max(mie3[,2]/c)),length.out=10000))#
#
s1 <- approx((mie1[,2]/c)^b, mie1[,1], xout=scatter)#
s2 <- approx((mie2[,2]/c)^b, mie2[,1], xout=scatter)#
s3 <- approx((mie3[,2]/c)^b, mie3[,1], xout=scatter)#
s4 <- approx((mie1[,2]/c)^b, d*(4/3*pi*(0.5*mie1[,1])^3)^e, xout=scatter)#
s5 <- approx((mie2[,2]/c)^b, d*(4/3*pi*(0.5*mie2[,1])^3)^e, xout=scatter)#
s6 <- approx((mie3[,2]/c)^b, d*(4/3*pi*(0.5*mie3[,1])^3)^e, xout=scatter)#
#
		if(inst == 740){mie_740 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_740_mid=s1$y,diam_740_upr=s2$y,diam_740_lwr = s3$y,#
                                                  Qc_740_mid=s4$y, Qc_740_upr=s5$y, Qc_740_lwr=s6$y))#
                      	mie_740 <- subset(mie_740, scatter >= min.scatter & scatter <= max.scatter)#
                     	}#
#
        if(inst == 751){mie_751 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_751_mid=s1$y,diam_751_upr=s2$y,diam_751_lwr = s3$y,#
                                                  Qc_751_mid=s4$y, Qc_751_upr=s5$y, Qc_751_lwr=s6$y))#
                      	mie_751 <- subset(mie_751, scatter >= min.scatter & scatter <= max.scatter)#
                      	}#
	    if(inst == 989){mie_989 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_989_mid=s1$y,diam_989_upr=s2$y,diam_989_lwr = s3$y,#
                                                  Qc_989_mid=s4$y, Qc_989_upr=s5$y, Qc_989_lwr=s6$y))#
                      	mie_989 <- subset(mie_989, scatter >= min.scatter & scatter <= max.scatter)#
						}#
#
plot(beads$normalized.fsc, beads$size,log='xy', xaxt='n',xlim=c(0.002,10), ylim=c(0.2,20), bg=alpha(viridis(nrow(beads)),0.5),cex=2, pch=21, xlab="Normalized scatter (dimensionless)", ylab="Cell diameter (µm)", las=1, main=paste(inst))#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5))#
axis(2, at=c(0.1,0.2,0.5,1,2,5,10,20),las=1)#
lines((mie4[,2]/c)^b, mie4[,1], col='red3')#
legend("topleft",cex=0.5, legend=c(paste(unique(beads$size), 'µm-beads'), "Mie-based model (n = 1.6003)"), bty='n', pch=c(rep(21,nrow(beads)/2), NA), lwd=c(rep(NA,nrow(beads)/2), 2),col=c(rep(1,nrow(beads)/2),'red3'), pt.bg=alpha(c(viridis(nrow(beads)/2), 'red3'),0.5))#
#
}#
#
dev.off()
png("Mie-beads-scatter.png",width=12, height=6, unit='in', res=400)#
#
par(mfrow=c(1,3), pty='s', cex=1.2)#
#
for(inst in c(740,751,989)){#
#
# inst <- 740#
#
### Optiomization#
#
if(inst == 740) beads <- beads740#
if(inst == 751) beads <- beads751#
if(inst == 989) beads <- beads989#
#
#beads1 <- subset(beads,  size > 0.3) # run to test optimzation across range of particle size, except 0.3 microns beads not properly analyzed.#
#
f <- function(params) sigma.lsq(mie=mie4, beads=beads, params)#
res <- DEoptim(f, lower=c(0,0), upper=c(10000,2), control=DEoptim.control(itermax=1000, reltol=1e-8,trace=100, steptol=100, strategy=2, parallelType=0))#
print(res$optim$bestval)#
params <- res$optim$bestmem # optimized 'c' and 'b' values#
print(params)#
### CREATE LOOKUP TABLE#
#d <- 0.220; e <- 1 # LINEAR Shalapyonok et al. 2001; 0.220 (Li et al. 1992, Veldhuis et al. 2004, and more studies agreed with 220 fg C um-3)#
#d <- 0.54; e <- 0.85 # EXPO Roy, S., Sathyendranath, S. & Platt, T. Size-partitioned phytoplankton carbon and carbon-to-chlorophyll ratio from ocean colour by an absorption-based bio-optical algorithm. Remote Sens. Environ. 194, 177–189 (2017).#
d <- 0.216; e <- 0.939 # EXPO Roy, 1. Menden-Deuer, S. & Lessard, E. J. Carbon to volume relationships for dinoflagellates, diatoms, and other protist plankton. Limnol. Oceanogr. 45, 569–579 (2000).#
#
max.scatter <- 50#
min.scatter <- 0.00001#
#
b <- params[2]#
c <- params[1]#
scatter <- 10^(seq(log10(min(mie1[,2]/c)), log10(max(mie3[,2]/c)),length.out=10000))#
#
s1 <- approx((mie1[,2]/c)^b, mie1[,1], xout=scatter)#
s2 <- approx((mie2[,2]/c)^b, mie2[,1], xout=scatter)#
s3 <- approx((mie3[,2]/c)^b, mie3[,1], xout=scatter)#
s4 <- approx((mie1[,2]/c)^b, d*(4/3*pi*(0.5*mie1[,1])^3)^e, xout=scatter)#
s5 <- approx((mie2[,2]/c)^b, d*(4/3*pi*(0.5*mie2[,1])^3)^e, xout=scatter)#
s6 <- approx((mie3[,2]/c)^b, d*(4/3*pi*(0.5*mie3[,1])^3)^e, xout=scatter)#
#
		if(inst == 740){mie_740 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_740_mid=s1$y,diam_740_upr=s2$y,diam_740_lwr = s3$y,#
                                                  Qc_740_mid=s4$y, Qc_740_upr=s5$y, Qc_740_lwr=s6$y))#
                      	mie_740 <- subset(mie_740, scatter >= min.scatter & scatter <= max.scatter)#
                     	}#
#
        if(inst == 751){mie_751 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_751_mid=s1$y,diam_751_upr=s2$y,diam_751_lwr = s3$y,#
                                                  Qc_751_mid=s4$y, Qc_751_upr=s5$y, Qc_751_lwr=s6$y))#
                      	mie_751 <- subset(mie_751, scatter >= min.scatter & scatter <= max.scatter)#
                      	}#
	    if(inst == 989){mie_989 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_989_mid=s1$y,diam_989_upr=s2$y,diam_989_lwr = s3$y,#
                                                  Qc_989_mid=s4$y, Qc_989_upr=s5$y, Qc_989_lwr=s6$y))#
                      	mie_989 <- subset(mie_989, scatter >= min.scatter & scatter <= max.scatter)#
						}#
#
plot(beads$normalized.fsc, beads$size,log='xy', xaxt='n',xlim=c(0.002,10), ylim=c(0.2,20), bg=alpha(viridis(nrow(beads)),0.5),cex=2, pch=21, xlab="Normalized scatter (dimensionless)", ylab="Cell diameter (µm)", las=1, main=paste(inst))#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5))#
axis(2, at=c(0.1,0.2,0.5,1,2,5,10,20),las=1)#
lines((mie4[,2]/c)^b, mie4[,1], col='red3')#
legend("topleft",cex=0.5, legend=c(paste(unique(beads$size), 'µm-beads'), "Mie-based model (n = 1.603)"), bty='n', pch=c(rep(21,nrow(beads)/2), NA), lwd=c(rep(NA,nrow(beads)/2), 2),col=c(rep(1,nrow(beads)/2),'red3'), pt.bg=alpha(c(viridis(nrow(beads)/2), 'red3'),0.5))#
#
}#
#
dev.off()
mie <- data.frame(cbind(mie_740[,], mie_751[,-1], mie_989[,-1]))
mie[c(8154, 8152, 8154, 8155, 8155, 8152, 8156), c('scatter', 'diam_989_lwr', 'diam_989_mid', 'diam_989_upr')]
mie[c(4000), c('scatter', 'diam_989_lwr', 'diam_989_mid', 'diam_989_upr')]
mie[c(7000), c('scatter', 'diam_989_lwr', 'diam_989_mid', 'diam_989_upr')]
mie[c(8000), c('scatter', 'diam_989_lwr', 'diam_989_mid', 'diam_989_upr')]
mie[c(7500), c('scatter', 'diam_989_lwr', 'diam_989_mid', 'diam_989_upr')]
summary(mie)
par(mfrow=c(1,3), pty='s', cex=1.2)#
#
for(inst in c(740,751,989)){#
#
# inst <- 740#
#
### Optiomization#
#
if(inst == 740) beads <- beads740#
if(inst == 751) beads <- beads751#
if(inst == 989) beads <- beads989#
#
#beads1 <- subset(beads,  size > 0.3) # run to test optimzation across range of particle size, except 0.3 microns beads not properly analyzed.#
#
f <- function(params) sigma.lsq(mie=mie4, beads=beads, params)#
res <- DEoptim(f, lower=c(0,0), upper=c(10000,2), control=DEoptim.control(itermax=1000, reltol=1e-8,trace=100, steptol=100, strategy=2, parallelType=0))#
print(res$optim$bestval)#
params <- res$optim$bestmem # optimized 'c' and 'b' values#
print(params)#
### CREATE LOOKUP TABLE#
#d <- 0.220; e <- 1 # LINEAR Shalapyonok et al. 2001; 0.220 (Li et al. 1992, Veldhuis et al. 2004, and more studies agreed with 220 fg C um-3)#
#d <- 0.54; e <- 0.85 # EXPO Roy, S., Sathyendranath, S. & Platt, T. Size-partitioned phytoplankton carbon and carbon-to-chlorophyll ratio from ocean colour by an absorption-based bio-optical algorithm. Remote Sens. Environ. 194, 177–189 (2017).#
d <- 0.216; e <- 0.939 # EXPO Roy, 1. Menden-Deuer, S. & Lessard, E. J. Carbon to volume relationships for dinoflagellates, diatoms, and other protist plankton. Limnol. Oceanogr. 45, 569–579 (2000).#
#
max.scatter <- 50#
min.scatter <- 0.0005#
#
b <- params[2]#
c <- params[1]#
scatter <- 10^(seq(log10(min(mie1[,2]/c)), log10(max(mie3[,2]/c)),length.out=10000))#
#
s1 <- approx((mie1[,2]/c)^b, mie1[,1], xout=scatter)#
s2 <- approx((mie2[,2]/c)^b, mie2[,1], xout=scatter)#
s3 <- approx((mie3[,2]/c)^b, mie3[,1], xout=scatter)#
s4 <- approx((mie1[,2]/c)^b, d*(4/3*pi*(0.5*mie1[,1])^3)^e, xout=scatter)#
s5 <- approx((mie2[,2]/c)^b, d*(4/3*pi*(0.5*mie2[,1])^3)^e, xout=scatter)#
s6 <- approx((mie3[,2]/c)^b, d*(4/3*pi*(0.5*mie3[,1])^3)^e, xout=scatter)#
#
		if(inst == 740){mie_740 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_740_mid=s1$y,diam_740_upr=s2$y,diam_740_lwr = s3$y,#
                                                  Qc_740_mid=s4$y, Qc_740_upr=s5$y, Qc_740_lwr=s6$y))#
                      	mie_740 <- subset(mie_740, scatter >= min.scatter & scatter <= max.scatter)#
                     	}#
#
        if(inst == 751){mie_751 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_751_mid=s1$y,diam_751_upr=s2$y,diam_751_lwr = s3$y,#
                                                  Qc_751_mid=s4$y, Qc_751_upr=s5$y, Qc_751_lwr=s6$y))#
                      	mie_751 <- subset(mie_751, scatter >= min.scatter & scatter <= max.scatter)#
                      	}#
	    if(inst == 989){mie_989 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_989_mid=s1$y,diam_989_upr=s2$y,diam_989_lwr = s3$y,#
                                                  Qc_989_mid=s4$y, Qc_989_upr=s5$y, Qc_989_lwr=s6$y))#
                      	mie_989 <- subset(mie_989, scatter >= min.scatter & scatter <= max.scatter)#
						}#
#
plot(beads$normalized.fsc, beads$size,log='xy', xaxt='n',xlim=c(0.002,10), ylim=c(0.2,20), bg=alpha(viridis(nrow(beads)),0.5),cex=2, pch=21, xlab="Normalized scatter (dimensionless)", ylab="Cell diameter (µm)", las=1, main=paste(inst))#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5))#
axis(2, at=c(0.1,0.2,0.5,1,2,5,10,20),las=1)#
lines((mie4[,2]/c)^b, mie4[,1], col='red3')#
legend("topleft",cex=0.5, legend=c(paste(unique(beads$size), 'µm-beads'), "Mie-based model (n = 1.603)"), bty='n', pch=c(rep(21,nrow(beads)/2), NA), lwd=c(rep(NA,nrow(beads)/2), 2),col=c(rep(1,nrow(beads)/2),'red3'), pt.bg=alpha(c(viridis(nrow(beads)/2), 'red3'),0.5))#
#
}
summary(mie)
10^(seq(log10(min(mie1[,2]/c)), log10(max(mie3[,2]/c)),length.out=10000))
library(DEoptim)#
#
# Mie theory fitting#
# n for phyto = 1.35- 1.41 # see Lehmuskero et al. Progr Oceanogr 2018#
mie2 <- t(read.csv("meidata-1010.csv" ,header=F)) # low#
mie1 <- t(read.csv("meidata-1032.csv" ,header=F)) # fit#
mie3 <- t(read.csv("meidata-1055.csv" ,header=F)) # high#
mie4 <- t(read.csv("meidata-beads.csv" ,header=F)) # particle of 1 µm, index of refraction of 1.6033#
#
# optimization routine#
sigma.lsq <- function(mie, beads, params){#
#
     c <- params[1]#
     b <- params[2]#
     id <- findInterval(beads$size, mie[,1])#
     scatt <- (mie[id,2]/c)^b#
#
           df <- data.frame(obs=beads$normalized.fsc, pred=scatt)#
      sigma <- mean(((df$obs - df$pred)/df$obs)^2,na.rm=T)#
      return(sigma)#
  }
par(mfrow=c(1,3), pty='s', cex=1.2)#
#
for(inst in c(740,751,989)){#
#
# inst <- 740#
#
### Optiomization#
#
if(inst == 740) beads <- beads740#
if(inst == 751) beads <- beads751#
if(inst == 989) beads <- beads989#
#
#beads1 <- subset(beads,  size > 0.3) # run to test optimzation across range of particle size, except 0.3 microns beads not properly analyzed.#
#
f <- function(params) sigma.lsq(mie=mie4, beads=beads, params)#
res <- DEoptim(f, lower=c(0,0), upper=c(10000,2), control=DEoptim.control(itermax=1000, reltol=1e-8,trace=100, steptol=100, strategy=2, parallelType=0))#
print(res$optim$bestval)#
params <- res$optim$bestmem # optimized 'c' and 'b' values#
print(params)#
### CREATE LOOKUP TABLE#
#d <- 0.220; e <- 1 # LINEAR Shalapyonok et al. 2001; 0.220 (Li et al. 1992, Veldhuis et al. 2004, and more studies agreed with 220 fg C um-3)#
#d <- 0.54; e <- 0.85 # EXPO Roy, S., Sathyendranath, S. & Platt, T. Size-partitioned phytoplankton carbon and carbon-to-chlorophyll ratio from ocean colour by an absorption-based bio-optical algorithm. Remote Sens. Environ. 194, 177–189 (2017).#
d <- 0.216; e <- 0.939 # EXPO Roy, 1. Menden-Deuer, S. & Lessard, E. J. Carbon to volume relationships for dinoflagellates, diatoms, and other protist plankton. Limnol. Oceanogr. 45, 569–579 (2000).#
#
max.scatter <- 50#
min.scatter <- 0.0005#
#
b <- params[2]#
c <- params[1]#
scatter <- 10^(seq(log10(min(mie2[,2]/c)), log10(max(mie3[,2]/c)),length.out=10000))#
#
s1 <- approx((mie1[,2]/c)^b, mie1[,1], xout=scatter)#
s2 <- approx((mie2[,2]/c)^b, mie2[,1], xout=scatter)#
s3 <- approx((mie3[,2]/c)^b, mie3[,1], xout=scatter)#
s4 <- approx((mie1[,2]/c)^b, d*(4/3*pi*(0.5*mie1[,1])^3)^e, xout=scatter)#
s5 <- approx((mie2[,2]/c)^b, d*(4/3*pi*(0.5*mie2[,1])^3)^e, xout=scatter)#
s6 <- approx((mie3[,2]/c)^b, d*(4/3*pi*(0.5*mie3[,1])^3)^e, xout=scatter)#
#
		if(inst == 740){mie_740 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_740_mid=s1$y,diam_740_upr=s2$y,diam_740_lwr = s3$y,#
                                                  Qc_740_mid=s4$y, Qc_740_upr=s5$y, Qc_740_lwr=s6$y))#
                      	mie_740 <- subset(mie_740, scatter >= min.scatter & scatter <= max.scatter)#
                     	}#
#
        if(inst == 751){mie_751 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_751_mid=s1$y,diam_751_upr=s2$y,diam_751_lwr = s3$y,#
                                                  Qc_751_mid=s4$y, Qc_751_upr=s5$y, Qc_751_lwr=s6$y))#
                      	mie_751 <- subset(mie_751, scatter >= min.scatter & scatter <= max.scatter)#
                      	}#
	    if(inst == 989){mie_989 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_989_mid=s1$y,diam_989_upr=s2$y,diam_989_lwr = s3$y,#
                                                  Qc_989_mid=s4$y, Qc_989_upr=s5$y, Qc_989_lwr=s6$y))#
                      	mie_989 <- subset(mie_989, scatter >= min.scatter & scatter <= max.scatter)#
						}#
#
plot(beads$normalized.fsc, beads$size,log='xy', xaxt='n',xlim=c(0.002,10), ylim=c(0.2,20), bg=alpha(viridis(nrow(beads)),0.5),cex=2, pch=21, xlab="Normalized scatter (dimensionless)", ylab="Cell diameter (µm)", las=1, main=paste(inst))#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5))#
axis(2, at=c(0.1,0.2,0.5,1,2,5,10,20),las=1)#
lines((mie4[,2]/c)^b, mie4[,1], col='red3')#
legend("topleft",cex=0.5, legend=c(paste(unique(beads$size), 'µm-beads'), "Mie-based model (n = 1.603)"), bty='n', pch=c(rep(21,nrow(beads)/2), NA), lwd=c(rep(NA,nrow(beads)/2), 2),col=c(rep(1,nrow(beads)/2),'red3'), pt.bg=alpha(c(viridis(nrow(beads)/2), 'red3'),0.5))#
#
}
mie <- data.frame(cbind(mie_740[,], mie_751[,-1], mie_989[,-1]))
mie <- data.frame(cbind(mie_740[,], mie_751[-1,-1], mie_989[-1,-1]))
mie <- data.frame(cbind(mie_740[,], mie_751[-1,-1], mie_989[,-1]))
summary(mie)
par(mfrow=c(1,3), pty='s', cex=1.2)#
#
for(inst in c(740,751,989)){#
#
# inst <- 740#
#
### Optiomization#
#
if(inst == 740) beads <- beads740#
if(inst == 751) beads <- beads751#
if(inst == 989) beads <- beads989#
#
#beads1 <- subset(beads,  size > 0.3) # run to test optimzation across range of particle size, except 0.3 microns beads not properly analyzed.#
#
f <- function(params) sigma.lsq(mie=mie4, beads=beads, params)#
res <- DEoptim(f, lower=c(0,0), upper=c(10000,2), control=DEoptim.control(itermax=1000, reltol=1e-8,trace=100, steptol=100, strategy=2, parallelType=0))#
print(res$optim$bestval)#
params <- res$optim$bestmem # optimized 'c' and 'b' values#
print(params)#
### CREATE LOOKUP TABLE#
#d <- 0.220; e <- 1 # LINEAR Shalapyonok et al. 2001; 0.220 (Li et al. 1992, Veldhuis et al. 2004, and more studies agreed with 220 fg C um-3)#
#d <- 0.54; e <- 0.85 # EXPO Roy, S., Sathyendranath, S. & Platt, T. Size-partitioned phytoplankton carbon and carbon-to-chlorophyll ratio from ocean colour by an absorption-based bio-optical algorithm. Remote Sens. Environ. 194, 177–189 (2017).#
d <- 0.216; e <- 0.939 # EXPO Roy, 1. Menden-Deuer, S. & Lessard, E. J. Carbon to volume relationships for dinoflagellates, diatoms, and other protist plankton. Limnol. Oceanogr. 45, 569–579 (2000).#
#
max.scatter <- 20#
min.scatter <- 0.0005#
#
b <- params[2]#
c <- params[1]#
scatter <- 10^(seq(log10(min(mie2[,2]/c)), log10(max(mie3[,2]/c)),length.out=10000))#
#
s1 <- approx((mie1[,2]/c)^b, mie1[,1], xout=scatter)#
s2 <- approx((mie2[,2]/c)^b, mie2[,1], xout=scatter)#
s3 <- approx((mie3[,2]/c)^b, mie3[,1], xout=scatter)#
s4 <- approx((mie1[,2]/c)^b, d*(4/3*pi*(0.5*mie1[,1])^3)^e, xout=scatter)#
s5 <- approx((mie2[,2]/c)^b, d*(4/3*pi*(0.5*mie2[,1])^3)^e, xout=scatter)#
s6 <- approx((mie3[,2]/c)^b, d*(4/3*pi*(0.5*mie3[,1])^3)^e, xout=scatter)#
#
		if(inst == 740){mie_740 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_740_mid=s1$y,diam_740_upr=s2$y,diam_740_lwr = s3$y,#
                                                  Qc_740_mid=s4$y, Qc_740_upr=s5$y, Qc_740_lwr=s6$y))#
                      	mie_740 <- subset(mie_740, scatter >= min.scatter & scatter <= max.scatter)#
                     	}#
#
        if(inst == 751){mie_751 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_751_mid=s1$y,diam_751_upr=s2$y,diam_751_lwr = s3$y,#
                                                  Qc_751_mid=s4$y, Qc_751_upr=s5$y, Qc_751_lwr=s6$y))#
                      	mie_751 <- subset(mie_751, scatter >= min.scatter & scatter <= max.scatter)#
                      	}#
	    if(inst == 989){mie_989 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_989_mid=s1$y,diam_989_upr=s2$y,diam_989_lwr = s3$y,#
                                                  Qc_989_mid=s4$y, Qc_989_upr=s5$y, Qc_989_lwr=s6$y))#
                      	mie_989 <- subset(mie_989, scatter >= min.scatter & scatter <= max.scatter)#
						}#
#
plot(beads$normalized.fsc, beads$size,log='xy', xaxt='n',xlim=c(0.002,10), ylim=c(0.2,20), bg=alpha(viridis(nrow(beads)),0.5),cex=2, pch=21, xlab="Normalized scatter (dimensionless)", ylab="Cell diameter (µm)", las=1, main=paste(inst))#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5))#
axis(2, at=c(0.1,0.2,0.5,1,2,5,10,20),las=1)#
lines((mie4[,2]/c)^b, mie4[,1], col='red3')#
legend("topleft",cex=0.5, legend=c(paste(unique(beads$size), 'µm-beads'), "Mie-based model (n = 1.603)"), bty='n', pch=c(rep(21,nrow(beads)/2), NA), lwd=c(rep(NA,nrow(beads)/2), 2),col=c(rep(1,nrow(beads)/2),'red3'), pt.bg=alpha(c(viridis(nrow(beads)/2), 'red3'),0.5))#
#
}
mie <- data.frame(cbind(mie_740[,], mie_751[,-1], mie_989[,-1]))
mie <- data.frame(cbind(mie_740[,], mie_751[-1,-1], mie_989[,-1]))
summary(mie)
par(mfrow=c(1,3), pty='s', cex=1.2)#
#
for(inst in c(740,751,989)){#
#
# inst <- 740#
#
### Optiomization#
#
if(inst == 740) beads <- beads740#
if(inst == 751) beads <- beads751#
if(inst == 989) beads <- beads989#
#
#beads1 <- subset(beads,  size > 0.3) # run to test optimzation across range of particle size, except 0.3 microns beads not properly analyzed.#
#
f <- function(params) sigma.lsq(mie=mie4, beads=beads, params)#
res <- DEoptim(f, lower=c(0,0), upper=c(10000,2), control=DEoptim.control(itermax=1000, reltol=1e-8,trace=100, steptol=100, strategy=2, parallelType=0))#
print(res$optim$bestval)#
params <- res$optim$bestmem # optimized 'c' and 'b' values#
print(params)#
### CREATE LOOKUP TABLE#
#d <- 0.220; e <- 1 # LINEAR Shalapyonok et al. 2001; 0.220 (Li et al. 1992, Veldhuis et al. 2004, and more studies agreed with 220 fg C um-3)#
#d <- 0.54; e <- 0.85 # EXPO Roy, S., Sathyendranath, S. & Platt, T. Size-partitioned phytoplankton carbon and carbon-to-chlorophyll ratio from ocean colour by an absorption-based bio-optical algorithm. Remote Sens. Environ. 194, 177–189 (2017).#
d <- 0.216; e <- 0.939 # EXPO Roy, 1. Menden-Deuer, S. & Lessard, E. J. Carbon to volume relationships for dinoflagellates, diatoms, and other protist plankton. Limnol. Oceanogr. 45, 569–579 (2000).#
#
max.scatter <- 20#
min.scatter <- 0.0005#
#
b <- params[2]#
c <- params[1]#
scatter <- 10^(seq(log10(min(mie2[,2]/c)), log10(max(mie3[,2]/c)),length.out=10000))#
#
s1 <- approx((mie1[,2]/c)^b, mie1[,1], xout=scatter)#
s2 <- approx((mie2[,2]/c)^b, mie2[,1], xout=scatter)#
s3 <- approx((mie3[,2]/c)^b, mie3[,1], xout=scatter)#
s4 <- approx((mie1[,2]/c)^b, d*(4/3*pi*(0.5*mie1[,1])^3)^e, xout=scatter)#
s5 <- approx((mie2[,2]/c)^b, d*(4/3*pi*(0.5*mie2[,1])^3)^e, xout=scatter)#
s6 <- approx((mie3[,2]/c)^b, d*(4/3*pi*(0.5*mie3[,1])^3)^e, xout=scatter)#
#
		if(inst == 740){mie_740 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_740_mid=s1$y,diam_740_upr=s2$y,diam_740_lwr = s3$y,#
                                                  Qc_740_mid=s4$y, Qc_740_upr=s5$y, Qc_740_lwr=s6$y))#
                      	#mie_740 <- subset(mie_740, scatter >= min.scatter & scatter <= max.scatter)#
                     	}#
#
        if(inst == 751){mie_751 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_751_mid=s1$y,diam_751_upr=s2$y,diam_751_lwr = s3$y,#
                                                  Qc_751_mid=s4$y, Qc_751_upr=s5$y, Qc_751_lwr=s6$y))#
                      	#mie_751 <- subset(mie_751, scatter >= min.scatter & scatter <= max.scatter)#
                      	}#
	    if(inst == 989){mie_989 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_989_mid=s1$y,diam_989_upr=s2$y,diam_989_lwr = s3$y,#
                                                  Qc_989_mid=s4$y, Qc_989_upr=s5$y, Qc_989_lwr=s6$y))#
                      	#mie_989 <- subset(mie_989, scatter >= min.scatter & scatter <= max.scatter)#
						}#
#
plot(beads$normalized.fsc, beads$size,log='xy', xaxt='n',xlim=c(0.002,10), ylim=c(0.2,20), bg=alpha(viridis(nrow(beads)),0.5),cex=2, pch=21, xlab="Normalized scatter (dimensionless)", ylab="Cell diameter (µm)", las=1, main=paste(inst))#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5))#
axis(2, at=c(0.1,0.2,0.5,1,2,5,10,20),las=1)#
lines((mie4[,2]/c)^b, mie4[,1], col='red3')#
legend("topleft",cex=0.5, legend=c(paste(unique(beads$size), 'µm-beads'), "Mie-based model (n = 1.603)"), bty='n', pch=c(rep(21,nrow(beads)/2), NA), lwd=c(rep(NA,nrow(beads)/2), 2),col=c(rep(1,nrow(beads)/2),'red3'), pt.bg=alpha(c(viridis(nrow(beads)/2), 'red3'),0.5))#
#
}
mie <- merge(mie_740, mie_751, by='scatter')
summary(mie)
head(mie_740)
tail(mie_989)
mie <- data.frame(cbind(mie_740[,], mie_751[-1,-1], mie_989[,-1]))
mie <- data.frame(cbind(mie_740[,], mie_751[-1,-1], mie_989[-1,-1]))
mie <- data.frame(cbind(mie_740[,], mie_751[,-1], mie_989[,-1]))
summary(mie)
mie_740
plot(mie_740[,1],mie_740[,2])
par(mfrow=c(1,3), pty='s', cex=1.2)#
#
for(inst in c(740,751,989)){#
#
# inst <- 740#
#
### Optiomization#
#
if(inst == 740) beads <- beads740#
if(inst == 751) beads <- beads751#
if(inst == 989) beads <- beads989#
#
#beads1 <- subset(beads,  size > 0.3) # run to test optimzation across range of particle size, except 0.3 microns beads not properly analyzed.#
#
f <- function(params) sigma.lsq(mie=mie4, beads=beads, params)#
res <- DEoptim(f, lower=c(0,0), upper=c(10000,2), control=DEoptim.control(itermax=1000, reltol=1e-8,trace=100, steptol=100, strategy=2, parallelType=0))#
print(res$optim$bestval)#
params <- res$optim$bestmem # optimized 'c' and 'b' values#
print(params)#
### CREATE LOOKUP TABLE#
#d <- 0.220; e <- 1 # LINEAR Shalapyonok et al. 2001; 0.220 (Li et al. 1992, Veldhuis et al. 2004, and more studies agreed with 220 fg C um-3)#
#d <- 0.54; e <- 0.85 # EXPO Roy, S., Sathyendranath, S. & Platt, T. Size-partitioned phytoplankton carbon and carbon-to-chlorophyll ratio from ocean colour by an absorption-based bio-optical algorithm. Remote Sens. Environ. 194, 177–189 (2017).#
d <- 0.216; e <- 0.939 # EXPO Roy, 1. Menden-Deuer, S. & Lessard, E. J. Carbon to volume relationships for dinoflagellates, diatoms, and other protist plankton. Limnol. Oceanogr. 45, 569–579 (2000).#
#
max.scatter <- 30#
min.scatter <- 0.0005#
#
b <- params[2]#
c <- params[1]#
scatter <- 10^(seq(log10(min(mie2[,2]/c)), log10(max(mie3[,2]/c)),length.out=10000))#
#
s1 <- approx((mie1[,2]/c)^b, mie1[,1], xout=scatter)#
s2 <- approx((mie2[,2]/c)^b, mie2[,1], xout=scatter)#
s3 <- approx((mie3[,2]/c)^b, mie3[,1], xout=scatter)#
s4 <- approx((mie1[,2]/c)^b, d*(4/3*pi*(0.5*mie1[,1])^3)^e, xout=scatter)#
s5 <- approx((mie2[,2]/c)^b, d*(4/3*pi*(0.5*mie2[,1])^3)^e, xout=scatter)#
s6 <- approx((mie3[,2]/c)^b, d*(4/3*pi*(0.5*mie3[,1])^3)^e, xout=scatter)#
#
		if(inst == 740){mie_740 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_740_mid=s1$y,diam_740_upr=s2$y,diam_740_lwr = s3$y,#
                                                  Qc_740_mid=s4$y, Qc_740_upr=s5$y, Qc_740_lwr=s6$y))#
                      	mie_740 <- subset(mie_740, scatter >= min.scatter & scatter <= max.scatter)#
                     	}#
#
        if(inst == 751){mie_751 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_751_mid=s1$y,diam_751_upr=s2$y,diam_751_lwr = s3$y,#
                                                  Qc_751_mid=s4$y, Qc_751_upr=s5$y, Qc_751_lwr=s6$y))#
                      	mie_751 <- subset(mie_751, scatter >= min.scatter & scatter <= max.scatter)#
                      	}#
	    if(inst == 989){mie_989 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_989_mid=s1$y,diam_989_upr=s2$y,diam_989_lwr = s3$y,#
                                                  Qc_989_mid=s4$y, Qc_989_upr=s5$y, Qc_989_lwr=s6$y))#
                      	mie_989 <- subset(mie_989, scatter >= min.scatter & scatter <= max.scatter)#
						}#
#
plot(beads$normalized.fsc, beads$size,log='xy', xaxt='n',xlim=c(0.002,10), ylim=c(0.2,20), bg=alpha(viridis(nrow(beads)),0.5),cex=2, pch=21, xlab="Normalized scatter (dimensionless)", ylab="Cell diameter (µm)", las=1, main=paste(inst))#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5))#
axis(2, at=c(0.1,0.2,0.5,1,2,5,10,20),las=1)#
lines((mie4[,2]/c)^b, mie4[,1], col='red3')#
legend("topleft",cex=0.5, legend=c(paste(unique(beads$size), 'µm-beads'), "Mie-based model (n = 1.603)"), bty='n', pch=c(rep(21,nrow(beads)/2), NA), lwd=c(rep(NA,nrow(beads)/2), 2),col=c(rep(1,nrow(beads)/2),'red3'), pt.bg=alpha(c(viridis(nrow(beads)/2), 'red3'),0.5))#
#
}
mie <- data.frame(cbind(mie_740[,], mie_751[,-1], mie_989[,-1]))
mie <- data.frame(cbind(mie_740[,], mie_751[-1,-1], mie_989[,-1]))
mie <- data.frame(cbind(mie_740[,], mie_751[-1,-1], mie_989[-1,-1]))
mie <- data.frame(cbind(mie_740[-1,], mie_751[-1,-1], mie_989[,-1]))
summary(mie)
mie
library(scales)#
library(viridis)#
path.to.git.repository <- "~/Documents/DATA/Codes/mie-theory"#
setwd(path.to.git.repository)#
#
##############################
### scatter normalization ####
##############################
#
beads740 <- read.csv("740-summary.csv")#
beads740$fsc <- 10^((beads740$fsc.corr.high/2^16)*3.5)#
id.740 <- which(beads740$size == 1) # find 1 micron beads#
beads740$normalized.fsc <- beads740$fsc/mean(beads740[id.740,'fsc'])#
beads740 <- beads740[order(beads740$size),]#
#
beads989<- read.csv("989-summary.csv")#
beads989$fsc <- 10^((beads989$fsc.corr.high/2^16)*3.5)#
id.989 <- which(beads989$size == 1) # find 1 micron beads#
beads989$normalized.fsc <- beads989$fsc/mean(beads989[id.989,'fsc'])#
beads989 <- beads989[order(beads989$size),]#
#
beads751 <- read.csv("751-summary.csv")#
beads751$fsc <- 10^((beads751$fsc.corr.high/2^16)*3.5)#
id.751<- which(beads751$size == 1) # find 1 micron beads#
beads751$normalized.fsc <- beads751 $fsc/mean(beads751 [id.751,'fsc'])#
beads751 <- beads751[order(beads751$size),]#
#####################
### OPTIMIZATION ####
#####################
library(DEoptim)#
#
# Mie theory fitting#
# n for phyto = 1.35- 1.41 # see Lehmuskero et al. Progr Oceanogr 2018#
mie2 <- t(read.csv("meidata-1010.csv" ,header=F)) # low#
mie1 <- t(read.csv("meidata-1032.csv" ,header=F)) # fit#
mie3 <- t(read.csv("meidata-1055.csv" ,header=F)) # high#
mie4 <- t(read.csv("meidata-beads.csv" ,header=F)) # particle of 1 µm, index of refraction of 1.6033#
#
# optimization routine#
sigma.lsq <- function(mie, beads, params){#
#
     c <- params[1]#
     b <- params[2]#
     id <- findInterval(beads$size, mie[,1])#
     scatt <- (mie[id,2]/c)^b#
#
           df <- data.frame(obs=beads$normalized.fsc, pred=scatt)#
      sigma <- mean(((df$obs - df$pred)/df$obs)^2,na.rm=T)#
      return(sigma)#
  }#
#######################################################
#### compare MIE prediction with calibration beads
par(mfrow=c(1,3), pty='s', cex=1.2)#
#
for(inst in c(740,751,989)){#
#
# inst <- 740#
#
### Optiomization#
#
if(inst == 740) beads <- beads740#
if(inst == 751) beads <- beads751#
if(inst == 989) beads <- beads989#
#
#beads1 <- subset(beads,  size > 0.3) # run to test optimzation across range of particle size, except 0.3 microns beads not properly analyzed.#
#
f <- function(params) sigma.lsq(mie=mie4, beads=beads, params)#
res <- DEoptim(f, lower=c(0,0), upper=c(10000,2), control=DEoptim.control(itermax=1000, reltol=1e-8,trace=100, steptol=100, strategy=2, parallelType=0))#
print(res$optim$bestval)#
params <- res$optim$bestmem # optimized 'c' and 'b' values#
print(params)#
### CREATE LOOKUP TABLE#
#d <- 0.220; e <- 1 # LINEAR Shalapyonok et al. 2001; 0.220 (Li et al. 1992, Veldhuis et al. 2004, and more studies agreed with 220 fg C um-3)#
#d <- 0.54; e <- 0.85 # EXPO Roy, S., Sathyendranath, S. & Platt, T. Size-partitioned phytoplankton carbon and carbon-to-chlorophyll ratio from ocean colour by an absorption-based bio-optical algorithm. Remote Sens. Environ. 194, 177–189 (2017).#
d <- 0.216; e <- 0.939 # EXPO Roy, 1. Menden-Deuer, S. & Lessard, E. J. Carbon to volume relationships for dinoflagellates, diatoms, and other protist plankton. Limnol. Oceanogr. 45, 569–579 (2000).#
#
max.scatter <- 30#
min.scatter <- 0.00865#
#
b <- params[2]#
c <- params[1]#
scatter <- 10^(seq(log10(min(mie2[,2]/c)), log10(max(mie3[,2]/c)),length.out=10000))#
#
s1 <- approx((mie1[,2]/c)^b, mie1[,1], xout=scatter)#
s2 <- approx((mie2[,2]/c)^b, mie2[,1], xout=scatter)#
s3 <- approx((mie3[,2]/c)^b, mie3[,1], xout=scatter)#
s4 <- approx((mie1[,2]/c)^b, d*(4/3*pi*(0.5*mie1[,1])^3)^e, xout=scatter)#
s5 <- approx((mie2[,2]/c)^b, d*(4/3*pi*(0.5*mie2[,1])^3)^e, xout=scatter)#
s6 <- approx((mie3[,2]/c)^b, d*(4/3*pi*(0.5*mie3[,1])^3)^e, xout=scatter)#
#
		if(inst == 740){mie_740 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_740_mid=s1$y,diam_740_upr=s2$y,diam_740_lwr = s3$y,#
                                                  Qc_740_mid=s4$y, Qc_740_upr=s5$y, Qc_740_lwr=s6$y))#
                      	mie_740 <- subset(mie_740, scatter >= min.scatter & scatter <= max.scatter)#
                     	}#
#
        if(inst == 751){mie_751 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_751_mid=s1$y,diam_751_upr=s2$y,diam_751_lwr = s3$y,#
                                                  Qc_751_mid=s4$y, Qc_751_upr=s5$y, Qc_751_lwr=s6$y))#
                      	mie_751 <- subset(mie_751, scatter >= min.scatter & scatter <= max.scatter)#
                      	}#
	    if(inst == 989){mie_989 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_989_mid=s1$y,diam_989_upr=s2$y,diam_989_lwr = s3$y,#
                                                  Qc_989_mid=s4$y, Qc_989_upr=s5$y, Qc_989_lwr=s6$y))#
                      	mie_989 <- subset(mie_989, scatter >= min.scatter & scatter <= max.scatter)#
						}#
#
plot(beads$normalized.fsc, beads$size,log='xy', xaxt='n',xlim=c(0.002,10), ylim=c(0.2,20), bg=alpha(viridis(nrow(beads)),0.5),cex=2, pch=21, xlab="Normalized scatter (dimensionless)", ylab="Cell diameter (µm)", las=1, main=paste(inst))#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5))#
axis(2, at=c(0.1,0.2,0.5,1,2,5,10,20),las=1)#
lines((mie4[,2]/c)^b, mie4[,1], col='red3')#
legend("topleft",cex=0.5, legend=c(paste(unique(beads$size), 'µm-beads'), "Mie-based model (n = 1.603)"), bty='n', pch=c(rep(21,nrow(beads)/2), NA), lwd=c(rep(NA,nrow(beads)/2), 2),col=c(rep(1,nrow(beads)/2),'red3'), pt.bg=alpha(c(viridis(nrow(beads)/2), 'red3'),0.5))#
#
}
mie
#####################
library(DEoptim)#
#
# Mie theory fitting#
# n for phyto = 1.35- 1.41 # see Lehmuskero et al. Progr Oceanogr 2018#
mie2 <- t(read.csv("meidata-1010.csv" ,header=F)) # low#
mie1 <- t(read.csv("meidata-1032.csv" ,header=F)) # fit#
mie3 <- t(read.csv("meidata-1055.csv" ,header=F)) # high#
mie4 <- t(read.csv("meidata-beads.csv" ,header=F)) # particle of 1 µm, index of refraction of 1.6033
summary(mie1)
# optimization routine#
sigma.lsq <- function(mie, beads, params){#
#
     c <- params[1]#
     b <- params[2]#
     id <- findInterval(beads$size, mie[,1])#
     scatt <- (mie[id,2]/c)^b#
#
           df <- data.frame(obs=beads$normalized.fsc, pred=scatt)#
      sigma <- mean(((df$obs - df$pred)/df$obs)^2,na.rm=T)#
      return(sigma)#
  }
par(mfrow=c(1,3), pty='s', cex=1.2)#
#
for(inst in c(740,751,989)){#
#
# inst <- 740#
#
### Optiomization#
#
if(inst == 740) beads <- beads740#
if(inst == 751) beads <- beads751#
if(inst == 989) beads <- beads989#
#
#beads1 <- subset(beads,  size > 0.3) # run to test optimzation across range of particle size, except 0.3 microns beads not properly analyzed.#
#
f <- function(params) sigma.lsq(mie=mie4, beads=beads, params)#
res <- DEoptim(f, lower=c(0,0), upper=c(10000,2), control=DEoptim.control(itermax=1000, reltol=1e-8,trace=100, steptol=100, strategy=2, parallelType=0))#
print(res$optim$bestval)#
params <- res$optim$bestmem # optimized 'c' and 'b' values#
print(params)#
### CREATE LOOKUP TABLE#
#d <- 0.220; e <- 1 # LINEAR Shalapyonok et al. 2001; 0.220 (Li et al. 1992, Veldhuis et al. 2004, and more studies agreed with 220 fg C um-3)#
#d <- 0.54; e <- 0.85 # EXPO Roy, S., Sathyendranath, S. & Platt, T. Size-partitioned phytoplankton carbon and carbon-to-chlorophyll ratio from ocean colour by an absorption-based bio-optical algorithm. Remote Sens. Environ. 194, 177–189 (2017).#
d <- 0.216; e <- 0.939 # EXPO Roy, 1. Menden-Deuer, S. & Lessard, E. J. Carbon to volume relationships for dinoflagellates, diatoms, and other protist plankton. Limnol. Oceanogr. 45, 569–579 (2000).#
#
max.scatter <- 30#
min.scatter <- 0.00865#
#
b <- params[2]#
c <- params[1]#
scatter <- 10^(seq(log10(min(mie2[,2]/c)), log10(max(mie3[,2]/c)),length.out=10000))#
#
s1 <- approx((mie1[,2]/c)^b, mie1[,1], xout=scatter)#
s2 <- approx((mie2[,2]/c)^b, mie2[,1], xout=scatter)#
s3 <- approx((mie3[,2]/c)^b, mie3[,1], xout=scatter)#
s4 <- approx((mie1[,2]/c)^b, d*(4/3*pi*(0.5*mie1[,1])^3)^e, xout=scatter)#
s5 <- approx((mie2[,2]/c)^b, d*(4/3*pi*(0.5*mie2[,1])^3)^e, xout=scatter)#
s6 <- approx((mie3[,2]/c)^b, d*(4/3*pi*(0.5*mie3[,1])^3)^e, xout=scatter)#
#
		if(inst == 740){mie_740 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_740_mid=s1$y,diam_740_upr=s2$y,diam_740_lwr = s3$y,#
                                                  Qc_740_mid=s4$y, Qc_740_upr=s5$y, Qc_740_lwr=s6$y))#
                      	mie_740 <- subset(mie_740, scatter >= min.scatter & scatter <= max.scatter)#
                     	}#
#
        if(inst == 751){mie_751 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_751_mid=s1$y,diam_751_upr=s2$y,diam_751_lwr = s3$y,#
                                                  Qc_751_mid=s4$y, Qc_751_upr=s5$y, Qc_751_lwr=s6$y))#
                      	mie_751 <- subset(mie_751, scatter >= min.scatter & scatter <= max.scatter)#
                      	}#
	    if(inst == 989){mie_989 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_989_mid=s1$y,diam_989_upr=s2$y,diam_989_lwr = s3$y,#
                                                  Qc_989_mid=s4$y, Qc_989_upr=s5$y, Qc_989_lwr=s6$y))#
                      	mie_989 <- subset(mie_989, scatter >= min.scatter & scatter <= max.scatter)#
						}#
#
plot(beads$normalized.fsc, beads$size,log='xy', xaxt='n',xlim=c(0.002,10), ylim=c(0.2,20), bg=alpha(viridis(nrow(beads)),0.5),cex=2, pch=21, xlab="Normalized scatter (dimensionless)", ylab="Cell diameter (µm)", las=1, main=paste(inst))#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5))#
axis(2, at=c(0.1,0.2,0.5,1,2,5,10,20),las=1)#
lines((mie4[,2]/c)^b, mie4[,1], col='red3')#
legend("topleft",cex=0.5, legend=c(paste(unique(beads$size), 'µm-beads'), "Mie-based model (n = 1.603)"), bty='n', pch=c(rep(21,nrow(beads)/2), NA), lwd=c(rep(NA,nrow(beads)/2), 2),col=c(rep(1,nrow(beads)/2),'red3'), pt.bg=alpha(c(viridis(nrow(beads)/2), 'red3'),0.5))
}
scatter
par(mfrow=c(1,3), pty='s', cex=1.2)#
#
for(inst in c(740,751,989)){#
#
# inst <- 740#
#
### Optiomization#
#
if(inst == 740) beads <- beads740#
if(inst == 751) beads <- beads751#
if(inst == 989) beads <- beads989#
#
#beads1 <- subset(beads,  size > 0.3) # run to test optimzation across range of particle size, except 0.3 microns beads not properly analyzed.#
#
f <- function(params) sigma.lsq(mie=mie4, beads=beads, params)#
res <- DEoptim(f, lower=c(0,0), upper=c(10000,2), control=DEoptim.control(itermax=1000, reltol=1e-8,trace=100, steptol=100, strategy=2, parallelType=0))#
print(res$optim$bestval)#
params <- res$optim$bestmem # optimized 'c' and 'b' values#
print(params)#
### CREATE LOOKUP TABLE#
#d <- 0.220; e <- 1 # LINEAR Shalapyonok et al. 2001; 0.220 (Li et al. 1992, Veldhuis et al. 2004, and more studies agreed with 220 fg C um-3)#
#d <- 0.54; e <- 0.85 # EXPO Roy, S., Sathyendranath, S. & Platt, T. Size-partitioned phytoplankton carbon and carbon-to-chlorophyll ratio from ocean colour by an absorption-based bio-optical algorithm. Remote Sens. Environ. 194, 177–189 (2017).#
d <- 0.216; e <- 0.939 # EXPO Roy, 1. Menden-Deuer, S. & Lessard, E. J. Carbon to volume relationships for dinoflagellates, diatoms, and other protist plankton. Limnol. Oceanogr. 45, 569–579 (2000).#
#
max.scatter <- 30#
min.scatter <- 0.00865#
#
b <- params[2]#
c <- params[1]#
scatter <- 10^(seq(log10(min(mie2[,2]/c)), log10(max(mie3[,2]/c)),length.out=10000))#
#
s1 <- approx((mie1[,2]/c)^b, mie1[,1], xout=scatter)#
s2 <- approx((mie2[,2]/c)^b, mie2[,1], xout=scatter)#
s3 <- approx((mie3[,2]/c)^b, mie3[,1], xout=scatter)#
s4 <- approx((mie1[,2]/c)^b, d*(4/3*pi*(0.5*mie1[,1])^3)^e, xout=scatter)#
s5 <- approx((mie2[,2]/c)^b, d*(4/3*pi*(0.5*mie2[,1])^3)^e, xout=scatter)#
s6 <- approx((mie3[,2]/c)^b, d*(4/3*pi*(0.5*mie3[,1])^3)^e, xout=scatter)#
#
		if(inst == 740){mie_740 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_740_mid=s1$y,diam_740_upr=s2$y,diam_740_lwr = s3$y,#
                                                  Qc_740_mid=s4$y, Qc_740_upr=s5$y, Qc_740_lwr=s6$y))#
                      	mie_740 <- subset(mie_740, scatter >= min.scatter & scatter <= max.scatter)#
                     	}#
#
        if(inst == 751){mie_751 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_751_mid=s1$y,diam_751_upr=s2$y,diam_751_lwr = s3$y,#
                                                  Qc_751_mid=s4$y, Qc_751_upr=s5$y, Qc_751_lwr=s6$y))#
                      	mie_751 <- subset(mie_751, scatter >= min.scatter & scatter <= max.scatter)#
                      	}#
	    if(inst == 989){mie_989 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_989_mid=s1$y,diam_989_upr=s2$y,diam_989_lwr = s3$y,#
                                                  Qc_989_mid=s4$y, Qc_989_upr=s5$y, Qc_989_lwr=s6$y))#
                      	mie_989 <- subset(mie_989, scatter >= min.scatter & scatter <= max.scatter)#
						}#
#
plot(beads$normalized.fsc, beads$size,log='xy', xaxt='n',xlim=c(0.002,10), ylim=c(0.2,20), bg=alpha(viridis(nrow(beads)),0.5),cex=2, pch=21, xlab="Normalized scatter (dimensionless)", ylab="Cell diameter (µm)", las=1, main=paste(inst))#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5))#
axis(2, at=c(0.1,0.2,0.5,1,2,5,10,20),las=1)#
lines((mie4[,2]/c)^b, mie4[,1], col='red3')#
legend("topleft",cex=0.5, legend=c(paste(unique(beads$size), 'µm-beads'), "Mie-based model (n = 1.603)"), bty='n', pch=c(rep(21,nrow(beads)/2), NA), lwd=c(rep(NA,nrow(beads)/2), 2),col=c(rep(1,nrow(beads)/2),'red3'), pt.bg=alpha(c(viridis(nrow(beads)/2), 'red3'),0.5))#
#
}
mie <- data.frame(cbind(mie_740[-1,], mie_751[-1,-1], mie_989[,-1]))
mie <- data.frame(cbind(mie_740[,], mie_751[,-1], mie_989[,-1]))
summary(mie)
png("Mie-beads-scatter.png",width=12, height=6, unit='in', res=400)#
#
par(mfrow=c(1,3), pty='s', cex=1.2)#
#
for(inst in c(740,751,989)){#
#
# inst <- 740#
#
### Optiomization#
#
if(inst == 740) beads <- beads740#
if(inst == 751) beads <- beads751#
if(inst == 989) beads <- beads989#
#
#beads1 <- subset(beads,  size > 0.3) # run to test optimzation across range of particle size, except 0.3 microns beads not properly analyzed.#
#
f <- function(params) sigma.lsq(mie=mie4, beads=beads, params)#
res <- DEoptim(f, lower=c(0,0), upper=c(10000,2), control=DEoptim.control(itermax=1000, reltol=1e-8,trace=100, steptol=100, strategy=2, parallelType=0))#
print(res$optim$bestval)#
params <- res$optim$bestmem # optimized 'c' and 'b' values#
print(params)#
### CREATE LOOKUP TABLE#
#d <- 0.220; e <- 1 # LINEAR Shalapyonok et al. 2001; 0.220 (Li et al. 1992, Veldhuis et al. 2004, and more studies agreed with 220 fg C um-3)#
#d <- 0.54; e <- 0.85 # EXPO Roy, S., Sathyendranath, S. & Platt, T. Size-partitioned phytoplankton carbon and carbon-to-chlorophyll ratio from ocean colour by an absorption-based bio-optical algorithm. Remote Sens. Environ. 194, 177–189 (2017).#
d <- 0.216; e <- 0.939 # EXPO Roy, 1. Menden-Deuer, S. & Lessard, E. J. Carbon to volume relationships for dinoflagellates, diatoms, and other protist plankton. Limnol. Oceanogr. 45, 569–579 (2000).#
#
max.scatter <- 20#
min.scatter <- 0.00865#
#
b <- params[2]#
c <- params[1]#
scatter <- 10^(seq(log10(min(mie2[,2]/c)), log10(max(mie3[,2]/c)),length.out=10000))#
#
s1 <- approx((mie1[,2]/c)^b, mie1[,1], xout=scatter)#
s2 <- approx((mie2[,2]/c)^b, mie2[,1], xout=scatter)#
s3 <- approx((mie3[,2]/c)^b, mie3[,1], xout=scatter)#
s4 <- approx((mie1[,2]/c)^b, d*(4/3*pi*(0.5*mie1[,1])^3)^e, xout=scatter)#
s5 <- approx((mie2[,2]/c)^b, d*(4/3*pi*(0.5*mie2[,1])^3)^e, xout=scatter)#
s6 <- approx((mie3[,2]/c)^b, d*(4/3*pi*(0.5*mie3[,1])^3)^e, xout=scatter)#
#
		if(inst == 740){mie_740 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_740_mid=s1$y,diam_740_upr=s2$y,diam_740_lwr = s3$y,#
                                                  Qc_740_mid=s4$y, Qc_740_upr=s5$y, Qc_740_lwr=s6$y))#
                      	mie_740 <- subset(mie_740, scatter >= min.scatter & scatter <= max.scatter)#
                     	}#
#
        if(inst == 751){mie_751 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_751_mid=s1$y,diam_751_upr=s2$y,diam_751_lwr = s3$y,#
                                                  Qc_751_mid=s4$y, Qc_751_upr=s5$y, Qc_751_lwr=s6$y))#
                      	mie_751 <- subset(mie_751, scatter >= min.scatter & scatter <= max.scatter)#
                      	}#
	    if(inst == 989){mie_989 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_989_mid=s1$y,diam_989_upr=s2$y,diam_989_lwr = s3$y,#
                                                  Qc_989_mid=s4$y, Qc_989_upr=s5$y, Qc_989_lwr=s6$y))#
                      	mie_989 <- subset(mie_989, scatter >= min.scatter & scatter <= max.scatter)#
						}#
#
plot(beads$normalized.fsc, beads$size,log='xy', xaxt='n',xlim=c(0.002,10), ylim=c(0.2,20), bg=alpha(viridis(nrow(beads)),0.5),cex=2, pch=21, xlab="Normalized scatter (dimensionless)", ylab="Cell diameter (µm)", las=1, main=paste(inst))#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5))#
axis(2, at=c(0.1,0.2,0.5,1,2,5,10,20),las=1)#
lines((mie4[,2]/c)^b, mie4[,1], col='red3')#
legend("topleft",cex=0.5, legend=c(paste(unique(beads$size), 'µm-beads'), "Mie-based model (n = 1.603)"), bty='n', pch=c(rep(21,nrow(beads)/2), NA), lwd=c(rep(NA,nrow(beads)/2), 2),col=c(rep(1,nrow(beads)/2),'red3'), pt.bg=alpha(c(viridis(nrow(beads)/2), 'red3'),0.5))#
#
}#
#
dev.off()#
mie <- data.frame(cbind(mie_740[,], mie_751[,-1], mie_989[,-1]))
png("Mie-beads-scatter.png",width=12, height=6, unit='in', res=400)#
#
par(mfrow=c(1,3), pty='s', cex=1.2)#
#
for(inst in c(740,751,989)){#
#
# inst <- 740#
#
### Optiomization#
#
if(inst == 740) beads <- beads740#
if(inst == 751) beads <- beads751#
if(inst == 989) beads <- beads989#
#
#beads1 <- subset(beads,  size > 0.3) # run to test optimzation across range of particle size, except 0.3 microns beads not properly analyzed.#
#
f <- function(params) sigma.lsq(mie=mie4, beads=beads, params)#
res <- DEoptim(f, lower=c(0,0), upper=c(10000,2), control=DEoptim.control(itermax=1000, reltol=1e-8,trace=100, steptol=100, strategy=2, parallelType=0))#
print(res$optim$bestval)#
params <- res$optim$bestmem # optimized 'c' and 'b' values#
print(params)#
### CREATE LOOKUP TABLE#
#d <- 0.220; e <- 1 # LINEAR Shalapyonok et al. 2001; 0.220 (Li et al. 1992, Veldhuis et al. 2004, and more studies agreed with 220 fg C um-3)#
#d <- 0.54; e <- 0.85 # EXPO Roy, S., Sathyendranath, S. & Platt, T. Size-partitioned phytoplankton carbon and carbon-to-chlorophyll ratio from ocean colour by an absorption-based bio-optical algorithm. Remote Sens. Environ. 194, 177–189 (2017).#
d <- 0.216; e <- 0.939 # EXPO Roy, 1. Menden-Deuer, S. & Lessard, E. J. Carbon to volume relationships for dinoflagellates, diatoms, and other protist plankton. Limnol. Oceanogr. 45, 569–579 (2000).#
#
max.scatter <- 30#
min.scatter <- 0.00865#
#
b <- params[2]#
c <- params[1]#
scatter <- 10^(seq(log10(min(mie2[,2]/c)), log10(max(mie3[,2]/c)),length.out=10000))#
#
s1 <- approx((mie1[,2]/c)^b, mie1[,1], xout=scatter)#
s2 <- approx((mie2[,2]/c)^b, mie2[,1], xout=scatter)#
s3 <- approx((mie3[,2]/c)^b, mie3[,1], xout=scatter)#
s4 <- approx((mie1[,2]/c)^b, d*(4/3*pi*(0.5*mie1[,1])^3)^e, xout=scatter)#
s5 <- approx((mie2[,2]/c)^b, d*(4/3*pi*(0.5*mie2[,1])^3)^e, xout=scatter)#
s6 <- approx((mie3[,2]/c)^b, d*(4/3*pi*(0.5*mie3[,1])^3)^e, xout=scatter)#
#
		if(inst == 740){mie_740 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_740_mid=s1$y,diam_740_upr=s2$y,diam_740_lwr = s3$y,#
                                                  Qc_740_mid=s4$y, Qc_740_upr=s5$y, Qc_740_lwr=s6$y))#
                      	mie_740 <- subset(mie_740, scatter >= min.scatter & scatter <= max.scatter)#
                     	}#
#
        if(inst == 751){mie_751 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_751_mid=s1$y,diam_751_upr=s2$y,diam_751_lwr = s3$y,#
                                                  Qc_751_mid=s4$y, Qc_751_upr=s5$y, Qc_751_lwr=s6$y))#
                      	mie_751 <- subset(mie_751, scatter >= min.scatter & scatter <= max.scatter)#
                      	}#
	    if(inst == 989){mie_989 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_989_mid=s1$y,diam_989_upr=s2$y,diam_989_lwr = s3$y,#
                                                  Qc_989_mid=s4$y, Qc_989_upr=s5$y, Qc_989_lwr=s6$y))#
                      	mie_989 <- subset(mie_989, scatter >= min.scatter & scatter <= max.scatter)#
						}#
#
plot(beads$normalized.fsc, beads$size,log='xy', xaxt='n',xlim=c(0.002,10), ylim=c(0.2,20), bg=alpha(viridis(nrow(beads)),0.5),cex=2, pch=21, xlab="Normalized scatter (dimensionless)", ylab="Cell diameter (µm)", las=1, main=paste(inst))#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5))#
axis(2, at=c(0.1,0.2,0.5,1,2,5,10,20),las=1)#
lines((mie4[,2]/c)^b, mie4[,1], col='red3')#
legend("topleft",cex=0.5, legend=c(paste(unique(beads$size), 'µm-beads'), "Mie-based model (n = 1.603)"), bty='n', pch=c(rep(21,nrow(beads)/2), NA), lwd=c(rep(NA,nrow(beads)/2), 2),col=c(rep(1,nrow(beads)/2),'red3'), pt.bg=alpha(c(viridis(nrow(beads)/2), 'red3'),0.5))#
#
}#
#
dev.off()
mie <- data.frame(cbind(mie_740[,], mie_751[,-1], mie_989[,-1]))
summary(mie)
write.csv(mie, "calibrated-mie.csv", row.names=F, quote=F)
library(scales)#
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-size-calibration"#
setwd(path.to.git.repository)#
.rainbow.cols <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow","#FF7F00", "red", "#7F0000"))#
#
culture <- read.csv("scatter_calibration.csv")#
culture$norm.fsc <- culture$fsc / culture$fsc.beads#
culture$norm.fsc.sd <- culture$fsc.sd / culture$fsc.beads#
culture$volume <- 4/3 * pi * (culture$diameter/2)^3#
culture$volume.sd <- culture$volume * culture$diameter.sd/culture$diameter#
#
culture2 <- aggregate(culture, by=list(culture$species), FUN=mean)#
culture2 <- culture2[order(culture2$norm.fsc),]#
#
inst <- "Influx"#
#
ir <- c(1.35/1.3371, 1.41/1.3371) # range given in Lehmuskero et al. Progr Oceanogr 2018#
mie2 <- t(read.csv("~/Documents/DATA/Codes/mie-theory/meidata-1010INFLUX.csv" ,header=F)) # low#
mie1 <- t(read.csv("~/Documents/DATA/Codes/mie-theory/meidata-1032INFLUX.csv" ,header=F)) # fit#
mie3 <- t(read.csv("~/Documents/DATA/Codes/mie-theory/meidata-1055INFLUX.csv" ,header=F)) # high#
mie4 <- t(read.csv("~/Documents/DATA/Codes/mie-theory/meidata-beadsINFLUX.csv" ,header=F)) # beads#
#
        id <- findInterval(1, mie4[,1]) # find 1 micron beads#
### MERGING + SD#
                      d <- 0.216#
                      e <- 0.939#
                      max.scatter <- 30#
                      min.scatter <- 0.00865#
                      c1 <- mean(mie4[id,2]) / d#
                      scatter <- 10^(seq(log10(min(mie1[,2]/c1)), log10(max(mie3[,2]/c1)),length.out=10000))#
#
                      s1 <- approx(mie1[,2]/c1, mie1[,1], xout=scatter)#
                      s2 <- approx(mie2[,2]/c1, mie2[,1], xout=scatter)#
                      s3 <- approx(mie3[,2]/c1, mie3[,1], xout=scatter)#
                      s4 <- approx(mie1[,2]/c1, d*(4/3*pi*(0.5*mie1[,1])^3)*e, xout=scatter)#
                      s5 <- approx(mie2[,2]/c1, d*(4/3*pi*(0.5*mie2[,1])^3)*e, xout=scatter)#
                      s6 <- approx(mie3[,2]/c1, d*(4/3*pi*(0.5*mie3[,1])^3)*e, xout=scatter)#
                      mie <- data.frame(cbind(scatter=s1$x,#
                                                  diam_mid=s1$y,diam_upr=s2$y,diam_lwr = s3$y,#
                                                  Qc_mid=s4$y, Qc_upr=s5$y, Qc_lwr=s6$y))#
                      mie <- subset(mie, scatter >= min.scatter & scatter <= max.scatter)#
                        summary(mie)#
#
                    #write.csv(mie, "calibrated-mieINFLUX.csv", row.names=F, quote=F)#
#
                    plot(merge2$norm.fsc,merge2$pgC.cell, log='xy', yaxt='n', xaxt='n', pch=1,xlim=c(0.002,20), ylim=c(0.005,100), ylab=expression(paste("Qc (pgC cell"^{-1},")")), xlab="Normalized scatter (dimensionless)", main=paste("#",inst))#
                    lines(mie$scatter, mie[,paste0('Qc_mid')], col='red3', lwd=2)#
                    lines(mie$scatter, mie[,paste0('Qc_upr')], col='grey', lwd=2)#
                    lines(mie$scatter, mie[,paste0('Qc_lwr')], col='grey', lwd=2)#
                    plot(d*mie4[id,2],mie4[id,1], col='grey', lwd=2)
plot(culture2$norm.fsc,culture2$pgC.cell, log='xy', yaxt='n', xaxt='n', pch=1,xlim=c(0.002,20), ylim=c(0.005,100), ylab=expression(paste("Qc (pgC cell"^{-1},")")), xlab="Normalized scatter (dimensionless)", main=paste("#",inst))
plot(culture2$norm.fsc,culture2$pgC.cell, log='xy', yaxt='n', xaxt='n', pch=1,xlim=c(0.002,20), ylim=c(0.005,100), ylab=expression(paste("Qc (pgC cell"^{-1},")")), xlab="Normalized scatter (dimensionless)", main=paste("#",inst))#
                    lines(mie$scatter, mie[,paste0('Qc_mid')], col='red3', lwd=2)#
                    lines(mie$scatter, mie[,paste0('Qc_upr')], col='grey', lwd=2)#
                    lines(mie$scatter, mie[,paste0('Qc_lwr')], col='grey', lwd=2)#
                    plot(d*mie4[id,2],mie4[id,1], col='grey', lwd=2)
par(mfrow=c(2,1))#
                    plot(culture2$norm.fsc,culture2$pgC.cell, log='xy', yaxt='n', xaxt='n', pch=1,xlim=c(0.002,20), ylim=c(0.005,100), ylab=expression(paste("Qc (pgC cell"^{-1},")")), xlab="Normalized scatter (dimensionless)", main=paste("#",inst))#
                    lines(mie$scatter, mie[,paste0('Qc_mid')], col='red3', lwd=2)#
                    lines(mie$scatter, mie[,paste0('Qc_upr')], col='grey', lwd=2)#
                    lines(mie$scatter, mie[,paste0('Qc_lwr')], col='grey', lwd=2)#
                    plot(d*mie4[id,2],mie4[id,1], col='grey', lwd=2)
ibrary(scales)#
.rainbow.cols <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow","#FF7F00", "red", "#7F0000"))#
#
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
setwd(path.to.git.repository)#
#
inst <- "Influx"#
#
merge <- read.csv(paste0(inst,"-Qc-cultures.csv"))#
merge2 <- subset(merge, Sample.ID !="PT 632" & Sample.ID !="EHUX" & Sample.ID !="LICMO")#& Sample.ID !="TAPS 3367" & Sample.ID !="TAPS 1135" & Sample.ID !="NAV")#
merge2 <- merge2[order(merge2$norm.fsc),]#
print(mean(merge2$norm.fsc))#
#
mie <- read.csv("INFLUXcalibrated-mie.csv")
library(scales)
plot(merge2$norm.fsc,merge2$pgC.cell, log='xy', yaxt='n', xaxt='n', pch=NA,xlim=c(0.002,20), ylim=c(0.005,100), ylab=expression(paste("Qc (pgC cell"^{-1},")")), xlab="Normalized scatter (dimensionless)", main=paste("#",inst))#
lines(mie$scatter, mie[,paste0('Qc_mid')], col='red3', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_upr')], col='grey', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_lwr')], col='grey', lwd=2)#
with(merge2, arrows(norm.fsc, pgC.cell - pgC.cell.sd, norm.fsc, pgC.cell + pgC.cell.sd,  code = 3, length=0, col='grey', lwd=2))#
with(merge2, arrows(norm.fsc-norm.fsc.sd, pgC.cell, norm.fsc+norm.fsc.sd, pgC.cell,  code = 3, length=0,col='grey',lwd=2))#
points(merge2$norm.fsc,merge2$pgC.cell,bg=alpha(viridis(nrow(merge2)),0.5),cex=2, pch=21)#
axis(2, at=c(0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), labels=c(0.005,0.01, 0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), las=1)#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10),labels=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10))#
legend("topleft",legend=c(as.vector(merge2$Sample.ID),"Mie-based theoritical data", "(index of refraction 1.38 +/- 0.3)"), pch=c(rep(21,nrow(merge2)),NA, NA), lwd=c(rep(NA,nrow(merge2)),2, NA), bty='n',#
          pt.bg=alpha(viridis(nrow(merge2)),0.5), col=c(rep(1,nrow(merge2)),'red3'), text.font=c(rep(3,nrow(merge2)),1))
##########################
### LINEAR REGRESSION ####
##########################
library(scales)#
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-size-calibration"#
setwd(path.to.git.repository)#
.rainbow.cols <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow","#FF7F00", "red", "#7F0000"))#
#
culture <- read.csv("scatter_calibration.csv")#
culture$norm.fsc <- culture$fsc / culture$fsc.beads#
culture$norm.fsc.sd <- culture$fsc.sd / culture$fsc.beads#
culture$volume <- 4/3 * pi * (culture$diameter/2)^3#
culture$volume.sd <- culture$volume * culture$diameter.sd/culture$diameter#
#
culture2 <- aggregate(culture, by=list(culture$species), FUN=mean)#
culture2 <- culture2[order(culture2$norm.fsc),]#
#
inst <- "Influx"#
#
ir <- c(1.35/1.3371, 1.41/1.3371) # range given in Lehmuskero et al. Progr Oceanogr 2018#
mie2 <- t(read.csv("~/Documents/DATA/Codes/mie-theory/meidata-1010INFLUX.csv" ,header=F)) # low#
mie1 <- t(read.csv("~/Documents/DATA/Codes/mie-theory/meidata-1032INFLUX.csv" ,header=F)) # fit#
mie3 <- t(read.csv("~/Documents/DATA/Codes/mie-theory/meidata-1055INFLUX.csv" ,header=F)) # high#
mie4 <- t(read.csv("~/Documents/DATA/Codes/mie-theory/meidata-beadsINFLUX.csv" ,header=F)) # beads#
#
        id <- findInterval(1, mie4[,1]) # find 1 micron beads#
### MERGING + SD#
                      d <- 0.216#
                      e <- 0.939#
                      max.scatter <- 30#
                      min.scatter <- 0.00865#
                      c1 <- mean(mie4[id,2]) / d#
                      scatter <- 10^(seq(log10(min(mie1[,2]/c1)), log10(max(mie3[,2]/c1)),length.out=10000))#
#
                      s1 <- approx(mie1[,2]/c1, mie1[,1], xout=scatter)#
                      s2 <- approx(mie2[,2]/c1, mie2[,1], xout=scatter)#
                      s3 <- approx(mie3[,2]/c1, mie3[,1], xout=scatter)#
                      s4 <- approx(mie1[,2]/c1, d*(4/3*pi*(0.5*mie1[,1])^3)*e, xout=scatter)#
                      s5 <- approx(mie2[,2]/c1, d*(4/3*pi*(0.5*mie2[,1])^3)*e, xout=scatter)#
                      s6 <- approx(mie3[,2]/c1, d*(4/3*pi*(0.5*mie3[,1])^3)*e, xout=scatter)#
                      mie <- data.frame(cbind(scatter=s1$x,#
                                                  diam_mid=s1$y,diam_upr=s2$y,diam_lwr = s3$y,#
                                                  Qc_mid=s4$y, Qc_upr=s5$y, Qc_lwr=s6$y))#
                      mie <- subset(mie, scatter >= min.scatter & scatter <= max.scatter)#
                        summary(mie)#
#
                    write.csv(mie, "calibrated-mieINFLUX.csv", row.names=F, quote=F)
library(scales)#
.rainbow.cols <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow","#FF7F00", "red", "#7F0000"))#
#
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
setwd(path.to.git.repository)#
#
inst <- "Influx"#
#
merge <- read.csv(paste0(inst,"-Qc-cultures.csv"))#
merge2 <- subset(merge, Sample.ID !="PT 632" & Sample.ID !="EHUX" & Sample.ID !="LICMO")#& Sample.ID !="TAPS 3367" & Sample.ID !="TAPS 1135" & Sample.ID !="NAV")#
merge2 <- merge2[order(merge2$norm.fsc),]#
print(mean(merge2$norm.fsc))#
#
mie <- read.csv("INFLUXcalibrated-mie.csv")
plot(merge2$norm.fsc,merge2$pgC.cell, log='xy', yaxt='n', xaxt='n', pch=NA,xlim=c(0.002,20), ylim=c(0.005,100), ylab=expression(paste("Qc (pgC cell"^{-1},")")), xlab="Normalized scatter (dimensionless)", main=paste("#",inst))#
lines(mie$scatter, mie[,paste0('Qc_mid')], col='red3', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_upr')], col='grey', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_lwr')], col='grey', lwd=2)#
with(merge2, arrows(norm.fsc, pgC.cell - pgC.cell.sd, norm.fsc, pgC.cell + pgC.cell.sd,  code = 3, length=0, col='grey', lwd=2))#
with(merge2, arrows(norm.fsc-norm.fsc.sd, pgC.cell, norm.fsc+norm.fsc.sd, pgC.cell,  code = 3, length=0,col='grey',lwd=2))#
points(merge2$norm.fsc,merge2$pgC.cell,bg=alpha(viridis(nrow(merge2)),0.5),cex=2, pch=21)#
axis(2, at=c(0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), labels=c(0.005,0.01, 0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), las=1)#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10),labels=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10))#
legend("topleft",legend=c(as.vector(merge2$Sample.ID),"Mie-based theoritical data", "(index of refraction 1.38 +/- 0.3)"), pch=c(rep(21,nrow(merge2)),NA, NA), lwd=c(rep(NA,nrow(merge2)),2, NA), bty='n',#
          pt.bg=alpha(viridis(nrow(merge2)),0.5), col=c(rep(1,nrow(merge2)),'red3'), text.font=c(rep(3,nrow(merge2)),1))
##########################
### LINEAR REGRESSION ####
##########################
library(scales)#
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-size-calibration"#
setwd(path.to.git.repository)#
.rainbow.cols <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow","#FF7F00", "red", "#7F0000"))#
#
culture <- read.csv("scatter_calibration.csv")#
culture$norm.fsc <- culture$fsc / culture$fsc.beads#
culture$norm.fsc.sd <- culture$fsc.sd / culture$fsc.beads#
culture$volume <- 4/3 * pi * (culture$diameter/2)^3#
culture$volume.sd <- culture$volume * culture$diameter.sd/culture$diameter#
#
culture2 <- aggregate(culture, by=list(culture$species), FUN=mean)#
culture2 <- culture2[order(culture2$norm.fsc),]#
#
inst <- "Influx"#
#
ir <- c(1.35/1.3371, 1.41/1.3371) # range given in Lehmuskero et al. Progr Oceanogr 2018#
mie2 <- t(read.csv("~/Documents/DATA/Codes/mie-theory/meidata-1010INFLUX.csv" ,header=F)) # low#
mie1 <- t(read.csv("~/Documents/DATA/Codes/mie-theory/meidata-1032INFLUX.csv" ,header=F)) # fit#
mie3 <- t(read.csv("~/Documents/DATA/Codes/mie-theory/meidata-1055INFLUX.csv" ,header=F)) # high#
mie4 <- t(read.csv("~/Documents/DATA/Codes/mie-theory/meidata-beadsINFLUX.csv" ,header=F)) # beads#
#
        id <- findInterval(1, mie4[,1]) # find 1 micron beads#
### MERGING + SD#
                      d <- 0.216#
                      e <- 0.939#
                      max.scatter <- 30#
                      min.scatter <- 0.00865#
                      c1 <- mean(mie4[id,2]) / d#
                      scatter <- 10^(seq(log10(min(mie1[,2]/c1)), log10(max(mie3[,2]/c1)),length.out=10000))#
#
                      s1 <- approx(mie1[,2]/c1, mie1[,1], xout=scatter)#
                      s2 <- approx(mie2[,2]/c1, mie2[,1], xout=scatter)#
                      s3 <- approx(mie3[,2]/c1, mie3[,1], xout=scatter)#
                      s4 <- approx(mie1[,2]/c1, d*(4/3*pi*(0.5*mie1[,1])^3)*e, xout=scatter)#
                      s5 <- approx(mie2[,2]/c1, d*(4/3*pi*(0.5*mie2[,1])^3)*e, xout=scatter)#
                      s6 <- approx(mie3[,2]/c1, d*(4/3*pi*(0.5*mie3[,1])^3)*e, xout=scatter)#
                      mie <- data.frame(cbind(scatter=s1$x,#
                                                  diam_mid=s1$y,diam_upr=s2$y,diam_lwr = s3$y,#
                                                  Qc_mid=s4$y, Qc_upr=s5$y, Qc_lwr=s6$y))#
                      mie <- subset(mie, scatter >= min.scatter & scatter <= max.scatter)#
                        summary(mie)
library(scales)#
.rainbow.cols <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow","#FF7F00", "red", "#7F0000"))#
#
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
setwd(path.to.git.repository)#
#
inst <- "Influx"#
#
merge <- read.csv(paste0(inst,"-Qc-cultures.csv"))#
merge2 <- subset(merge, Sample.ID !="PT 632" & Sample.ID !="EHUX" & Sample.ID !="LICMO")#& Sample.ID !="TAPS 3367" & Sample.ID !="TAPS 1135" & Sample.ID !="NAV")#
merge2 <- merge2[order(merge2$norm.fsc),]#
print(mean(merge2$norm.fsc))
plot(merge2$norm.fsc,merge2$pgC.cell, log='xy', yaxt='n', xaxt='n', pch=NA,xlim=c(0.002,20), ylim=c(0.005,100), ylab=expression(paste("Qc (pgC cell"^{-1},")")), xlab="Normalized scatter (dimensionless)", main=paste("#",inst))#
lines(mie$scatter, mie[,paste0('Qc_mid')], col='red3', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_upr')], col='grey', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_lwr')], col='grey', lwd=2)#
with(merge2, arrows(norm.fsc, pgC.cell - pgC.cell.sd, norm.fsc, pgC.cell + pgC.cell.sd,  code = 3, length=0, col='grey', lwd=2))#
with(merge2, arrows(norm.fsc-norm.fsc.sd, pgC.cell, norm.fsc+norm.fsc.sd, pgC.cell,  code = 3, length=0,col='grey',lwd=2))#
points(merge2$norm.fsc,merge2$pgC.cell,bg=alpha(viridis(nrow(merge2)),0.5),cex=2, pch=21)#
axis(2, at=c(0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), labels=c(0.005,0.01, 0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), las=1)#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10),labels=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10))#
legend("topleft",legend=c(as.vector(merge2$Sample.ID),"Mie-based theoritical data", "(index of refraction 1.38 +/- 0.3)"), pch=c(rep(21,nrow(merge2)),NA, NA), lwd=c(rep(NA,nrow(merge2)),2, NA), bty='n',#
          pt.bg=alpha(viridis(nrow(merge2)),0.5), col=c(rep(1,nrow(merge2)),'red3'), text.font=c(rep(3,nrow(merge2)),1))
inst <- "Influx"#
#
ir <- c(1.35/1.3371, 1.41/1.3371) # range given in Lehmuskero et al. Progr Oceanogr 2018#
mie2 <- t(read.csv("~/Documents/DATA/Codes/mie-theory/meidata-1010INFLUX.csv" ,header=F)) # low#
mie1 <- t(read.csv("~/Documents/DATA/Codes/mie-theory/meidata-1032INFLUX.csv" ,header=F)) # fit#
mie3 <- t(read.csv("~/Documents/DATA/Codes/mie-theory/meidata-1055INFLUX.csv" ,header=F)) # high#
mie4 <- t(read.csv("~/Documents/DATA/Codes/mie-theory/meidata-beadsINFLUX.csv" ,header=F)) # beads#
#
        id <- findInterval(1, mie4[,1]) # find 1 micron beads#
### MERGING + SD#
                      d <- 0.216#
                      e <- 0.939#
                      max.scatter <- 30#
                      min.scatter <- 0.00865#
                      c1 <- mean(mie4[id,2]) #
                      scatter <- 10^(seq(log10(min(mie1[,2]/c1)), log10(max(mie3[,2]/c1)),length.out=10000))#
#
                      s1 <- approx(mie1[,2]/c1, mie1[,1], xout=scatter)#
                      s2 <- approx(mie2[,2]/c1, mie2[,1], xout=scatter)#
                      s3 <- approx(mie3[,2]/c1, mie3[,1], xout=scatter)#
                      s4 <- approx(mie1[,2]/c1, d*(4/3*pi*(0.5*mie1[,1])^3)*e, xout=scatter)#
                      s5 <- approx(mie2[,2]/c1, d*(4/3*pi*(0.5*mie2[,1])^3)*e, xout=scatter)#
                      s6 <- approx(mie3[,2]/c1, d*(4/3*pi*(0.5*mie3[,1])^3)*e, xout=scatter)#
                      mie <- data.frame(cbind(scatter=s1$x,#
                                                  diam_mid=s1$y,diam_upr=s2$y,diam_lwr = s3$y,#
                                                  Qc_mid=s4$y, Qc_upr=s5$y, Qc_lwr=s6$y))#
                      mie <- subset(mie, scatter >= min.scatter & scatter <= max.scatter)#
                        summary(mie)
plot(merge2$norm.fsc,merge2$pgC.cell, log='xy', yaxt='n', xaxt='n', pch=NA,xlim=c(0.002,20), ylim=c(0.005,100), ylab=expression(paste("Qc (pgC cell"^{-1},")")), xlab="Normalized scatter (dimensionless)", main=paste("#",inst))#
lines(mie$scatter, mie[,paste0('Qc_mid')], col='red3', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_upr')], col='grey', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_lwr')], col='grey', lwd=2)#
with(merge2, arrows(norm.fsc, pgC.cell - pgC.cell.sd, norm.fsc, pgC.cell + pgC.cell.sd,  code = 3, length=0, col='grey', lwd=2))#
with(merge2, arrows(norm.fsc-norm.fsc.sd, pgC.cell, norm.fsc+norm.fsc.sd, pgC.cell,  code = 3, length=0,col='grey',lwd=2))#
points(merge2$norm.fsc,merge2$pgC.cell,bg=alpha(viridis(nrow(merge2)),0.5),cex=2, pch=21)#
axis(2, at=c(0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), labels=c(0.005,0.01, 0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), las=1)#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10),labels=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10))#
legend("topleft",legend=c(as.vector(merge2$Sample.ID),"Mie-based theoritical data", "(index of refraction 1.38 +/- 0.3)"), pch=c(rep(21,nrow(merge2)),NA, NA), lwd=c(rep(NA,nrow(merge2)),2, NA), bty='n',#
          pt.bg=alpha(viridis(nrow(merge2)),0.5), col=c(rep(1,nrow(merge2)),'red3'), text.font=c(rep(3,nrow(merge2)),1))
library(scales)#
library(viridis)#
path.to.git.repository <- "~/Documents/DATA/Codes/mie-theory"#
setwd(path.to.git.repository)#
#
##############################
### scatter normalization ####
##############################
#
beads740 <- read.csv("740-summary.csv")#
beads740$fsc <- 10^((beads740$fsc.corr.high/2^16)*3.5)#
id.740 <- which(beads740$size == 1) # find 1 micron beads#
beads740$normalized.fsc <- beads740$fsc/mean(beads740[id.740,'fsc'])#
beads740 <- beads740[order(beads740$size),]#
#
beads989<- read.csv("989-summary.csv")#
beads989$fsc <- 10^((beads989$fsc.corr.high/2^16)*3.5)#
id.989 <- which(beads989$size == 1) # find 1 micron beads#
beads989$normalized.fsc <- beads989$fsc/mean(beads989[id.989,'fsc'])#
beads989 <- beads989[order(beads989$size),]#
#
beads751 <- read.csv("751-summary.csv")#
beads751$fsc <- 10^((beads751$fsc.corr.high/2^16)*3.5)#
id.751<- which(beads751$size == 1) # find 1 micron beads#
beads751$normalized.fsc <- beads751 $fsc/mean(beads751 [id.751,'fsc'])#
beads751 <- beads751[order(beads751$size),]#
#####################
### OPTIMIZATION ####
#####################
library(DEoptim)#
#
# Mie theory fitting#
# n for phyto = 1.35- 1.41 # see Lehmuskero et al. Progr Oceanogr 2018#
mie2 <- t(read.csv("meidata-1010.csv" ,header=F)) # low#
mie1 <- t(read.csv("meidata-1032.csv" ,header=F)) # fit#
mie3 <- t(read.csv("meidata-1055.csv" ,header=F)) # high#
mie4 <- t(read.csv("meidata-beads.csv" ,header=F)) # particle of 1 µm, index of refraction of 1.6033#
#
# optimization routine#
sigma.lsq <- function(mie, beads, params){#
#
     c <- params[1]#
     b <- params[2]#
     id <- findInterval(beads$size, mie[,1])#
     scatt <- (mie[id,2]/c)^b#
#
           df <- data.frame(obs=beads$normalized.fsc, pred=scatt)#
      sigma <- mean(((df$obs - df$pred)/df$obs)^2,na.rm=T)#
      return(sigma)#
  }#
#######################################################
#### compare MIE prediction with calibration beads
par(mfrow=c(1,3), pty='s', cex=1.2)#
#
for(inst in c(740,751,989)){#
#
# inst <- 740#
#
### Optiomization#
#
if(inst == 740) beads <- beads740#
if(inst == 751) beads <- beads751#
if(inst == 989) beads <- beads989#
#
#beads1 <- subset(beads,  size > 0.3) # run to test optimzation across range of particle size, except 0.3 microns beads not properly analyzed.#
#
f <- function(params) sigma.lsq(mie=mie4, beads=beads, params)#
res <- DEoptim(f, lower=c(0,0), upper=c(10000,2), control=DEoptim.control(itermax=1000, reltol=1e-8,trace=100, steptol=100, strategy=2, parallelType=0))#
print(res$optim$bestval)#
params <- res$optim$bestmem # optimized 'c' and 'b' values#
print(params)#
### CREATE LOOKUP TABLE#
#d <- 0.220; e <- 1 # LINEAR Shalapyonok et al. 2001; 0.220 (Li et al. 1992, Veldhuis et al. 2004, and more studies agreed with 220 fg C um-3)#
#d <- 0.54; e <- 0.85 # EXPO Roy, S., Sathyendranath, S. & Platt, T. Size-partitioned phytoplankton carbon and carbon-to-chlorophyll ratio from ocean colour by an absorption-based bio-optical algorithm. Remote Sens. Environ. 194, 177–189 (2017).#
d <- 0.216; e <- 0.939 # EXPO Roy, 1. Menden-Deuer, S. & Lessard, E. J. Carbon to volume relationships for dinoflagellates, diatoms, and other protist plankton. Limnol. Oceanogr. 45, 569–579 (2000).#
#
max.scatter <- 30#
min.scatter <- 0.000865#
#
b <- params[2]#
c <- params[1]#
scatter <- 10^(seq(log10(min(mie2[,2]/c)), log10(max(mie3[,2]/c)),length.out=10000))#
#
s1 <- approx((mie1[,2]/c)^b, mie1[,1], xout=scatter)#
s2 <- approx((mie2[,2]/c)^b, mie2[,1], xout=scatter)#
s3 <- approx((mie3[,2]/c)^b, mie3[,1], xout=scatter)#
s4 <- approx((mie1[,2]/c)^b, d*(4/3*pi*(0.5*mie1[,1])^3)^e, xout=scatter)#
s5 <- approx((mie2[,2]/c)^b, d*(4/3*pi*(0.5*mie2[,1])^3)^e, xout=scatter)#
s6 <- approx((mie3[,2]/c)^b, d*(4/3*pi*(0.5*mie3[,1])^3)^e, xout=scatter)#
#
		if(inst == 740){mie_740 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_740_mid=s1$y,diam_740_upr=s2$y,diam_740_lwr = s3$y,#
                                                  Qc_740_mid=s4$y, Qc_740_upr=s5$y, Qc_740_lwr=s6$y))#
                      	mie_740 <- subset(mie_740, scatter >= min.scatter & scatter <= max.scatter)#
                     	}#
#
        if(inst == 751){mie_751 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_751_mid=s1$y,diam_751_upr=s2$y,diam_751_lwr = s3$y,#
                                                  Qc_751_mid=s4$y, Qc_751_upr=s5$y, Qc_751_lwr=s6$y))#
                      	mie_751 <- subset(mie_751, scatter >= min.scatter & scatter <= max.scatter)#
                      	}#
	    if(inst == 989){mie_989 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_989_mid=s1$y,diam_989_upr=s2$y,diam_989_lwr = s3$y,#
                                                  Qc_989_mid=s4$y, Qc_989_upr=s5$y, Qc_989_lwr=s6$y))#
                      	mie_989 <- subset(mie_989, scatter >= min.scatter & scatter <= max.scatter)#
						}#
#
plot(beads$normalized.fsc, beads$size,log='xy', xaxt='n',xlim=c(0.002,10), ylim=c(0.2,20), bg=alpha(viridis(nrow(beads)),0.5),cex=2, pch=21, xlab="Normalized scatter (dimensionless)", ylab="Cell diameter (µm)", las=1, main=paste(inst))#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5))#
axis(2, at=c(0.1,0.2,0.5,1,2,5,10,20),las=1)#
lines((mie4[,2]/c)^b, mie4[,1], col='red3')#
legend("topleft",cex=0.5, legend=c(paste(unique(beads$size), 'µm-beads'), "Mie-based model (n = 1.603)"), bty='n', pch=c(rep(21,nrow(beads)/2), NA), lwd=c(rep(NA,nrow(beads)/2), 2),col=c(rep(1,nrow(beads)/2),'red3'), pt.bg=alpha(c(viridis(nrow(beads)/2), 'red3'),0.5))#
#
}
mie <- data.frame(cbind(mie_740[,], mie_751[,-1], mie_989[,-1]))
summary(mie)
write.csv(mie, "calibrated-mie.csv", row.names=F, quote=F)
#########################
### LINEAR REGRESSION ####
##########################
library(scales)#
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-size-calibration"#
setwd(path.to.git.repository)#
.rainbow.cols <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow","#FF7F00", "red", "#7F0000"))#
#
culture <- read.csv("scatter_calibration.csv")#
culture$norm.fsc <- culture$fsc / culture$fsc.beads#
culture$norm.fsc.sd <- culture$fsc.sd / culture$fsc.beads#
culture$volume <- 4/3 * pi * (culture$diameter/2)^3#
culture$volume.sd <- culture$volume * culture$diameter.sd/culture$diameter#
#
culture2 <- aggregate(culture, by=list(culture$species), FUN=mean)#
culture2 <- culture2[order(culture2$norm.fsc),]#
#
inst <- "Influx"#
#
ir <- c(1.35/1.3371, 1.41/1.3371) # range given in Lehmuskero et al. Progr Oceanogr 2018#
mie2 <- t(read.csv("~/Documents/DATA/Codes/mie-theory/meidata-1010INFLUX.csv" ,header=F)) # low#
mie1 <- t(read.csv("~/Documents/DATA/Codes/mie-theory/meidata-1032INFLUX.csv" ,header=F)) # fit#
mie3 <- t(read.csv("~/Documents/DATA/Codes/mie-theory/meidata-1055INFLUX.csv" ,header=F)) # high#
mie4 <- t(read.csv("~/Documents/DATA/Codes/mie-theory/meidata-beadsINFLUX.csv" ,header=F)) # beads#
#
        id <- findInterval(1, mie4[,1]) # find 1 micron beads#
### MERGING + SD#
                      d <- 0.216#
                      e <- 0.939#
                      max.scatter <- 30#
                      min.scatter <- 0.000865#
                      c1 <- mean(mie4[id,2]) #
                      scatter <- 10^(seq(log10(min(mie1[,2]/c1)), log10(max(mie3[,2]/c1)),length.out=10000))#
#
                      s1 <- approx(mie1[,2]/c1, mie1[,1], xout=scatter)#
                      s2 <- approx(mie2[,2]/c1, mie2[,1], xout=scatter)#
                      s3 <- approx(mie3[,2]/c1, mie3[,1], xout=scatter)#
                      s4 <- approx(mie1[,2]/c1, d*(4/3*pi*(0.5*mie1[,1])^3)*e, xout=scatter)#
                      s5 <- approx(mie2[,2]/c1, d*(4/3*pi*(0.5*mie2[,1])^3)*e, xout=scatter)#
                      s6 <- approx(mie3[,2]/c1, d*(4/3*pi*(0.5*mie3[,1])^3)*e, xout=scatter)#
                      mie <- data.frame(cbind(scatter=s1$x,#
                                                  diam_mid=s1$y,diam_upr=s2$y,diam_lwr = s3$y,#
                                                  Qc_mid=s4$y, Qc_upr=s5$y, Qc_lwr=s6$y))#
                      mie <- subset(mie, scatter >= min.scatter & scatter <= max.scatter)#
                        summary(mie)
library(scales)#
path.to.git.repository <- "~/Documents/DATA/Codes/mie-theory/"#
setwd(path.to.git.repository)#
.rainbow.cols <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow","#FF7F00", "red", "#7F0000"))#
#
culture <- read.csv("~/Documents/DATA/Codes/fsc-size-calibrationscatter_calibration.csv")#
culture$norm.fsc <- culture$fsc / culture$fsc.beads#
culture$norm.fsc.sd <- culture$fsc.sd / culture$fsc.beads#
culture$volume <- 4/3 * pi * (culture$diameter/2)^3#
culture$volume.sd <- culture$volume * culture$diameter.sd/culture$diameter#
#
culture2 <- aggregate(culture, by=list(culture$species), FUN=mean)#
culture2 <- culture2[order(culture2$norm.fsc),]#
#
inst <- "Influx"#
#
ir <- c(1.35/1.3371, 1.41/1.3371) # range given in Lehmuskero et al. Progr Oceanogr 2018#
mie2 <- t(read.csv("meidata-1010INFLUX.csv" ,header=F)) # low#
mie1 <- t(read.csv("meidata-1032INFLUX.csv" ,header=F)) # fit#
mie3 <- t(read.csv("/meidata-1055INFLUX.csv" ,header=F)) # high#
mie4 <- t(read.csv("meidata-beadsINFLUX.csv" ,header=F)) # beads#
#
        id <- findInterval(1, mie4[,1]) # find 1 micron beads#
### MERGING + SD#
                      d <- 0.216#
                      e <- 0.939#
                      max.scatter <- 30#
                      min.scatter <- 0.000865#
                      c1 <- mean(mie4[id,2]) #
                      scatter <- 10^(seq(log10(min(mie1[,2]/c1)), log10(max(mie3[,2]/c1)),length.out=10000))#
#
                      s1 <- approx(mie1[,2]/c1, mie1[,1], xout=scatter)#
                      s2 <- approx(mie2[,2]/c1, mie2[,1], xout=scatter)#
                      s3 <- approx(mie3[,2]/c1, mie3[,1], xout=scatter)#
                      s4 <- approx(mie1[,2]/c1, d*(4/3*pi*(0.5*mie1[,1])^3)*e, xout=scatter)#
                      s5 <- approx(mie2[,2]/c1, d*(4/3*pi*(0.5*mie2[,1])^3)*e, xout=scatter)#
                      s6 <- approx(mie3[,2]/c1, d*(4/3*pi*(0.5*mie3[,1])^3)*e, xout=scatter)#
                      mie <- data.frame(cbind(scatter=s1$x,#
                                                  diam_mid=s1$y,diam_upr=s2$y,diam_lwr = s3$y,#
                                                  Qc_mid=s4$y, Qc_upr=s5$y, Qc_lwr=s6$y))#
                      mie <- subset(mie, scatter >= min.scatter & scatter <= max.scatter)#
                        summary(mie)#
#
                    write.csv(mie, "calibrated-mieINFLUX.csv", row.names=F, quote=F)
library(scales)#
path.to.git.repository <- "~/Documents/DATA/Codes/mie-theory/"#
setwd(path.to.git.repository)#
.rainbow.cols <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow","#FF7F00", "red", "#7F0000"))#
#
culture <- read.csv("~/Documents/DATA/Codes/fsc-size-calibrationscatter_calibration.csv")#
culture$norm.fsc <- culture$fsc / culture$fsc.beads#
culture$norm.fsc.sd <- culture$fsc.sd / culture$fsc.beads#
culture$volume <- 4/3 * pi * (culture$diameter/2)^3#
culture$volume.sd <- culture$volume * culture$diameter.sd/culture$diameter#
#
culture2 <- aggregate(culture, by=list(culture$species), FUN=mean)#
culture2 <- culture2[order(culture2$norm.fsc),]#
#
inst <- "Influx"#
#
ir <- c(1.35/1.3371, 1.41/1.3371) # range given in Lehmuskero et al. Progr Oceanogr 2018#
mie2 <- t(read.csv("meidata-1010INFLUX.csv" ,header=F)) # low#
mie1 <- t(read.csv("meidata-1032INFLUX.csv" ,header=F)) # fit#
mie3 <- t(read.csv("meidata-1055INFLUX.csv" ,header=F)) # high#
mie4 <- t(read.csv("meidata-beadsINFLUX.csv" ,header=F)) # beads#
#
        id <- findInterval(1, mie4[,1]) # find 1 micron beads#
### MERGING + SD#
                      d <- 0.216#
                      e <- 0.939#
                      max.scatter <- 30#
                      min.scatter <- 0.000865#
                      c1 <- mean(mie4[id,2]) #
                      scatter <- 10^(seq(log10(min(mie1[,2]/c1)), log10(max(mie3[,2]/c1)),length.out=10000))#
#
                      s1 <- approx(mie1[,2]/c1, mie1[,1], xout=scatter)#
                      s2 <- approx(mie2[,2]/c1, mie2[,1], xout=scatter)#
                      s3 <- approx(mie3[,2]/c1, mie3[,1], xout=scatter)#
                      s4 <- approx(mie1[,2]/c1, d*(4/3*pi*(0.5*mie1[,1])^3)*e, xout=scatter)#
                      s5 <- approx(mie2[,2]/c1, d*(4/3*pi*(0.5*mie2[,1])^3)*e, xout=scatter)#
                      s6 <- approx(mie3[,2]/c1, d*(4/3*pi*(0.5*mie3[,1])^3)*e, xout=scatter)#
                      mie <- data.frame(cbind(scatter=s1$x,#
                                                  diam_mid=s1$y,diam_upr=s2$y,diam_lwr = s3$y,#
                                                  Qc_mid=s4$y, Qc_upr=s5$y, Qc_lwr=s6$y))#
                      mie <- subset(mie, scatter >= min.scatter & scatter <= max.scatter)#
                        summary(mie)#
#
                    write.csv(mie, "calibrated-mieINFLUX.csv", row.names=F, quote=F)
library(scales)#
path.to.git.repository <- "~/Documents/DATA/Codes/mie-theory/"#
setwd(path.to.git.repository)#
.rainbow.cols <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow","#FF7F00", "red", "#7F0000"))#
#
culture <- read.csv("~/Documents/DATA/Codes/fsc-size-calibration/scatter_calibration.csv")#
culture$norm.fsc <- culture$fsc / culture$fsc.beads#
culture$norm.fsc.sd <- culture$fsc.sd / culture$fsc.beads#
culture$volume <- 4/3 * pi * (culture$diameter/2)^3#
culture$volume.sd <- culture$volume * culture$diameter.sd/culture$diameter#
#
culture2 <- aggregate(culture, by=list(culture$species), FUN=mean)#
culture2 <- culture2[order(culture2$norm.fsc),]#
#
inst <- "Influx"#
#
ir <- c(1.35/1.3371, 1.41/1.3371) # range given in Lehmuskero et al. Progr Oceanogr 2018#
mie2 <- t(read.csv("meidata-1010INFLUX.csv" ,header=F)) # low#
mie1 <- t(read.csv("meidata-1032INFLUX.csv" ,header=F)) # fit#
mie3 <- t(read.csv("meidata-1055INFLUX.csv" ,header=F)) # high#
mie4 <- t(read.csv("meidata-beadsINFLUX.csv" ,header=F)) # beads#
#
        id <- findInterval(1, mie4[,1]) # find 1 micron beads#
### MERGING + SD#
                      d <- 0.216#
                      e <- 0.939#
                      max.scatter <- 30#
                      min.scatter <- 0.000865#
                      c1 <- mean(mie4[id,2]) #
                      scatter <- 10^(seq(log10(min(mie1[,2]/c1)), log10(max(mie3[,2]/c1)),length.out=10000))#
#
                      s1 <- approx(mie1[,2]/c1, mie1[,1], xout=scatter)#
                      s2 <- approx(mie2[,2]/c1, mie2[,1], xout=scatter)#
                      s3 <- approx(mie3[,2]/c1, mie3[,1], xout=scatter)#
                      s4 <- approx(mie1[,2]/c1, d*(4/3*pi*(0.5*mie1[,1])^3)*e, xout=scatter)#
                      s5 <- approx(mie2[,2]/c1, d*(4/3*pi*(0.5*mie2[,1])^3)*e, xout=scatter)#
                      s6 <- approx(mie3[,2]/c1, d*(4/3*pi*(0.5*mie3[,1])^3)*e, xout=scatter)#
                      mie <- data.frame(cbind(scatter=s1$x,#
                                                  diam_mid=s1$y,diam_upr=s2$y,diam_lwr = s3$y,#
                                                  Qc_mid=s4$y, Qc_upr=s5$y, Qc_lwr=s6$y))#
                      mie <- subset(mie, scatter >= min.scatter & scatter <= max.scatter)#
                        summary(mie)#
#
                    write.csv(mie, "calibrated-mieINFLUX.csv", row.names=F, quote=F)
library(scales)#
.rainbow.cols <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow","#FF7F00", "red", "#7F0000"))#
#
inst <- "Influx"#
#
merge <- read.csv(paste0('~/Documents/DATA/Codes/fsc-poc-calibration',inst,"-Qc-cultures.csv"))#
merge2 <- subset(merge, Sample.ID !="PT 632" & Sample.ID !="EHUX" & Sample.ID !="LICMO")#& Sample.ID !="TAPS 3367" & Sample.ID !="TAPS 1135" & Sample.ID !="NAV")#
merge2 <- merge2[order(merge2$norm.fsc),]#
print(mean(merge2$norm.fsc))#
#
mie <- read.csv("calibrated-mieINFLUX.csv.csv")
library(scales)#
path.to.git.repository <- "~/Documents/DATA/Codes/mie-theory/"#
setwd(path.to.git.repository)#
.rainbow.cols <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow","#FF7F00", "red", "#7F0000"))#
#
culture <- read.csv("~/Documents/DATA/Codes/fsc-size-calibration/scatter_calibration.csv")#
culture$norm.fsc <- culture$fsc / culture$fsc.beads#
culture$norm.fsc.sd <- culture$fsc.sd / culture$fsc.beads#
culture$volume <- 4/3 * pi * (culture$diameter/2)^3#
culture$volume.sd <- culture$volume * culture$diameter.sd/culture$diameter#
#
culture2 <- aggregate(culture, by=list(culture$species), FUN=mean)#
culture2 <- culture2[order(culture2$norm.fsc),]#
#
inst <- "Influx"#
#
ir <- c(1.35/1.3371, 1.41/1.3371) # range given in Lehmuskero et al. Progr Oceanogr 2018#
mie2 <- t(read.csv("meidata-1010INFLUX.csv" ,header=F)) # low#
mie1 <- t(read.csv("meidata-1032INFLUX.csv" ,header=F)) # fit#
mie3 <- t(read.csv("meidata-1055INFLUX.csv" ,header=F)) # high#
mie4 <- t(read.csv("meidata-beadsINFLUX.csv" ,header=F)) # beads#
#
        id <- findInterval(1, mie4[,1]) # find 1 micron beads#
### MERGING + SD#
                      d <- 0.216#
                      e <- 0.939#
                      max.scatter <- 30#
                      min.scatter <- 0.000865#
                      c1 <- mean(mie4[id,2]) #
                      scatter <- 10^(seq(log10(min(mie1[,2]/c1)), log10(max(mie3[,2]/c1)),length.out=10000))#
#
                      s1 <- approx(mie1[,2]/c1, mie1[,1], xout=scatter)#
                      s2 <- approx(mie2[,2]/c1, mie2[,1], xout=scatter)#
                      s3 <- approx(mie3[,2]/c1, mie3[,1], xout=scatter)#
                      s4 <- approx(mie1[,2]/c1, d*(4/3*pi*(0.5*mie1[,1])^3)*e, xout=scatter)#
                      s5 <- approx(mie2[,2]/c1, d*(4/3*pi*(0.5*mie2[,1])^3)*e, xout=scatter)#
                      s6 <- approx(mie3[,2]/c1, d*(4/3*pi*(0.5*mie3[,1])^3)*e, xout=scatter)#
                      mie <- data.frame(cbind(scatter=s1$x,#
                                                  diam_mid=s1$y,diam_upr=s2$y,diam_lwr = s3$y,#
                                                  Qc_mid=s4$y, Qc_upr=s5$y, Qc_lwr=s6$y))#
                      mie <- subset(mie, scatter >= min.scatter & scatter <= max.scatter)#
                        summary(mie)#
#
                    write.csv(mie, "calibrated-mieINFLUX.csv", row.names=F, quote=F)
library(scales)#
.rainbow.cols <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow","#FF7F00", "red", "#7F0000"))#
#
inst <- "Influx"#
#
merge <- read.csv(paste0('~/Documents/DATA/Codes/fsc-poc-calibration/',inst,"-Qc-cultures.csv"))#
merge2 <- subset(merge, Sample.ID !="PT 632" & Sample.ID !="EHUX" & Sample.ID !="LICMO")#& Sample.ID !="TAPS 3367" & Sample.ID !="TAPS 1135" & Sample.ID !="NAV")#
merge2 <- merge2[order(merge2$norm.fsc),]#
print(mean(merge2$norm.fsc))#
#
mie <- read.csv("calibrated-mieINFLUX.csv.csv")
library(scales)#
path.to.git.repository <- "~/Documents/DATA/Codes/mie-theory/"#
setwd(path.to.git.repository)#
.rainbow.cols <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow","#FF7F00", "red", "#7F0000"))#
#
culture <- read.csv("~/Documents/DATA/Codes/fsc-size-calibration/scatter_calibration.csv")#
culture$norm.fsc <- culture$fsc / culture$fsc.beads#
culture$norm.fsc.sd <- culture$fsc.sd / culture$fsc.beads#
culture$volume <- 4/3 * pi * (culture$diameter/2)^3#
culture$volume.sd <- culture$volume * culture$diameter.sd/culture$diameter#
#
culture2 <- aggregate(culture, by=list(culture$species), FUN=mean)#
culture2 <- culture2[order(culture2$norm.fsc),]#
#
inst <- "Influx"#
#
ir <- c(1.35/1.3371, 1.41/1.3371) # range given in Lehmuskero et al. Progr Oceanogr 2018#
mie2 <- t(read.csv("meidata-1010INFLUX.csv" ,header=F)) # low#
mie1 <- t(read.csv("meidata-1032INFLUX.csv" ,header=F)) # fit#
mie3 <- t(read.csv("meidata-1055INFLUX.csv" ,header=F)) # high#
mie4 <- t(read.csv("meidata-beadsINFLUX.csv" ,header=F)) # beads#
#
        id <- findInterval(1, mie4[,1]) # find 1 micron beads#
### MERGING + SD#
                      d <- 0.216#
                      e <- 0.939#
                      max.scatter <- 30#
                      min.scatter <- 0.000865#
                      c1 <- mean(mie4[id,2]) #
                      scatter <- 10^(seq(log10(min(mie1[,2]/c1)), log10(max(mie3[,2]/c1)),length.out=10000))#
#
                      s1 <- approx(mie1[,2]/c1, mie1[,1], xout=scatter)#
                      s2 <- approx(mie2[,2]/c1, mie2[,1], xout=scatter)#
                      s3 <- approx(mie3[,2]/c1, mie3[,1], xout=scatter)#
                      s4 <- approx(mie1[,2]/c1, d*(4/3*pi*(0.5*mie1[,1])^3)*e, xout=scatter)#
                      s5 <- approx(mie2[,2]/c1, d*(4/3*pi*(0.5*mie2[,1])^3)*e, xout=scatter)#
                      s6 <- approx(mie3[,2]/c1, d*(4/3*pi*(0.5*mie3[,1])^3)*e, xout=scatter)#
                      mie <- data.frame(cbind(scatter=s1$x,#
                                                  diam_mid=s1$y,diam_upr=s2$y,diam_lwr = s3$y,#
                                                  Qc_mid=s4$y, Qc_upr=s5$y, Qc_lwr=s6$y))#
                      mie <- subset(mie, scatter >= min.scatter & scatter <= max.scatter)#
                        summary(mie)#
#
                    write.csv(mie, "calibrated-mieINFLUX.csv", row.names=F, quote=F)
mie <- read.csv("calibrated-mieINFLUX.csv.csv")
library(scales)#
.rainbow.cols <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow","#FF7F00", "red", "#7F0000"))#
#
inst <- "Influx"#
#
merge <- read.csv(paste0('~/Documents/DATA/Codes/fsc-poc-calibration/',inst,"-Qc-cultures.csv"))#
merge2 <- subset(merge, Sample.ID !="PT 632" & Sample.ID !="EHUX" & Sample.ID !="LICMO")#& Sample.ID !="TAPS 3367" & Sample.ID !="TAPS 1135" & Sample.ID !="NAV")#
merge2 <- merge2[order(merge2$norm.fsc),]#
print(mean(merge2$norm.fsc))#
#
mie <- read.csv("calibrated-mieINFLUX.csv")
plot(merge2$norm.fsc,merge2$pgC.cell, log='xy', yaxt='n', xaxt='n', pch=NA,xlim=c(0.002,20), ylim=c(0.005,100), ylab=expression(paste("Qc (pgC cell"^{-1},")")), xlab="Normalized scatter (dimensionless)", main=paste("#",inst))#
lines(mie$scatter, mie[,paste0('Qc_mid')], col='red3', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_upr')], col='grey', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_lwr')], col='grey', lwd=2)#
with(merge2, arrows(norm.fsc, pgC.cell - pgC.cell.sd, norm.fsc, pgC.cell + pgC.cell.sd,  code = 3, length=0, col='grey', lwd=2))#
with(merge2, arrows(norm.fsc-norm.fsc.sd, pgC.cell, norm.fsc+norm.fsc.sd, pgC.cell,  code = 3, length=0,col='grey',lwd=2))#
points(merge2$norm.fsc,merge2$pgC.cell,bg=alpha(viridis(nrow(merge2)),0.5),cex=2, pch=21)#
axis(2, at=c(0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), labels=c(0.005,0.01, 0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), las=1)#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10),labels=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10))#
legend("topleft",legend=c(as.vector(merge2$Sample.ID),"Mie-based theoritical data", "(index of refraction 1.38 +/- 0.3)"), pch=c(rep(21,nrow(merge2)),NA, NA), lwd=c(rep(NA,nrow(merge2)),2, NA), bty='n',#
          pt.bg=alpha(viridis(nrow(merge2)),0.5), col=c(rep(1,nrow(merge2)),'red3'), text.font=c(rep(3,nrow(merge2)),1))
png("INFLUX-Mie-scatter.png",width=6, height=6, unit='in', res=400)#
#
plot(merge2$norm.fsc,merge2$pgC.cell, log='xy', yaxt='n', xaxt='n', pch=NA,xlim=c(0.002,20), ylim=c(0.005,100), ylab=expression(paste("Qc (pgC cell"^{-1},")")), xlab="Normalized scatter (dimensionless)", main=paste("#",inst))#
lines(mie$scatter, mie[,paste0('Qc_mid')], col='red3', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_upr')], col='grey', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_lwr')], col='grey', lwd=2)#
with(merge2, arrows(norm.fsc, pgC.cell - pgC.cell.sd, norm.fsc, pgC.cell + pgC.cell.sd,  code = 3, length=0, col='grey', lwd=2))#
with(merge2, arrows(norm.fsc-norm.fsc.sd, pgC.cell, norm.fsc+norm.fsc.sd, pgC.cell,  code = 3, length=0,col='grey',lwd=2))#
points(merge2$norm.fsc,merge2$pgC.cell,bg=alpha(viridis(nrow(merge2)),0.5),cex=2, pch=21)#
axis(2, at=c(0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), labels=c(0.005,0.01, 0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), las=1)#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10),labels=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10))#
legend("topleft",legend=c(as.vector(merge2$Sample.ID),"Mie-based theoritical data", "(index of refraction 1.38 +/- 0.3)"), pch=c(rep(21,nrow(merge2)),NA, NA), lwd=c(rep(NA,nrow(merge2)),2, NA), bty='n',#
          pt.bg=alpha(viridis(nrow(merge2)),0.5), col=c(rep(1,nrow(merge2)),'red3'), text.font=c(rep(3,nrow(merge2)),1))#
#
dev.off()
library(scales)#
library(viridis)#
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-size-calibration"#
setwd(path.to.git.repository)#
#
##############################
### scatter normalization ####
##############################
#
beads740 <- read.csv("740-summary.csv")#
beads740$fsc <- 10^((beads740$fsc.corr.high/2^16)*3.5)#
id.740 <- which(beads740$size == 1) # find 1 micron beads#
beads740$normalized.fsc <- beads740$fsc/mean(beads740[id.740,'fsc'])#
beads740 <- beads740[order(beads740$size),]#
#
beads989<- read.csv("989-summary.csv")#
beads989$fsc <- 10^((beads989$fsc.corr.high/2^16)*3.5)#
id.989 <- which(beads989$size == 1) # find 1 micron beads#
beads989$normalized.fsc <- beads989$fsc/mean(beads989[id.989,'fsc'])#
beads989 <- beads989[order(beads989$size),]#
#
beads751 <- read.csv("751-summary.csv")#
beads751$fsc <- 10^((beads751$fsc.corr.high/2^16)*3.5)#
id.751<- which(beads751$size == 1) # find 1 micron beads#
beads751$normalized.fsc <- beads751 $fsc/mean(beads751 [id.751,'fsc'])#
beads751 <- beads751[order(beads751$size),]#
#####################
### OPTIMIZATION ####
#####################
library(DEoptim)
library(scales)#
library(viridis)#
path.to.git.repository <- "~/Documents/DATA/Codes/mie-theory"#
setwd(path.to.git.repository)#
#
##############################
### scatter normalization ####
##############################
#
beads740 <- read.csv("740-summary.csv")#
beads740$fsc <- 10^((beads740$fsc.corr.high/2^16)*3.5)#
id.740 <- which(beads740$size == 1) # find 1 micron beads#
beads740$normalized.fsc <- beads740$fsc/mean(beads740[id.740,'fsc'])#
beads740 <- beads740[order(beads740$size),]#
#
beads989<- read.csv("989-summary.csv")#
beads989$fsc <- 10^((beads989$fsc.corr.high/2^16)*3.5)#
id.989 <- which(beads989$size == 1) # find 1 micron beads#
beads989$normalized.fsc <- beads989$fsc/mean(beads989[id.989,'fsc'])#
beads989 <- beads989[order(beads989$size),]#
#
beads751 <- read.csv("751-summary.csv")#
beads751$fsc <- 10^((beads751$fsc.corr.high/2^16)*3.5)#
id.751<- which(beads751$size == 1) # find 1 micron beads#
beads751$normalized.fsc <- beads751 $fsc/mean(beads751 [id.751,'fsc'])#
beads751 <- beads751[order(beads751$size),]#
#####################
### OPTIMIZATION ####
#####################
library(DEoptim)#
#
# Mie theory fitting#
# n for phyto = 1.35- 1.41 # see Lehmuskero et al. Progr Oceanogr 2018#
mie2 <- t(read.csv("meidata-1010.csv" ,header=F)) # low#
mie1 <- t(read.csv("meidata-1032.csv" ,header=F)) # fit#
mie3 <- t(read.csv("meidata-1055.csv" ,header=F)) # high#
mie4 <- t(read.csv("meidata-beads.csv" ,header=F)) # particle of 1 µm, index of refraction of 1.6033#
#
# optimization routine#
sigma.lsq <- function(mie, beads, params){#
#
     c <- params[1]#
     b <- params[2]#
     id <- findInterval(beads$size, mie[,1])#
     scatt <- (mie[id,2]/c)^b#
#
           df <- data.frame(obs=beads$normalized.fsc, pred=scatt)#
      sigma <- mean(((df$obs - df$pred)/df$obs)^2,na.rm=T)#
      return(sigma)#
  }#
#######################################################
#### compare MIE prediction with calibration beads ####
#######################################################
png("Mie-beads-scatter.png",width=12, height=6, unit='in', res=400)#
#
par(mfrow=c(1,3), pty='s', cex=1.2)#
#
for(inst in c(740,751,989)){#
#
# inst <- 740#
#
### Optiomization#
#
if(inst == 740) beads <- beads740#
if(inst == 751) beads <- beads751#
if(inst == 989) beads <- beads989#
#
#beads1 <- subset(beads,  size > 0.3) # run to test optimzation across range of particle size, except 0.3 microns beads not properly analyzed.#
#
f <- function(params) sigma.lsq(mie=mie4, beads=beads, params)#
res <- DEoptim(f, lower=c(0,0), upper=c(10000,2), control=DEoptim.control(itermax=1000, reltol=1e-8,trace=100, steptol=100, strategy=2, parallelType=0))#
print(res$optim$bestval)#
params <- res$optim$bestmem # optimized 'c' and 'b' values#
print(params)#
### CREATE LOOKUP TABLE#
#d <- 0.220; e <- 1 # LINEAR Shalapyonok et al. 2001; 0.220 (Li et al. 1992, Veldhuis et al. 2004, and more studies agreed with 220 fg C um-3)#
#d <- 0.54; e <- 0.85 # EXPO Roy, S., Sathyendranath, S. & Platt, T. Size-partitioned phytoplankton carbon and carbon-to-chlorophyll ratio from ocean colour by an absorption-based bio-optical algorithm. Remote Sens. Environ. 194, 177–189 (2017).#
d <- 0.216; e <- 0.939 # EXPO Roy, 1. Menden-Deuer, S. & Lessard, E. J. Carbon to volume relationships for dinoflagellates, diatoms, and other protist plankton. Limnol. Oceanogr. 45, 569–579 (2000).#
#
max.scatter <- 30#
min.scatter <- 0.000865#
#
b <- params[2]#
c <- params[1]#
scatter <- 10^(seq(log10(min(mie2[,2]/c)), log10(max(mie3[,2]/c)),length.out=10000))#
#
s1 <- approx((mie1[,2]/c)^b, mie1[,1], xout=scatter)#
s2 <- approx((mie2[,2]/c)^b, mie2[,1], xout=scatter)#
s3 <- approx((mie3[,2]/c)^b, mie3[,1], xout=scatter)#
s4 <- approx((mie1[,2]/c)^b, d*(4/3*pi*(0.5*mie1[,1])^3)^e, xout=scatter)#
s5 <- approx((mie2[,2]/c)^b, d*(4/3*pi*(0.5*mie2[,1])^3)^e, xout=scatter)#
s6 <- approx((mie3[,2]/c)^b, d*(4/3*pi*(0.5*mie3[,1])^3)^e, xout=scatter)#
#
		if(inst == 740){mie_740 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_740_mid=s1$y,diam_740_upr=s2$y,diam_740_lwr = s3$y,#
                                                  Qc_740_mid=s4$y, Qc_740_upr=s5$y, Qc_740_lwr=s6$y))#
                      	mie_740 <- subset(mie_740, scatter >= min.scatter & scatter <= max.scatter)#
                     	}#
#
        if(inst == 751){mie_751 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_751_mid=s1$y,diam_751_upr=s2$y,diam_751_lwr = s3$y,#
                                                  Qc_751_mid=s4$y, Qc_751_upr=s5$y, Qc_751_lwr=s6$y))#
                      	mie_751 <- subset(mie_751, scatter >= min.scatter & scatter <= max.scatter)#
                      	}#
	    if(inst == 989){mie_989 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_989_mid=s1$y,diam_989_upr=s2$y,diam_989_lwr = s3$y,#
                                                  Qc_989_mid=s4$y, Qc_989_upr=s5$y, Qc_989_lwr=s6$y))#
                      	mie_989 <- subset(mie_989, scatter >= min.scatter & scatter <= max.scatter)#
						}#
#
plot(beads$normalized.fsc, beads$size,log='xy', xaxt='n',xlim=c(0.002,10), ylim=c(0.2,20), bg=alpha(viridis(nrow(beads)),0.5),cex=2, pch=21, xlab="Normalized scatter (dimensionless)", ylab="Cell diameter (µm)", las=1, main=paste(inst))#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5))#
axis(2, at=c(0.1,0.2,0.5,1,2,5,10,20),las=1)#
lines((mie4[,2]/c)^b, mie4[,1], col='red3')#
legend("topleft",cex=0.5, legend=c(paste(unique(beads$size), 'µm-beads'), "Mie-based model (n = 1.603)"), bty='n', pch=c(rep(21,nrow(beads)/2), NA), lwd=c(rep(NA,nrow(beads)/2), 2),col=c(rep(1,nrow(beads)/2),'red3'), pt.bg=alpha(c(viridis(nrow(beads)/2), 'red3'),0.5))#
#
}#
#
dev.off()
library(scales)#
library(viridis)#
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-size-calibration"#
setwd(path.to.git.repository)#
#
##############################
### scatter normalization ####
##############################
#
beads740 <- read.csv("740-summary.csv")#
beads740$fsc <- 10^((beads740$fsc.corr.high/2^16)*3.5)#
id.740 <- which(beads740$size == 1) # find 1 micron beads#
beads740$normalized.fsc <- beads740$fsc/mean(beads740[id.740,'fsc'])#
beads740 <- beads740[order(beads740$size),]#
#
beads989<- read.csv("989-summary.csv")#
beads989$fsc <- 10^((beads989$fsc.corr.high/2^16)*3.5)#
id.989 <- which(beads989$size == 1) # find 1 micron beads#
beads989$normalized.fsc <- beads989$fsc/mean(beads989[id.989,'fsc'])#
beads989 <- beads989[order(beads989$size),]#
#
beads751 <- read.csv("751-summary.csv")#
beads751$fsc <- 10^((beads751$fsc.corr.high/2^16)*3.5)#
id.751<- which(beads751$size == 1) # find 1 micron beads#
beads751$normalized.fsc <- beads751 $fsc/mean(beads751 [id.751,'fsc'])#
beads751 <- beads751[order(beads751$size),]#
#####################
### OPTIMIZATION ####
#####################
library(DEoptim)#
#
# Mie theory fitting#
# n for phyto = 1.35- 1.41 # see Lehmuskero et al. Progr Oceanogr 2018#
mie2 <- t(read.csv("meidata-1010.csv" ,header=F)) # low#
mie1 <- t(read.csv("meidata-1032.csv" ,header=F)) # fit#
mie3 <- t(read.csv("meidata-1055.csv" ,header=F)) # high#
mie4 <- t(read.csv("meidata-beads.csv" ,header=F)) # particle of 1 µm, index of refraction of 1.6033#
#
# optimization routine#
sigma.lsq <- function(mie, beads, params){#
#
     c <- params[1]#
     b <- params[2]#
     id <- findInterval(beads$size, mie[,1])#
     scatt <- (mie[id,2]/c)^b#
#
           df <- data.frame(obs=beads$normalized.fsc, pred=scatt)#
      sigma <- mean(((df$obs - df$pred)/df$obs)^2,na.rm=T)#
      return(sigma)#
  }#
#######################################################
#### compare MIE prediction with calibration beads ####
#######################################################
png("Mie-beads-scatter.png",width=12, height=6, unit='in', res=400)#
#
par(mfrow=c(1,3), pty='s', cex=1.2)#
#
for(inst in c(740,751,989)){#
#
# inst <- 740#
#
### Optiomization#
#
if(inst == 740) beads <- beads740#
if(inst == 751) beads <- beads751#
if(inst == 989) beads <- beads989#
#
#beads1 <- subset(beads,  size > 0.3) # run to test optimzation across range of particle size, except 0.3 microns beads not properly analyzed.#
#
f <- function(params) sigma.lsq(mie=mie4, beads=beads, params)#
res <- DEoptim(f, lower=c(0,0), upper=c(10000,2), control=DEoptim.control(itermax=1000, reltol=1e-8,trace=100, steptol=100, strategy=2, parallelType=0))#
print(res$optim$bestval)#
params <- res$optim$bestmem # optimized 'c' and 'b' values#
print(params)#
### CREATE LOOKUP TABLE#
#d <- 0.220; e <- 1 # LINEAR Shalapyonok et al. 2001; 0.220 (Li et al. 1992, Veldhuis et al. 2004, and more studies agreed with 220 fg C um-3)#
#d <- 0.54; e <- 0.85 # EXPO Roy, S., Sathyendranath, S. & Platt, T. Size-partitioned phytoplankton carbon and carbon-to-chlorophyll ratio from ocean colour by an absorption-based bio-optical algorithm. Remote Sens. Environ. 194, 177–189 (2017).#
d <- 0.216; e <- 0.939 # EXPO Roy, 1. Menden-Deuer, S. & Lessard, E. J. Carbon to volume relationships for dinoflagellates, diatoms, and other protist plankton. Limnol. Oceanogr. 45, 569–579 (2000).#
#
max.scatter <- 30#
min.scatter <- 0.000865#
#
b <- params[2]#
c <- params[1]#
scatter <- 10^(seq(log10(min(mie2[,2]/c)), log10(max(mie3[,2]/c)),length.out=10000))#
#
s1 <- approx((mie1[,2]/c)^b, mie1[,1], xout=scatter)#
s2 <- approx((mie2[,2]/c)^b, mie2[,1], xout=scatter)#
s3 <- approx((mie3[,2]/c)^b, mie3[,1], xout=scatter)#
s4 <- approx((mie1[,2]/c)^b, d*(4/3*pi*(0.5*mie1[,1])^3)^e, xout=scatter)#
s5 <- approx((mie2[,2]/c)^b, d*(4/3*pi*(0.5*mie2[,1])^3)^e, xout=scatter)#
s6 <- approx((mie3[,2]/c)^b, d*(4/3*pi*(0.5*mie3[,1])^3)^e, xout=scatter)#
#
		if(inst == 740){mie_740 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_740_mid=s1$y,diam_740_upr=s2$y,diam_740_lwr = s3$y,#
                                                  Qc_740_mid=s4$y, Qc_740_upr=s5$y, Qc_740_lwr=s6$y))#
                      	mie_740 <- subset(mie_740, scatter >= min.scatter & scatter <= max.scatter)#
                     	}#
#
        if(inst == 751){mie_751 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_751_mid=s1$y,diam_751_upr=s2$y,diam_751_lwr = s3$y,#
                                                  Qc_751_mid=s4$y, Qc_751_upr=s5$y, Qc_751_lwr=s6$y))#
                      	mie_751 <- subset(mie_751, scatter >= min.scatter & scatter <= max.scatter)#
                      	}#
	    if(inst == 989){mie_989 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_989_mid=s1$y,diam_989_upr=s2$y,diam_989_lwr = s3$y,#
                                                  Qc_989_mid=s4$y, Qc_989_upr=s5$y, Qc_989_lwr=s6$y))#
                      	mie_989 <- subset(mie_989, scatter >= min.scatter & scatter <= max.scatter)#
						}#
#
plot(beads$normalized.fsc, beads$size,log='xy', xaxt='n',xlim=c(0.002,10), ylim=c(0.2,20), bg=alpha(viridis(nrow(beads)),0.5),cex=2, pch=21, xlab="Normalized scatter (dimensionless)", ylab="Cell diameter (µm)", las=1, main=paste(inst))#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5))#
axis(2, at=c(0.1,0.2,0.5,1,2,5,10,20),las=1)#
lines((mie4[,2]/c)^b, mie4[,1], col='red3')#
legend("topleft",cex=0.5, legend=c(paste(unique(beads$size), 'µm-beads'), "Mie-based model (n = 1.603)"), bty='n', pch=c(rep(21,nrow(beads)/2), NA), lwd=c(rep(NA,nrow(beads)/2), 2),col=c(rep(1,nrow(beads)/2),'red3'), pt.bg=alpha(c(viridis(nrow(beads)/2), 'red3'),0.5))#
#
}#
#
dev.off()
library(scales)#
library(viridis)#
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-size-calibration"#
setwd(path.to.git.repository)#
#
##############################
### scatter normalization ####
##############################
#
beads740 <- read.csv("740-summary.csv")#
beads740$fsc <- 10^((beads740$fsc.corr.high/2^16)*3.5)#
id.740 <- which(beads740$size == 1) # find 1 micron beads#
beads740$normalized.fsc <- beads740$fsc/mean(beads740[id.740,'fsc'])#
beads740 <- beads740[order(beads740$size),]#
#
beads989<- read.csv("989-summary.csv")#
beads989$fsc <- 10^((beads989$fsc.corr.high/2^16)*3.5)#
id.989 <- which(beads989$size == 1) # find 1 micron beads#
beads989$normalized.fsc <- beads989$fsc/mean(beads989[id.989,'fsc'])#
beads989 <- beads989[order(beads989$size),]#
#
beads751 <- read.csv("751-summary.csv")#
beads751$fsc <- 10^((beads751$fsc.corr.high/2^16)*3.5)#
id.751<- which(beads751$size == 1) # find 1 micron beads#
beads751$normalized.fsc <- beads751 $fsc/mean(beads751 [id.751,'fsc'])#
beads751 <- beads751[order(beads751$size),]#
#####################
### OPTIMIZATION ####
#####################
library(DEoptim)#
#
# Mie theory fitting#
# n for phyto = 1.35- 1.41 # see Lehmuskero et al. Progr Oceanogr 2018#
mie2 <- t(read.csv("meidata-1010.csv" ,header=F)) # low#
mie1 <- t(read.csv("meidata-1032.csv" ,header=F)) # fit#
mie3 <- t(read.csv("meidata-1055.csv" ,header=F)) # high#
mie4 <- t(read.csv("meidata-beads.csv" ,header=F)) # particle of 1 µm, index of refraction of 1.6033
# optimization routine#
sigma.lsq <- function(mie, beads, params){#
#
     c <- params[1]#
     b <- params[2]#
     id <- findInterval(beads$size, mie[,1])#
     scatt <- (mie[id,2]/c)^b#
#
           df <- data.frame(obs=beads$normalized.fsc, pred=scatt)#
      sigma <- mean(((df$obs - df$pred)/df$obs)^2,na.rm=T)#
      return(sigma)#
  }#
#######################################################
#### compare MIE prediction with calibration beads ####
#######################################################
png("Mie-beads-scatter.png",width=12, height=6, unit='in', res=400)#
#
par(mfrow=c(1,3), pty='s', cex=1.2)#
#
for(inst in c(740,751,989)){#
#
# inst <- 740#
#
### Optiomization#
#
if(inst == 740) beads <- beads740#
if(inst == 751) beads <- beads751#
if(inst == 989) beads <- beads989#
#
#beads1 <- subset(beads,  size > 0.3) # run to test optimzation across range of particle size, except 0.3 microns beads not properly analyzed.#
#
f <- function(params) sigma.lsq(mie=mie4, beads=beads, params)#
res <- DEoptim(f, lower=c(0,0), upper=c(10000,2), control=DEoptim.control(itermax=1000, reltol=1e-8,trace=100, steptol=100, strategy=2, parallelType=0))#
print(res$optim$bestval)#
params <- res$optim$bestmem # optimized 'c' and 'b' values#
print(params)#
### CREATE LOOKUP TABLE#
#d <- 0.220; e <- 1 # LINEAR Shalapyonok et al. 2001; 0.220 (Li et al. 1992, Veldhuis et al. 2004, and more studies agreed with 220 fg C um-3)#
#d <- 0.54; e <- 0.85 # EXPO Roy, S., Sathyendranath, S. & Platt, T. Size-partitioned phytoplankton carbon and carbon-to-chlorophyll ratio from ocean colour by an absorption-based bio-optical algorithm. Remote Sens. Environ. 194, 177–189 (2017).#
d <- 0.216; e <- 0.939 # EXPO Roy, 1. Menden-Deuer, S. & Lessard, E. J. Carbon to volume relationships for dinoflagellates, diatoms, and other protist plankton. Limnol. Oceanogr. 45, 569–579 (2000).#
#
max.scatter <- 30#
min.scatter <- 0.000865#
#
b <- params[2]#
c <- params[1]#
scatter <- 10^(seq(log10(min(mie2[,2]/c)), log10(max(mie3[,2]/c)),length.out=10000))#
#
s1 <- approx((mie1[,2]/c)^b, mie1[,1], xout=scatter)#
s2 <- approx((mie2[,2]/c)^b, mie2[,1], xout=scatter)#
s3 <- approx((mie3[,2]/c)^b, mie3[,1], xout=scatter)#
s4 <- approx((mie1[,2]/c)^b, d*(4/3*pi*(0.5*mie1[,1])^3)^e, xout=scatter)#
s5 <- approx((mie2[,2]/c)^b, d*(4/3*pi*(0.5*mie2[,1])^3)^e, xout=scatter)#
s6 <- approx((mie3[,2]/c)^b, d*(4/3*pi*(0.5*mie3[,1])^3)^e, xout=scatter)#
#
		if(inst == 740){mie_740 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_740_mid=s1$y,diam_740_upr=s2$y,diam_740_lwr = s3$y,#
                                                  Qc_740_mid=s4$y, Qc_740_upr=s5$y, Qc_740_lwr=s6$y))#
                      	mie_740 <- subset(mie_740, scatter >= min.scatter & scatter <= max.scatter)#
                     	}#
#
        if(inst == 751){mie_751 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_751_mid=s1$y,diam_751_upr=s2$y,diam_751_lwr = s3$y,#
                                                  Qc_751_mid=s4$y, Qc_751_upr=s5$y, Qc_751_lwr=s6$y))#
                      	mie_751 <- subset(mie_751, scatter >= min.scatter & scatter <= max.scatter)#
                      	}#
	    if(inst == 989){mie_989 <- data.frame(cbind(scatter=s1$x,#
                                                  diam_989_mid=s1$y,diam_989_upr=s2$y,diam_989_lwr = s3$y,#
                                                  Qc_989_mid=s4$y, Qc_989_upr=s5$y, Qc_989_lwr=s6$y))#
                      	mie_989 <- subset(mie_989, scatter >= min.scatter & scatter <= max.scatter)#
						}#
#
plot(beads$normalized.fsc, beads$size,log='xy', xaxt='n',xlim=c(0.002,10), ylim=c(0.2,20), bg=alpha(viridis(nrow(beads)),0.5),cex=2, pch=21, xlab="Normalized scatter (dimensionless)", ylab="Cell diameter (µm)", las=1, main=paste(inst))#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5))#
axis(2, at=c(0.1,0.2,0.5,1,2,5,10,20),las=1)#
lines((mie4[,2]/c)^b, mie4[,1], col='red3')#
legend("topleft",cex=0.5, legend=c(paste(unique(beads$size), 'µm-beads'), "Mie-based model (n = 1.603)"), bty='n', pch=c(rep(21,nrow(beads)/2), NA), lwd=c(rep(NA,nrow(beads)/2), 2),col=c(rep(1,nrow(beads)/2),'red3'), pt.bg=alpha(c(viridis(nrow(beads)/2), 'red3'),0.5))#
#
}#
#
dev.off()
q <- 'mid'#
id <- findInterval(0.6, mie[,paste0('diam_740_',q)])#
mie[id,paste0('Qc_740_',q)]*1000
head(mie)
mie <- data.frame(cbind(mie_740[,], mie_751[,-1], mie_989[,-1]))#
summary(mie)
q <- 'mid'#
id <- findInterval(0.6, mie[,paste0('diam_740_',q)])#
mie[id,paste0('Qc_740_',q)]*1000
write.csv(mie, "calibrated-mie.csv", row.names=F, quote=F)
library(scales)#
library(viridis)#
#
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-size-calibration"#
setwd(path.to.git.repository)#
#
### SIZE#
culture <- read.csv("scatter_calibration.csv")#
culture$norm.fsc <- culture$fsc / culture$fsc.beads#
culture$norm.fsc.sd <- culture$fsc.sd / culture$fsc.beads#
culture$volume <- 4/3 * pi * (culture$diameter/2)^3#
culture$volume.sd <- culture$volume * culture$diameter.sd/culture$diameter#
#
culture2 <- aggregate(culture, by=list(culture$species), FUN=mean)#
culture2 <- subset(culture2, Group.1 !="Phaeodactylum tricornutum") # remove non-spherical cells#
culture2 <- culture2[order(culture2$norm.fsc),]#
#
mie <- read.csv("calibrated-mie.csv")#
inst <- 740
par(mfrow=c(1,1), pty='s',cex=1.2)#
  plot(culture2$norm.fsc, culture2$diameter, log='xy', pch=NA,ylab=substitute(paste("Cell diameter (",mu,"m)")), xlab="Normalized scatter (dimensionless)",cex=2, xaxt='n', yaxt='n', xlim=c(0.002,10), ylim=c(0.2,20), main=paste(inst))#
  with(culture2, arrows(norm.fsc, diameter-culture2$diameter.sd, norm.fsc, diameter + culture2$diameter.sd,  code = 3, length=0, col='grey',lwd=2))#
  with(culture2, arrows(norm.fsc-norm.fsc.sd, diameter, norm.fsc+norm.fsc.sd, diameter,  code = 3, length=0,col='grey',lwd=2))#
  lines(mie$scatter, mie[,paste0("diam_",inst,"_mid")], col='red3', lwd=2)#
  lines(mie$scatter, mie[,paste0("diam_",inst,"_upr")], col='grey', lwd=2)#
  lines(mie$scatter, mie[,paste0("diam_",inst,"_lwr")], col='grey', lwd=2)#
  axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5))#
  axis(2, at=c(0.1,0.2,0.5,1,2,5,10,20),las=1)#
  points(culture2$norm.fsc, culture2$diameter, bg=alpha(viridis(nrow(culture2)),0.5), pch=21,cex=2)#
  legend("topleft",legend=c(as.vector(culture2$Group.1), "Mie-based model (n = 1.38 +/- 0.3)"), cex=0.5, pch=c(rep(21,nrow(culture2)),NA), lwd=c(rep(NA,nrow(culture2)),2), bty='n',#
            pt.bg=alpha(viridis(nrow(culture2)),0.5), col=c(rep(1,nrow(culture2)),'red3'), text.font=c(rep(3,nrow(culture2)),1))
png("Size-scatter.png",width=12, height=6, unit='in', res=200)#
#
  par(mfrow=c(1,1), pty='s',cex=1.2)#
  plot(culture2$norm.fsc, culture2$diameter, log='xy', pch=NA,ylab=substitute(paste("Cell diameter (",mu,"m)")), xlab="Normalized scatter (dimensionless)",cex=2, xaxt='n', yaxt='n', xlim=c(0.002,10), ylim=c(0.2,20), main=paste(inst))#
  with(culture2, arrows(norm.fsc, diameter-culture2$diameter.sd, norm.fsc, diameter + culture2$diameter.sd,  code = 3, length=0, col='grey',lwd=2))#
  with(culture2, arrows(norm.fsc-norm.fsc.sd, diameter, norm.fsc+norm.fsc.sd, diameter,  code = 3, length=0,col='grey',lwd=2))#
  lines(mie$scatter, mie[,paste0("diam_",inst,"_mid")], col='red3', lwd=2)#
  lines(mie$scatter, mie[,paste0("diam_",inst,"_upr")], col='grey', lwd=2)#
  lines(mie$scatter, mie[,paste0("diam_",inst,"_lwr")], col='grey', lwd=2)#
  axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5))#
  axis(2, at=c(0.1,0.2,0.5,1,2,5,10,20),las=1)#
  points(culture2$norm.fsc, culture2$diameter, bg=alpha(viridis(nrow(culture2)),0.5), pch=21,cex=2)#
  legend("topleft",legend=c(as.vector(culture2$Group.1), "Mie-based model (n = 1.38 +/- 0.3)"), cex=0.5, pch=c(rep(21,nrow(culture2)),NA), lwd=c(rep(NA,nrow(culture2)),2), bty='n',#
            pt.bg=alpha(viridis(nrow(culture2)),0.5), col=c(rep(1,nrow(culture2)),'red3'), text.font=c(rep(3,nrow(culture2)),1))#
#
dev.off()
id <- findInterval(culture2$norm.fsc, mie$scatter)#
df <- data.frame(observed=culture2$diameter, predicted=mie[id,paste0("diam_",inst,"_mid")])#
reg <- lm(observed ~ predicted, data=df)#
summary(reg)
#############################
### 5. LINEAR REGRESSION ####
#############################
library(scales)#
library(viridis)#
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
setwd(path.to.git.repository)#
mie <- read.csv("calibrated-mie.csv")
par(mfrow=c(1,2), pty='s',cex=1.2)#
#
for(inst in c(740, 751)){#
#
merge <- read.csv(paste0(inst,"-Qc-cultures.csv"))#
merge2 <- subset(merge, Sample.ID !="Phaeodactylum tricornutum") # remove non-spherical cells#
merge2 <- merge2[order(merge2$norm.fsc),]#
plot(merge2$norm.fsc,merge2$pgC.cell, log='xy', yaxt='n', xaxt='n', pch=NA,xlim=c(0.002,10), ylim=c(0.005,100), ylab=expression(paste("Qc (pgC cell"^{-1},")")), xlab="Normalized scatter (dimensionless)", main=paste(inst))#
with(merge2, arrows(norm.fsc, pgC.cell - pgC.cell.sd, norm.fsc, pgC.cell + pgC.cell.sd,  code = 3, length=0, col='grey', lwd=2))#
with(merge2, arrows(norm.fsc-norm.fsc.sd, pgC.cell, norm.fsc+norm.fsc.sd, pgC.cell,  code = 3, length=0,col='grey',lwd=2))#
lines(mie$scatter, mie[,paste0("Qc_",inst,"_mid")], col='red3', lwd=2)#
lines(mie$scatter, mie[,paste0("Qc_",inst,"_upr")], col='grey', lwd=2)#
lines(mie$scatter, mie[,paste0("Qc_",inst,"_lwr")], col='grey', lwd=2)#
points(merge2$norm.fsc,merge2$pgC.cell,bg=alpha(viridis(nrow(merge2)),0.5),cex=2, pch=21)#
axis(2, at=c(0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), labels=c(0.005,0.01, 0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), las=1)#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10),labels=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10))#
legend("topleft",legend=c(as.vector(merge2$Sample.ID),"Mie-based model (n = 1.38 +/- 0.3)"), cex=0.5,pch=c(rep(21,nrow(merge2)),NA), lwd=c(rep(NA,nrow(merge2)),2), bty='n',#
          pt.bg=alpha(viridis(nrow(merge2)),0.5), col=c(rep(1,nrow(merge2)),'red3'), text.font=c(rep(3,nrow(merge2)),1))#
#
}
png("Qc-scatter.png",width=12, height=6, unit='in', res=200)#
par(mfrow=c(1,2), pty='s',cex=1.2)#
#
for(inst in c(740, 751)){#
#
merge <- read.csv(paste0(inst,"-Qc-cultures.csv"))#
merge2 <- subset(merge, Sample.ID !="Phaeodactylum tricornutum") # remove non-spherical cells#
merge2 <- merge2[order(merge2$norm.fsc),]#
plot(merge2$norm.fsc,merge2$pgC.cell, log='xy', yaxt='n', xaxt='n', pch=NA,xlim=c(0.002,10), ylim=c(0.005,100), ylab=expression(paste("Qc (pgC cell"^{-1},")")), xlab="Normalized scatter (dimensionless)", main=paste(inst))#
with(merge2, arrows(norm.fsc, pgC.cell - pgC.cell.sd, norm.fsc, pgC.cell + pgC.cell.sd,  code = 3, length=0, col='grey', lwd=2))#
with(merge2, arrows(norm.fsc-norm.fsc.sd, pgC.cell, norm.fsc+norm.fsc.sd, pgC.cell,  code = 3, length=0,col='grey',lwd=2))#
lines(mie$scatter, mie[,paste0("Qc_",inst,"_mid")], col='red3', lwd=2)#
lines(mie$scatter, mie[,paste0("Qc_",inst,"_upr")], col='grey', lwd=2)#
lines(mie$scatter, mie[,paste0("Qc_",inst,"_lwr")], col='grey', lwd=2)#
points(merge2$norm.fsc,merge2$pgC.cell,bg=alpha(viridis(nrow(merge2)),0.5),cex=2, pch=21)#
axis(2, at=c(0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), labels=c(0.005,0.01, 0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), las=1)#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10),labels=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10))#
legend("topleft",legend=c(as.vector(merge2$Sample.ID),"Mie-based model (n = 1.38 +/- 0.3)"), cex=0.5,pch=c(rep(21,nrow(merge2)),NA), lwd=c(rep(NA,nrow(merge2)),2), bty='n',#
          pt.bg=alpha(viridis(nrow(merge2)),0.5), col=c(rep(1,nrow(merge2)),'red3'), text.font=c(rep(3,nrow(merge2)),1))#
#
}#
#
dev.off()#
### correlation#
id <- findInterval(merge2$norm.fsc, mie$scatter)#
df <- data.frame(observed=merge2$pgC.cell, predicted=mie[id,paste0("Qc_",inst,"_mid")])#
reg <- lm(observed ~ predicted, data=df)#
summary(reg)
#############################
### 5. LINEAR REGRESSION ####
#############################
library(scales)#
.rainbow.cols <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow","#FF7F00", "red", "#7F0000"))#
#
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
setwd(path.to.git.repository)#
merge <- read.csv("Influx-Qc-cultures.csv")#
mie <- read.csv("INFLUXcalibrated-mie.csv")
### WARNING !!! ####
# 1. For regression purpose, we excluded elongated cell type, specifically Phaedactylum tricornutum since forward scatter is sensitive to the cell width (not cell length), underestimating the true cell size#
merge2 <- merge#subset(merge, Sample.ID !="Phaeodactylum tricornutum")#
merge2 <- merge2[order(merge2$norm.fsc),]#
#
# linear regression#
reg <- lm(pgC.cell ~ poly(norm.fsc,1,raw=T) , data=log(merge2[,c("pgC.cell","norm.fsc")],10))#
summary(reg)
par(cex=1.2, pty='s')#
plot(merge2$norm.fsc,merge2$pgC.cell, log='xy', yaxt='n', xaxt='n', pch=NA,xlim=c(0.002,20), ylim=c(0.005,100), ylab=expression(paste("Qc (pgC cell"^{-1},")")), xlab="Normalized scatter (dimensionless)")#
lines(mie$scatter, mie[,paste0('Qc_mid')], col='red3', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_upr')], col='grey', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_lwr')], col='grey', lwd=2)#
with(merge2, arrows(norm.fsc, pgC.cell - pgC.cell.sd, norm.fsc, pgC.cell + pgC.cell.sd,  code = 3, length=0, col='grey', lwd=2))#
with(merge2, arrows(norm.fsc-norm.fsc.sd, pgC.cell, norm.fsc+norm.fsc.sd, pgC.cell,  code = 3, length=0,col='grey',lwd=2))#
points(merge2$norm.fsc,merge2$pgC.cell,bg=alpha(viridis(nrow(merge2)),0.5),cex=2, pch=21)#
axis(2, at=c(0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), labels=c(0.005,0.01, 0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), las=1)#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10),labels=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10))#
legend("topleft",legend=c(as.vector(merge2$Sample.ID),"Mie-based model (n = 1.38 +/- 0.3)"), pch=c(rep(21,nrow(merge2)),NA, NA), lwd=c(rep(NA,nrow(merge2)),2, NA), bty='n',#
          pt.bg=alpha(viridis(nrow(merge2)),0.5), col=c(rep(1,nrow(merge2)),'red3'), text.font=c(rep(3,nrow(merge2)),1))
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
setwd(path.to.git.repository)#
merge <- read.csv("Influx-Qc-cultures.csv")#
mie <- read.csv("calibrated-mieINFLUX.csv")
# linear regression#
reg <- lm(pgC.cell ~ poly(norm.fsc,1,raw=T) , data=log(merge2[,c("pgC.cell","norm.fsc")],10))#
summary(reg)
par(cex=1.2, pty='s')#
plot(merge2$norm.fsc,merge2$pgC.cell, log='xy', yaxt='n', xaxt='n', pch=NA,xlim=c(0.002,20), ylim=c(0.005,100), ylab=expression(paste("Qc (pgC cell"^{-1},")")), xlab="Normalized scatter (dimensionless)")#
lines(mie$scatter, mie[,paste0('Qc_mid')], col='red3', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_upr')], col='grey', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_lwr')], col='grey', lwd=2)#
with(merge2, arrows(norm.fsc, pgC.cell - pgC.cell.sd, norm.fsc, pgC.cell + pgC.cell.sd,  code = 3, length=0, col='grey', lwd=2))#
with(merge2, arrows(norm.fsc-norm.fsc.sd, pgC.cell, norm.fsc+norm.fsc.sd, pgC.cell,  code = 3, length=0,col='grey',lwd=2))#
points(merge2$norm.fsc,merge2$pgC.cell,bg=alpha(viridis(nrow(merge2)),0.5),cex=2, pch=21)#
axis(2, at=c(0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), labels=c(0.005,0.01, 0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), las=1)#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10),labels=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10))#
legend("topleft",legend=c(as.vector(merge2$Sample.ID),"Mie-based model (n = 1.38 +/- 0.3)"), pch=c(rep(21,nrow(merge2)),NA, NA), lwd=c(rep(NA,nrow(merge2)),2, NA), bty='n',#
          pt.bg=alpha(viridis(nrow(merge2)),0.5), col=c(rep(1,nrow(merge2)),'red3'), text.font=c(rep(3,nrow(merge2)),1))
png("Influx-Qc-scatter.png",width=12, height=12, unit='in', res=400)#
#
par(cex=1.2, pty='s')#
plot(merge2$norm.fsc,merge2$pgC.cell, log='xy', yaxt='n', xaxt='n', pch=NA,xlim=c(0.002,20), ylim=c(0.005,100), ylab=expression(paste("Qc (pgC cell"^{-1},")")), xlab="Normalized scatter (dimensionless)")#
lines(mie$scatter, mie[,paste0('Qc_mid')], col='red3', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_upr')], col='grey', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_lwr')], col='grey', lwd=2)#
with(merge2, arrows(norm.fsc, pgC.cell - pgC.cell.sd, norm.fsc, pgC.cell + pgC.cell.sd,  code = 3, length=0, col='grey', lwd=2))#
with(merge2, arrows(norm.fsc-norm.fsc.sd, pgC.cell, norm.fsc+norm.fsc.sd, pgC.cell,  code = 3, length=0,col='grey',lwd=2))#
points(merge2$norm.fsc,merge2$pgC.cell,bg=alpha(viridis(nrow(merge2)),0.5),cex=2, pch=21)#
axis(2, at=c(0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), labels=c(0.005,0.01, 0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), las=1)#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10),labels=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10))#
legend("topleft",legend=c(as.vector(merge2$Sample.ID),"Mie-based model (n = 1.38 +/- 0.3)"), pch=c(rep(21,nrow(merge2)),NA, NA), lwd=c(rep(NA,nrow(merge2)),2, NA), bty='n',#
          pt.bg=alpha(viridis(nrow(merge2)),0.5), col=c(rep(1,nrow(merge2)),'red3'), text.font=c(rep(3,nrow(merge2)),1))#
dev.off()
library(popcycle)#
library(dplyr)#
library(viridis)#
#
### FIGURE 3#
setwd("~/Documents/DATA/Codes/seaflow-virtualcore")#
#
png("/Volumes/GoogleDrive/My Drive/manuscript_ScientificData/Figure3.png",width=6, height=6, unit='in', res=300)#
#
par(mfrow=c(1,1),cex=1.4, pty='s',mar=c(4,5,2,0.5))#
#
    ins <- "740"#
    ALL <- read.csv(paste0("1.bead_calibration/",ins,"-summary.csv"))#
      ALL$pmt <- 'coastal'#
      id <- which((grepl("oligo", ALL$file))==T)#
      ALL[id, "pmt"] <- 'oligo'#
      ALL$beads.size <- as.numeric(sub("um.evt","",t(data.frame(list(strsplit(as.character(ALL$file),"_"))))[,5], ))#
      ALL <- ALL[order(ALL$beads.size),]#
#
       df.o <- subset(ALL, pmt == 'oligo' & beads > 0 & beads.size > 0.18)#
       ref.o <- subset(df.o, beads.size ==1.00)#
       df.c <- subset(ALL, pmt == 'coastal' & beads > 0 & beads.size > 0.18)#
       ref.c <- subset(df.c, beads.size ==1.00)#
#
         comp.fsc <- mean(df.o$fsc.med[-1] - df.c$fsc.med)# [-1] to remove data from 0.3 µm beads not analyzed with instrument 740 with Coastal settings#
         comp.d1 <- mean(df.o$d1.med[-1] - df.c$d1.med)#
         comp.d2 <- mean(df.o$d2.med[-1] - df.c$d2.med)#
#
    DF <- data.frame(cbind(fsc=c(df.o$fsc.med,df.c$fsc.med+comp.fsc), D1=c(df.o$d1.med,df.c$d1.med+comp.d1),D2=c(df.o$d2.med,df.c$d2.med+comp.d2), size=c(df.o$beads.size,df.c$beads.size)))#
    DF <- DF[order(DF$size),]#
    i1 <- which(DF$size == 1)#
    DF[,c(1:3)] <- popcycle:::transformData(DF[,c(1:3)])#
#
slope <- read.csv("1.bead_calibration/seaflow_filter_slopes.csv")#
slope <- slope[which(slope$ins == ins),]#
        for(param in c("D1")){#
        plot(0,0,pch=NA, xlim=c(0.005, 20), ylim=c(0.005,20),ylab=paste("Normalized",param, "(unitless)"), xlab="Normalized forward scatter (unitless)", log='xy', xaxt='n', yaxt='n')#
        axis(1, at=c(0.01,0.1,1,10))#
        axis(2, at=c(0.01,0.1,1,10),las=1)#
#
        abline(b=slope[,paste0("notch.small.",param,"_2.5")],a=7*(10^(((slope[,paste0("intersect.small.",param,"_2.5")])/2^16)*3.5)/mean(DF[i1,param])), lwd=2, col='grey')#
        abline(b=slope[,paste0("notch.small.",param)],a=10^(((slope[,paste0("intersect.small.",param)])/2^16)*3.5)/mean(DF[i1,param]), lwd=2, col='red3')#
        abline(b=slope[,paste0("notch.small.",param,"_97.5")],a=-3*(10^(((slope[,paste0("intersect.small.",param,"_97.5")])/2^16)*3.5)/mean(DF[i1,param])), lwd=2, col='grey')#
        abline(b=slope[,paste0("notch.large.",param,"_2.5")],a=10000*(10^(((slope[,paste0("intersect.large.",param,"_2.5")])/2^16)*3.5)/mean(DF[i1,param])), lwd=2, col='grey')#
        abline(b=slope[,paste0("notch.large.",param)],a=10^(((slope[,paste0("intersect.large.",param)])/2^16)*3.5)/mean(DF[i1,param]), lwd=2, col='red3')#
        abline(b=slope[,paste0("notch.large.",param,"_97.5")],a=-2000*(10^(((slope[,paste0("intersect.large.",param,"_97.5")])/2^16)*3.5)/mean(DF[i1,param])), lwd=2, col='grey')#
#
                points(DF$fsc/mean(DF[i1,"fsc"]), DF[,param]/mean(DF[i1,param]), pch=21, bg=rep(alpha(viridis(7),0.5),each=2), cex=2)#
                legend("topleft",legend=paste(unique(DF$size), "µm beads"), cex=0.75, pch=21, bty='n',pt.bg=alpha(viridis(7),0.5))#
              }#
#
dev.off()
### FIGURE 4#
inst <- 740#
# Mie opt#
beads740 <- read.csv("~/Documents/DATA/Codes/fsc-size-calibration/740-summary.csv")#
beads740$fsc <- 10^((beads740$fsc.corr.high/2^16)*3.5)#
id.740 <- which(beads740$size == 1) # find 1 micron beads#
beads740$normalized.fsc <- beads740$fsc/mean(beads740[id.740,'fsc'])#
beads <- beads740[order(beads740$size),]#
mie4 <- t(read.csv("~/Documents/DATA/Codes/fsc-size-calibration/meidata-beads.csv" ,header=F)) # particle of 1 µm, index of refraction of 1.6033#
#
# Size#
culture <- read.csv("~/Documents/DATA/Codes/fsc-size-calibration/scatter_calibration.csv")#
culture$norm.fsc <- culture$fsc / culture$fsc.beads#
culture$norm.fsc.sd <- culture$fsc.sd / culture$fsc.beads#
culture$volume <- 4/3 * pi * (culture$diameter/2)^3#
culture$volume.sd <- culture$volume * culture$diameter.sd/culture$diameter#
#
culture2 <- aggregate(culture, by=list(culture$species), FUN=mean)#
culture2 <- subset(culture2, Group.1 !="Phaeodactylum tricornutum") # remove non-spherical cells#
culture2 <- culture2[order(culture2$norm.fsc),]#
#
mie <- read.csv("~/Documents/DATA/Codes/fsc-size-calibration/calibrated-mie.csv")#
#
# Carbon#
merge <- read.csv("~/Documents/DATA/Codes/fsc-poc-calibration/740-Qc-cultures.csv")#
merge2 <- subset(merge, Sample.ID !="Phaeodactylum tricornutum") # remove non-spherical cells#
merge2 <- merge2[order(merge2$norm.fsc),]
n <- layout(matrix(c(1,2,3), 1, 3, byrow = TRUE))#
  par(pty='s',cex=1.4, mar=c(4,5,2,0.5))#
#
  c <- 0.75#
  plot(beads$normalized.fsc, beads$size,log='xy', xaxt='n',yaxt='n',xlim=c(0.005,10), ylim=c(0.2,50), bg=alpha(viridis(nrow(beads)),0.5),cex=2, pch=21, xlab="Normalized scatter (unitless)", ylab="Cell diameter (µm)", las=1)#
  axis(1, at=c(0.01,0.1,1,10))#
  axis(2, at=c(0.1,0.2,0.5,1,2,5,10,20,50,200),las=1)#
  lines((mie4[,2]/876.7573)^1.06068, mie4[,1], lwd=2, col='red3')#
  legend("topleft",cex=c, legend=c(paste(unique(beads$size), 'µm-beads'), "Mie predictions"), bty='n', pch=c(rep(21,nrow(beads)/2), NA), lwd=c(rep(NA,nrow(beads)/2), 2),col=c(rep(1,nrow(beads)/2),'red3'), pt.bg=alpha(c(viridis(nrow(beads)/2), 'red3'),0.5))#
  mtext("a", 3, at=0.005, line=0.5,cex=3)#
#
  par(mar=c(4,0.5,2,5))#
  plot(culture2$norm.fsc, culture2$diameter, log='xy', pch=NA,ylab=substitute(paste("Cell diameter (",mu,"m)")), xlab="Normalized forward scatter (unitless)",cex=2, xaxt='n', yaxt='n', xlim=c(0.005,10), ylim=c(0.2,50))#
  with(culture2, arrows(norm.fsc, diameter-culture2$diameter.sd, norm.fsc, diameter + culture2$diameter.sd,  code = 3, length=0, col='grey',lwd=2))#
  with(culture2, arrows(norm.fsc-norm.fsc.sd, diameter, norm.fsc+norm.fsc.sd, diameter,  code = 3, length=0,col='grey',lwd=2))#
  lines(mie$scatter, mie[,paste0("diam_",inst,"_mid")], col='red3', lwd=2)#
  lines(mie$scatter, mie[,paste0("diam_",inst,"_upr")], col='grey', lwd=2)#
  lines(mie$scatter, mie[,paste0("diam_",inst,"_lwr")], col='grey', lwd=2)#
  axis(1, at=c(0.01,0.1,1,10))#
  axis(2, at=c(0.1,0.2,0.5,1,2,5,10,20,50,200),labels=NA, las=1)#
  points(culture2$norm.fsc, culture2$diameter, bg=alpha(viridis(nrow(culture2)),0.5), pch=21,cex=2)#
  legend("topleft",legend=c(as.vector(culture2$Group.1), "Mie predictions"), cex=c, pch=c(rep(21,nrow(culture2)),NA), lwd=c(rep(NA,nrow(culture2)),2), bty='n',#
            pt.bg=alpha(viridis(nrow(culture2)),0.5), col=c(rep(1,nrow(culture2)),'red3'), text.font=c(rep(3,nrow(culture2)),1))#
  mtext("b", 3, at=0.005, line=0.5,cex=3)#
#
  par(mar=c(4,5,2,0.5))#
  plot(merge2$norm.fsc,merge2$pgC.cell, log='xy', yaxt='n', xaxt='n', pch=NA,xlim=c(0.005,10), ylim=c(0.005,1000), ylab=expression(paste("Carbon (pgC cell"^{-1},")")), xlab="Normalized forward scatter (unitless)")#
  with(merge2, arrows(norm.fsc, pgC.cell - pgC.cell.sd, norm.fsc, pgC.cell + pgC.cell.sd,  code = 3, length=0, col='grey', lwd=2))#
  with(merge2, arrows(norm.fsc-norm.fsc.sd, pgC.cell, norm.fsc+norm.fsc.sd, pgC.cell,  code = 3, length=0,col='grey',lwd=2))#
  lines(mie$scatter, mie[,paste0("Qc_",inst,"_mid")], col='red3', lwd=2)#
  lines(mie$scatter, mie[,paste0("Qc_",inst,"_upr")], col='grey', lwd=2)#
  lines(mie$scatter, mie[,paste0("Qc_",inst,"_lwr")], col='grey', lwd=2)#
  points(merge2$norm.fsc,merge2$pgC.cell,bg=alpha(viridis(nrow(merge2)),0.5),cex=2, pch=21)#
  axis(2, at=c(0.005,0.05,0.5,5,50,500), labels=c(0.005,0.05,0.5,5,50,500), las=1)#
  axis(1, at=c(0.01,0.1,1,10))#
  legend("topleft",legend=c(as.vector(merge2$Sample.ID),"Mie predictions"), cex=c,pch=c(rep(21,nrow(merge2)),NA), lwd=c(rep(NA,nrow(merge2)),2), bty='n',#
            pt.bg=alpha(viridis(nrow(merge2)),0.5), col=c(rep(1,nrow(merge2)),'red3'), text.font=c(rep(3,nrow(merge2)),1))#
  mtext("c", 3, at=0.005, line=0.5,cex=3)
library(scales)#
library(viridis)#
path.to.git.repository <- "~/Documents/DATA/Codes/mie-theory"#
setwd(path.to.git.repository)#
#
##############################
### scatter normalization ####
##############################
#
beads740 <- read.csv("740-summary.csv")#
beads740$fsc <- 10^((beads740$fsc.corr.high/2^16)*3.5)#
id.740 <- which(beads740$size == 1) # find 1 micron beads#
beads740$normalized.fsc <- beads740$fsc/mean(beads740[id.740,'fsc'])#
beads740 <- beads740[order(beads740$size),]#
#
beads989<- read.csv("989-summary.csv")#
beads989$fsc <- 10^((beads989$fsc.corr.high/2^16)*3.5)#
id.989 <- which(beads989$size == 1) # find 1 micron beads#
beads989$normalized.fsc <- beads989$fsc/mean(beads989[id.989,'fsc'])#
beads989 <- beads989[order(beads989$size),]#
#
beads751 <- read.csv("751-summary.csv")#
beads751$fsc <- 10^((beads751$fsc.corr.high/2^16)*3.5)#
id.751<- which(beads751$size == 1) # find 1 micron beads#
beads751$normalized.fsc <- beads751 $fsc/mean(beads751 [id.751,'fsc'])#
beads751 <- beads751[order(beads751$size),]
library(DEoptim)#
#
# Mie theory fitting#
# n for phyto = 1.35- 1.41 # see Lehmuskero et al. Progr Oceanogr 2018#
mie2 <- t(read.csv("meidata-1010.csv" ,header=F)) # low#
mie1 <- t(read.csv("meidata-1032.csv" ,header=F)) # fit#
mie3 <- t(read.csv("meidata-1055.csv" ,header=F)) # high#
mie4 <- t(read.csv("meidata-beads.csv" ,header=F)) # particle of 1 µm, index of refraction of 1.6033#
#
# optimization routine#
sigma.lsq <- function(mie, beads, params){#
#
     c <- params[1]#
     b <- params[2]#
     id <- findInterval(beads$size, mie[,1])#
     scatt <- (mie[id,2]/c)^b#
#
           df <- data.frame(obs=beads$normalized.fsc, pred=scatt)#
      sigma <- mean(((df$obs - df$pred)/df$obs)^2,na.rm=T)#
      return(sigma)#
  }
inst <- 740#
#
### Optiomization#
#
if(inst == 740) beads <- beads740#
if(inst == 751) beads <- beads751#
if(inst == 989) beads <- beads989#
#
#beads1 <- subset(beads,  size > 0.3) # run to test optimzation across range of particle size, except 0.3 microns beads not properly analyzed.#
#
f <- function(params) sigma.lsq(mie=mie4, beads=beads, params)#
res <- DEoptim(f, lower=c(0,0), upper=c(10000,2), control=DEoptim.control(itermax=1000, reltol=1e-8,trace=100, steptol=100, strategy=2, parallelType=0))#
print(res$optim$bestval)#
params <- res$optim$bestmem # optimized 'c' and 'b' values#
print(params)
n <- layout(matrix(c(1,2,3), 1, 3, byrow = TRUE))#
  par(pty='s',cex=1.4, mar=c(4,5,2,0.5))#
#
  c <- 0.75#
  plot(beads$normalized.fsc, beads$size,log='xy', xaxt='n',yaxt='n',xlim=c(0.005,10), ylim=c(0.2,50), bg=alpha(viridis(nrow(beads)),0.5),cex=2, pch=21, xlab="Normalized scatter (unitless)", ylab="Cell diameter (µm)", las=1)#
  axis(1, at=c(0.01,0.1,1,10))#
  axis(2, at=c(0.1,0.2,0.5,1,2,5,10,20,50,200),las=1)#
  lines((mie4[,2]/585.0628864)^0.7744117, mie4[,1], lwd=2, col='red3')#
  legend("topleft",cex=c, legend=c(paste(unique(beads$size), 'µm-beads'), "Mie predictions"), bty='n', pch=c(rep(21,nrow(beads)/2), NA), lwd=c(rep(NA,nrow(beads)/2), 2),col=c(rep(1,nrow(beads)/2),'red3'), pt.bg=alpha(c(viridis(nrow(beads)/2), 'red3'),0.5))#
  mtext("a", 3, at=0.005, line=0.5,cex=3)#
#
  par(mar=c(4,0.5,2,5))#
  plot(culture2$norm.fsc, culture2$diameter, log='xy', pch=NA,ylab=substitute(paste("Cell diameter (",mu,"m)")), xlab="Normalized forward scatter (unitless)",cex=2, xaxt='n', yaxt='n', xlim=c(0.005,10), ylim=c(0.2,50))#
  with(culture2, arrows(norm.fsc, diameter-culture2$diameter.sd, norm.fsc, diameter + culture2$diameter.sd,  code = 3, length=0, col='grey',lwd=2))#
  with(culture2, arrows(norm.fsc-norm.fsc.sd, diameter, norm.fsc+norm.fsc.sd, diameter,  code = 3, length=0,col='grey',lwd=2))#
  lines(mie$scatter, mie[,paste0("diam_",inst,"_mid")], col='red3', lwd=2)#
  lines(mie$scatter, mie[,paste0("diam_",inst,"_upr")], col='grey', lwd=2)#
  lines(mie$scatter, mie[,paste0("diam_",inst,"_lwr")], col='grey', lwd=2)#
  axis(1, at=c(0.01,0.1,1,10))#
  axis(2, at=c(0.1,0.2,0.5,1,2,5,10,20,50,200),labels=NA, las=1)#
  points(culture2$norm.fsc, culture2$diameter, bg=alpha(viridis(nrow(culture2)),0.5), pch=21,cex=2)#
  legend("topleft",legend=c(as.vector(culture2$Group.1), "Mie predictions"), cex=c, pch=c(rep(21,nrow(culture2)),NA), lwd=c(rep(NA,nrow(culture2)),2), bty='n',#
            pt.bg=alpha(viridis(nrow(culture2)),0.5), col=c(rep(1,nrow(culture2)),'red3'), text.font=c(rep(3,nrow(culture2)),1))#
  mtext("b", 3, at=0.005, line=0.5,cex=3)#
#
  par(mar=c(4,5,2,0.5))#
  plot(merge2$norm.fsc,merge2$pgC.cell, log='xy', yaxt='n', xaxt='n', pch=NA,xlim=c(0.005,10), ylim=c(0.005,1000), ylab=expression(paste("Carbon (pgC cell"^{-1},")")), xlab="Normalized forward scatter (unitless)")#
  with(merge2, arrows(norm.fsc, pgC.cell - pgC.cell.sd, norm.fsc, pgC.cell + pgC.cell.sd,  code = 3, length=0, col='grey', lwd=2))#
  with(merge2, arrows(norm.fsc-norm.fsc.sd, pgC.cell, norm.fsc+norm.fsc.sd, pgC.cell,  code = 3, length=0,col='grey',lwd=2))#
  lines(mie$scatter, mie[,paste0("Qc_",inst,"_mid")], col='red3', lwd=2)#
  lines(mie$scatter, mie[,paste0("Qc_",inst,"_upr")], col='grey', lwd=2)#
  lines(mie$scatter, mie[,paste0("Qc_",inst,"_lwr")], col='grey', lwd=2)#
  points(merge2$norm.fsc,merge2$pgC.cell,bg=alpha(viridis(nrow(merge2)),0.5),cex=2, pch=21)#
  axis(2, at=c(0.005,0.05,0.5,5,50,500), labels=c(0.005,0.05,0.5,5,50,500), las=1)#
  axis(1, at=c(0.01,0.1,1,10))#
  legend("topleft",legend=c(as.vector(merge2$Sample.ID),"Mie predictions"), cex=c,pch=c(rep(21,nrow(merge2)),NA), lwd=c(rep(NA,nrow(merge2)),2), bty='n',#
            pt.bg=alpha(viridis(nrow(merge2)),0.5), col=c(rep(1,nrow(merge2)),'red3'), text.font=c(rep(3,nrow(merge2)),1))#
  mtext("c", 3, at=0.005, line=0.5,cex=3)
png("/Volumes/GoogleDrive/My Drive/manuscript_ScientificData/Figure4.png",width=18, height=6, unit='in', res=300)#
#
n <- layout(matrix(c(1,2,3), 1, 3, byrow = TRUE))#
  par(pty='s',cex=1.4, mar=c(4,5,2,0.5))#
#
  c <- 0.75#
  plot(beads$normalized.fsc, beads$size,log='xy', xaxt='n',yaxt='n',xlim=c(0.005,10), ylim=c(0.2,50), bg=alpha(viridis(nrow(beads)),0.5),cex=2, pch=21, xlab="Normalized scatter (unitless)", ylab="Cell diameter (µm)", las=1)#
  axis(1, at=c(0.01,0.1,1,10))#
  axis(2, at=c(0.1,0.2,0.5,1,2,5,10,20,50,200),las=1)#
  lines((mie4[,2]/585.0628864)^0.7744117, mie4[,1], lwd=2, col='red3')#
  legend("topleft",cex=c, legend=c(paste(unique(beads$size), 'µm-beads'), "Mie predictions"), bty='n', pch=c(rep(21,nrow(beads)/2), NA), lwd=c(rep(NA,nrow(beads)/2), 2),col=c(rep(1,nrow(beads)/2),'red3'), pt.bg=alpha(c(viridis(nrow(beads)/2), 'red3'),0.5))#
  mtext("a", 3, at=0.005, line=0.5,cex=3)#
#
  par(mar=c(4,0.5,2,5))#
  plot(culture2$norm.fsc, culture2$diameter, log='xy', pch=NA,ylab=substitute(paste("Cell diameter (",mu,"m)")), xlab="Normalized forward scatter (unitless)",cex=2, xaxt='n', yaxt='n', xlim=c(0.005,10), ylim=c(0.2,50))#
  with(culture2, arrows(norm.fsc, diameter-culture2$diameter.sd, norm.fsc, diameter + culture2$diameter.sd,  code = 3, length=0, col='grey',lwd=2))#
  with(culture2, arrows(norm.fsc-norm.fsc.sd, diameter, norm.fsc+norm.fsc.sd, diameter,  code = 3, length=0,col='grey',lwd=2))#
  lines(mie$scatter, mie[,paste0("diam_",inst,"_mid")], col='red3', lwd=2)#
  lines(mie$scatter, mie[,paste0("diam_",inst,"_upr")], col='grey', lwd=2)#
  lines(mie$scatter, mie[,paste0("diam_",inst,"_lwr")], col='grey', lwd=2)#
  axis(1, at=c(0.01,0.1,1,10))#
  axis(2, at=c(0.1,0.2,0.5,1,2,5,10,20,50,200),labels=NA, las=1)#
  points(culture2$norm.fsc, culture2$diameter, bg=alpha(viridis(nrow(culture2)),0.5), pch=21,cex=2)#
  legend("topleft",legend=c(as.vector(culture2$Group.1), "Mie predictions"), cex=c, pch=c(rep(21,nrow(culture2)),NA), lwd=c(rep(NA,nrow(culture2)),2), bty='n',#
            pt.bg=alpha(viridis(nrow(culture2)),0.5), col=c(rep(1,nrow(culture2)),'red3'), text.font=c(rep(3,nrow(culture2)),1))#
  mtext("b", 3, at=0.005, line=0.5,cex=3)#
#
  par(mar=c(4,5,2,0.5))#
  plot(merge2$norm.fsc,merge2$pgC.cell, log='xy', yaxt='n', xaxt='n', pch=NA,xlim=c(0.005,10), ylim=c(0.005,1000), ylab=expression(paste("Carbon (pgC cell"^{-1},")")), xlab="Normalized forward scatter (unitless)")#
  with(merge2, arrows(norm.fsc, pgC.cell - pgC.cell.sd, norm.fsc, pgC.cell + pgC.cell.sd,  code = 3, length=0, col='grey', lwd=2))#
  with(merge2, arrows(norm.fsc-norm.fsc.sd, pgC.cell, norm.fsc+norm.fsc.sd, pgC.cell,  code = 3, length=0,col='grey',lwd=2))#
  lines(mie$scatter, mie[,paste0("Qc_",inst,"_mid")], col='red3', lwd=2)#
  lines(mie$scatter, mie[,paste0("Qc_",inst,"_upr")], col='grey', lwd=2)#
  lines(mie$scatter, mie[,paste0("Qc_",inst,"_lwr")], col='grey', lwd=2)#
  points(merge2$norm.fsc,merge2$pgC.cell,bg=alpha(viridis(nrow(merge2)),0.5),cex=2, pch=21)#
  axis(2, at=c(0.005,0.05,0.5,5,50,500), labels=c(0.005,0.05,0.5,5,50,500), las=1)#
  axis(1, at=c(0.01,0.1,1,10))#
  legend("topleft",legend=c(as.vector(merge2$Sample.ID),"Mie predictions"), cex=c,pch=c(rep(21,nrow(merge2)),NA), lwd=c(rep(NA,nrow(merge2)),2), bty='n',#
            pt.bg=alpha(viridis(nrow(merge2)),0.5), col=c(rep(1,nrow(merge2)),'red3'), text.font=c(rep(3,nrow(merge2)),1))#
  mtext("c", 3, at=0.005, line=0.5,cex=3)#
dev.off()
